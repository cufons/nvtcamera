// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cameractl.proto
// Protobuf C++ Version: 4.26.0-dev

#ifndef GOOGLE_PROTOBUF_INCLUDED_cameractl_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cameractl_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION != 4026000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cameractl_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_cameractl_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_cameractl_2eproto;
class CamCtlRequest;
struct CamCtlRequestDefaultTypeInternal;
extern CamCtlRequestDefaultTypeInternal _CamCtlRequest_default_instance_;
class CamCtlRequest_motorMoveRequest;
struct CamCtlRequest_motorMoveRequestDefaultTypeInternal;
extern CamCtlRequest_motorMoveRequestDefaultTypeInternal _CamCtlRequest_motorMoveRequest_default_instance_;
class CamCtlRequest_vencSettingsSetRequest;
struct CamCtlRequest_vencSettingsSetRequestDefaultTypeInternal;
extern CamCtlRequest_vencSettingsSetRequestDefaultTypeInternal _CamCtlRequest_vencSettingsSetRequest_default_instance_;
class CamCtlResponse;
struct CamCtlResponseDefaultTypeInternal;
extern CamCtlResponseDefaultTypeInternal _CamCtlResponse_default_instance_;
class ISPSettings;
struct ISPSettingsDefaultTypeInternal;
extern ISPSettingsDefaultTypeInternal _ISPSettings_default_instance_;
class ModeSwitchParams;
struct ModeSwitchParamsDefaultTypeInternal;
extern ModeSwitchParamsDefaultTypeInternal _ModeSwitchParams_default_instance_;
class NewUserData;
struct NewUserDataDefaultTypeInternal;
extern NewUserDataDefaultTypeInternal _NewUserData_default_instance_;
class NvtCodecVencSettings;
struct NvtCodecVencSettingsDefaultTypeInternal;
extern NvtCodecVencSettingsDefaultTypeInternal _NvtCodecVencSettings_default_instance_;
class NvtCodecVencSettings_AQSettings;
struct NvtCodecVencSettings_AQSettingsDefaultTypeInternal;
extern NvtCodecVencSettings_AQSettingsDefaultTypeInternal _NvtCodecVencSettings_AQSettings_default_instance_;
class NvtCodecVencSettings_LTRSettings;
struct NvtCodecVencSettings_LTRSettingsDefaultTypeInternal;
extern NvtCodecVencSettings_LTRSettingsDefaultTypeInternal _NvtCodecVencSettings_LTRSettings_default_instance_;
class NvtCodecVencSettings_VencCBR;
struct NvtCodecVencSettings_VencCBRDefaultTypeInternal;
extern NvtCodecVencSettings_VencCBRDefaultTypeInternal _NvtCodecVencSettings_VencCBR_default_instance_;
class NvtCodecVencSettings_VencCBR_IQp;
struct NvtCodecVencSettings_VencCBR_IQpDefaultTypeInternal;
extern NvtCodecVencSettings_VencCBR_IQpDefaultTypeInternal _NvtCodecVencSettings_VencCBR_IQp_default_instance_;
class NvtCodecVencSettings_VencCBR_PQp;
struct NvtCodecVencSettings_VencCBR_PQpDefaultTypeInternal;
extern NvtCodecVencSettings_VencCBR_PQpDefaultTypeInternal _NvtCodecVencSettings_VencCBR_PQp_default_instance_;
class NvtCodecVencSettings_VencCBR_RowRcSettings;
struct NvtCodecVencSettings_VencCBR_RowRcSettingsDefaultTypeInternal;
extern NvtCodecVencSettings_VencCBR_RowRcSettingsDefaultTypeInternal _NvtCodecVencSettings_VencCBR_RowRcSettings_default_instance_;
class NvtCodecVencSettings_VencEVBR;
struct NvtCodecVencSettings_VencEVBRDefaultTypeInternal;
extern NvtCodecVencSettings_VencEVBRDefaultTypeInternal _NvtCodecVencSettings_VencEVBR_default_instance_;
class NvtCodecVencSettings_VencFIXQP;
struct NvtCodecVencSettings_VencFIXQPDefaultTypeInternal;
extern NvtCodecVencSettings_VencFIXQPDefaultTypeInternal _NvtCodecVencSettings_VencFIXQP_default_instance_;
class NvtCodecVencSettings_VencNoneBRC;
struct NvtCodecVencSettings_VencNoneBRCDefaultTypeInternal;
extern NvtCodecVencSettings_VencNoneBRCDefaultTypeInternal _NvtCodecVencSettings_VencNoneBRC_default_instance_;
class NvtCodecVencSettings_VencVBR;
struct NvtCodecVencSettings_VencVBRDefaultTypeInternal;
extern NvtCodecVencSettings_VencVBRDefaultTypeInternal _NvtCodecVencSettings_VencVBR_default_instance_;
class UserList;
struct UserListDefaultTypeInternal;
extern UserListDefaultTypeInternal _UserList_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

enum NvtCodecVencSettings_InputSource : int {
  NvtCodecVencSettings_InputSource_INPUT_SOURCE_UNKNOWN = 0,
  NvtCodecVencSettings_InputSource_INPUT_SOURCE_SENSOR1 = 1,
  NvtCodecVencSettings_InputSource_INPUT_SOURCE_SENSOR2 = 2,
  NvtCodecVencSettings_InputSource_INPUT_SOURCE_SENSOR3 = 3,
  NvtCodecVencSettings_InputSource_INPUT_SOURCE_SENSOR4 = 4,
  NvtCodecVencSettings_InputSource_INPUT_SOURCE_UVC = 5,
  NvtCodecVencSettings_InputSource_NvtCodecVencSettings_InputSource_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  NvtCodecVencSettings_InputSource_NvtCodecVencSettings_InputSource_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool NvtCodecVencSettings_InputSource_IsValid(int value);
extern const uint32_t NvtCodecVencSettings_InputSource_internal_data_[];
constexpr NvtCodecVencSettings_InputSource NvtCodecVencSettings_InputSource_InputSource_MIN = static_cast<NvtCodecVencSettings_InputSource>(0);
constexpr NvtCodecVencSettings_InputSource NvtCodecVencSettings_InputSource_InputSource_MAX = static_cast<NvtCodecVencSettings_InputSource>(5);
constexpr int NvtCodecVencSettings_InputSource_InputSource_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
NvtCodecVencSettings_InputSource_descriptor();
template <typename T>
const std::string& NvtCodecVencSettings_InputSource_Name(T value) {
  static_assert(std::is_same<T, NvtCodecVencSettings_InputSource>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to InputSource_Name().");
  return NvtCodecVencSettings_InputSource_Name(static_cast<NvtCodecVencSettings_InputSource>(value));
}
template <>
inline const std::string& NvtCodecVencSettings_InputSource_Name(NvtCodecVencSettings_InputSource value) {
  return ::google::protobuf::internal::NameOfDenseEnum<NvtCodecVencSettings_InputSource_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool NvtCodecVencSettings_InputSource_Parse(absl::string_view name, NvtCodecVencSettings_InputSource* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NvtCodecVencSettings_InputSource>(
      NvtCodecVencSettings_InputSource_descriptor(), name, value);
}
enum NvtCodecVencSettings_Format : int {
  NvtCodecVencSettings_Format_FORMAT_UNKNOWN = 0,
  NvtCodecVencSettings_Format_FORMAT_MJPEG = 1,
  NvtCodecVencSettings_Format_FORMAT_H264 = 2,
  NvtCodecVencSettings_Format_FORMAT_H265 = 3,
  NvtCodecVencSettings_Format_FORMAT_YUV = 4,
  NvtCodecVencSettings_Format_NvtCodecVencSettings_Format_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  NvtCodecVencSettings_Format_NvtCodecVencSettings_Format_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool NvtCodecVencSettings_Format_IsValid(int value);
extern const uint32_t NvtCodecVencSettings_Format_internal_data_[];
constexpr NvtCodecVencSettings_Format NvtCodecVencSettings_Format_Format_MIN = static_cast<NvtCodecVencSettings_Format>(0);
constexpr NvtCodecVencSettings_Format NvtCodecVencSettings_Format_Format_MAX = static_cast<NvtCodecVencSettings_Format>(4);
constexpr int NvtCodecVencSettings_Format_Format_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
NvtCodecVencSettings_Format_descriptor();
template <typename T>
const std::string& NvtCodecVencSettings_Format_Name(T value) {
  static_assert(std::is_same<T, NvtCodecVencSettings_Format>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Format_Name().");
  return NvtCodecVencSettings_Format_Name(static_cast<NvtCodecVencSettings_Format>(value));
}
template <>
inline const std::string& NvtCodecVencSettings_Format_Name(NvtCodecVencSettings_Format value) {
  return ::google::protobuf::internal::NameOfDenseEnum<NvtCodecVencSettings_Format_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool NvtCodecVencSettings_Format_Parse(absl::string_view name, NvtCodecVencSettings_Format* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NvtCodecVencSettings_Format>(
      NvtCodecVencSettings_Format_descriptor(), name, value);
}
enum NvtCodecVencSettings_Profile : int {
  NvtCodecVencSettings_Profile_PROFILE_UNKNOWN = 0,
  NvtCodecVencSettings_Profile_PROFILE_BASELINE = 1,
  NvtCodecVencSettings_Profile_PROFILE_MAIN = 2,
  NvtCodecVencSettings_Profile_PROFILE_HIGH = 3,
  NvtCodecVencSettings_Profile_NvtCodecVencSettings_Profile_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  NvtCodecVencSettings_Profile_NvtCodecVencSettings_Profile_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool NvtCodecVencSettings_Profile_IsValid(int value);
extern const uint32_t NvtCodecVencSettings_Profile_internal_data_[];
constexpr NvtCodecVencSettings_Profile NvtCodecVencSettings_Profile_Profile_MIN = static_cast<NvtCodecVencSettings_Profile>(0);
constexpr NvtCodecVencSettings_Profile NvtCodecVencSettings_Profile_Profile_MAX = static_cast<NvtCodecVencSettings_Profile>(3);
constexpr int NvtCodecVencSettings_Profile_Profile_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
NvtCodecVencSettings_Profile_descriptor();
template <typename T>
const std::string& NvtCodecVencSettings_Profile_Name(T value) {
  static_assert(std::is_same<T, NvtCodecVencSettings_Profile>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Profile_Name().");
  return NvtCodecVencSettings_Profile_Name(static_cast<NvtCodecVencSettings_Profile>(value));
}
template <>
inline const std::string& NvtCodecVencSettings_Profile_Name(NvtCodecVencSettings_Profile value) {
  return ::google::protobuf::internal::NameOfDenseEnum<NvtCodecVencSettings_Profile_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool NvtCodecVencSettings_Profile_Parse(absl::string_view name, NvtCodecVencSettings_Profile* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NvtCodecVencSettings_Profile>(
      NvtCodecVencSettings_Profile_descriptor(), name, value);
}
enum NvtCodecVencSettings_VencSVCT : int {
  NvtCodecVencSettings_VencSVCT_SVCT_DISABLE = 0,
  NvtCodecVencSettings_VencSVCT_SVCT_LAYER_1 = 1,
  NvtCodecVencSettings_VencSVCT_SVCT_LAYER_2 = 2,
  NvtCodecVencSettings_VencSVCT_NvtCodecVencSettings_VencSVCT_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  NvtCodecVencSettings_VencSVCT_NvtCodecVencSettings_VencSVCT_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool NvtCodecVencSettings_VencSVCT_IsValid(int value);
extern const uint32_t NvtCodecVencSettings_VencSVCT_internal_data_[];
constexpr NvtCodecVencSettings_VencSVCT NvtCodecVencSettings_VencSVCT_VencSVCT_MIN = static_cast<NvtCodecVencSettings_VencSVCT>(0);
constexpr NvtCodecVencSettings_VencSVCT NvtCodecVencSettings_VencSVCT_VencSVCT_MAX = static_cast<NvtCodecVencSettings_VencSVCT>(2);
constexpr int NvtCodecVencSettings_VencSVCT_VencSVCT_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
NvtCodecVencSettings_VencSVCT_descriptor();
template <typename T>
const std::string& NvtCodecVencSettings_VencSVCT_Name(T value) {
  static_assert(std::is_same<T, NvtCodecVencSettings_VencSVCT>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to VencSVCT_Name().");
  return NvtCodecVencSettings_VencSVCT_Name(static_cast<NvtCodecVencSettings_VencSVCT>(value));
}
template <>
inline const std::string& NvtCodecVencSettings_VencSVCT_Name(NvtCodecVencSettings_VencSVCT value) {
  return ::google::protobuf::internal::NameOfDenseEnum<NvtCodecVencSettings_VencSVCT_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool NvtCodecVencSettings_VencSVCT_Parse(absl::string_view name, NvtCodecVencSettings_VencSVCT* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NvtCodecVencSettings_VencSVCT>(
      NvtCodecVencSettings_VencSVCT_descriptor(), name, value);
}
enum NvtCodecVencSettings_VencRotation : int {
  NvtCodecVencSettings_VencRotation_RT_NONE = 0,
  NvtCodecVencSettings_VencRotation_RT_BUILTIN_90 = 1,
  NvtCodecVencSettings_VencRotation_RT_BUILTIN_270 = 2,
  NvtCodecVencSettings_VencRotation_RT_EXTEND_90 = 3,
  NvtCodecVencSettings_VencRotation_RT_EXTEND_180 = 4,
  NvtCodecVencSettings_VencRotation_RT_EXTEND_270 = 5,
  NvtCodecVencSettings_VencRotation_NvtCodecVencSettings_VencRotation_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  NvtCodecVencSettings_VencRotation_NvtCodecVencSettings_VencRotation_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool NvtCodecVencSettings_VencRotation_IsValid(int value);
extern const uint32_t NvtCodecVencSettings_VencRotation_internal_data_[];
constexpr NvtCodecVencSettings_VencRotation NvtCodecVencSettings_VencRotation_VencRotation_MIN = static_cast<NvtCodecVencSettings_VencRotation>(0);
constexpr NvtCodecVencSettings_VencRotation NvtCodecVencSettings_VencRotation_VencRotation_MAX = static_cast<NvtCodecVencSettings_VencRotation>(5);
constexpr int NvtCodecVencSettings_VencRotation_VencRotation_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
NvtCodecVencSettings_VencRotation_descriptor();
template <typename T>
const std::string& NvtCodecVencSettings_VencRotation_Name(T value) {
  static_assert(std::is_same<T, NvtCodecVencSettings_VencRotation>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to VencRotation_Name().");
  return NvtCodecVencSettings_VencRotation_Name(static_cast<NvtCodecVencSettings_VencRotation>(value));
}
template <>
inline const std::string& NvtCodecVencSettings_VencRotation_Name(NvtCodecVencSettings_VencRotation value) {
  return ::google::protobuf::internal::NameOfDenseEnum<NvtCodecVencSettings_VencRotation_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool NvtCodecVencSettings_VencRotation_Parse(absl::string_view name, NvtCodecVencSettings_VencRotation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NvtCodecVencSettings_VencRotation>(
      NvtCodecVencSettings_VencRotation_descriptor(), name, value);
}
enum ISPSettings_ISPPreset : int {
  ISPSettings_ISPPreset_PRESET_UNKNOWN = 0,
  ISPSettings_ISPPreset_PRESET_DAY = 1,
  ISPSettings_ISPPreset_PRESET_NIGHT = 2,
  ISPSettings_ISPPreset_PRESET_NIGHT_IR = 3,
  ISPSettings_ISPPreset_ISPSettings_ISPPreset_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ISPSettings_ISPPreset_ISPSettings_ISPPreset_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ISPSettings_ISPPreset_IsValid(int value);
extern const uint32_t ISPSettings_ISPPreset_internal_data_[];
constexpr ISPSettings_ISPPreset ISPSettings_ISPPreset_ISPPreset_MIN = static_cast<ISPSettings_ISPPreset>(0);
constexpr ISPSettings_ISPPreset ISPSettings_ISPPreset_ISPPreset_MAX = static_cast<ISPSettings_ISPPreset>(3);
constexpr int ISPSettings_ISPPreset_ISPPreset_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
ISPSettings_ISPPreset_descriptor();
template <typename T>
const std::string& ISPSettings_ISPPreset_Name(T value) {
  static_assert(std::is_same<T, ISPSettings_ISPPreset>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ISPPreset_Name().");
  return ISPSettings_ISPPreset_Name(static_cast<ISPSettings_ISPPreset>(value));
}
template <>
inline const std::string& ISPSettings_ISPPreset_Name(ISPSettings_ISPPreset value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ISPSettings_ISPPreset_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool ISPSettings_ISPPreset_Parse(absl::string_view name, ISPSettings_ISPPreset* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ISPSettings_ISPPreset>(
      ISPSettings_ISPPreset_descriptor(), name, value);
}
enum ModeSwitchParams_MSMode : int {
  ModeSwitchParams_MSMode_MS_UNKNOWN = 0,
  ModeSwitchParams_MSMode_MS_AUTO = 1,
  ModeSwitchParams_MSMode_MS_DAY = 2,
  ModeSwitchParams_MSMode_MS_NIGHT = 3,
  ModeSwitchParams_MSMode_ModeSwitchParams_MSMode_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ModeSwitchParams_MSMode_ModeSwitchParams_MSMode_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ModeSwitchParams_MSMode_IsValid(int value);
extern const uint32_t ModeSwitchParams_MSMode_internal_data_[];
constexpr ModeSwitchParams_MSMode ModeSwitchParams_MSMode_MSMode_MIN = static_cast<ModeSwitchParams_MSMode>(0);
constexpr ModeSwitchParams_MSMode ModeSwitchParams_MSMode_MSMode_MAX = static_cast<ModeSwitchParams_MSMode>(3);
constexpr int ModeSwitchParams_MSMode_MSMode_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
ModeSwitchParams_MSMode_descriptor();
template <typename T>
const std::string& ModeSwitchParams_MSMode_Name(T value) {
  static_assert(std::is_same<T, ModeSwitchParams_MSMode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MSMode_Name().");
  return ModeSwitchParams_MSMode_Name(static_cast<ModeSwitchParams_MSMode>(value));
}
template <>
inline const std::string& ModeSwitchParams_MSMode_Name(ModeSwitchParams_MSMode value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ModeSwitchParams_MSMode_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool ModeSwitchParams_MSMode_Parse(absl::string_view name, ModeSwitchParams_MSMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ModeSwitchParams_MSMode>(
      ModeSwitchParams_MSMode_descriptor(), name, value);
}
enum CamCtlRequest_RequestType : int {
  CamCtlRequest_RequestType_UNKNOWN = 0,
  CamCtlRequest_RequestType_CMD = 1,
  CamCtlRequest_RequestType_CamCtlRequest_RequestType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  CamCtlRequest_RequestType_CamCtlRequest_RequestType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool CamCtlRequest_RequestType_IsValid(int value);
extern const uint32_t CamCtlRequest_RequestType_internal_data_[];
constexpr CamCtlRequest_RequestType CamCtlRequest_RequestType_RequestType_MIN = static_cast<CamCtlRequest_RequestType>(0);
constexpr CamCtlRequest_RequestType CamCtlRequest_RequestType_RequestType_MAX = static_cast<CamCtlRequest_RequestType>(1);
constexpr int CamCtlRequest_RequestType_RequestType_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
CamCtlRequest_RequestType_descriptor();
template <typename T>
const std::string& CamCtlRequest_RequestType_Name(T value) {
  static_assert(std::is_same<T, CamCtlRequest_RequestType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to RequestType_Name().");
  return CamCtlRequest_RequestType_Name(static_cast<CamCtlRequest_RequestType>(value));
}
template <>
inline const std::string& CamCtlRequest_RequestType_Name(CamCtlRequest_RequestType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<CamCtlRequest_RequestType_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool CamCtlRequest_RequestType_Parse(absl::string_view name, CamCtlRequest_RequestType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CamCtlRequest_RequestType>(
      CamCtlRequest_RequestType_descriptor(), name, value);
}
enum CamCtlResponse_ResponseType : int {
  CamCtlResponse_ResponseType_UNKNOWN = 0,
  CamCtlResponse_ResponseType_OK = 1,
  CamCtlResponse_ResponseType_INVALID_REQUEST = 2,
  CamCtlResponse_ResponseType_REQUEST_ERROR = 3,
  CamCtlResponse_ResponseType_DECODE_ERROR = 4,
  CamCtlResponse_ResponseType_CamCtlResponse_ResponseType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  CamCtlResponse_ResponseType_CamCtlResponse_ResponseType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool CamCtlResponse_ResponseType_IsValid(int value);
extern const uint32_t CamCtlResponse_ResponseType_internal_data_[];
constexpr CamCtlResponse_ResponseType CamCtlResponse_ResponseType_ResponseType_MIN = static_cast<CamCtlResponse_ResponseType>(0);
constexpr CamCtlResponse_ResponseType CamCtlResponse_ResponseType_ResponseType_MAX = static_cast<CamCtlResponse_ResponseType>(4);
constexpr int CamCtlResponse_ResponseType_ResponseType_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
CamCtlResponse_ResponseType_descriptor();
template <typename T>
const std::string& CamCtlResponse_ResponseType_Name(T value) {
  static_assert(std::is_same<T, CamCtlResponse_ResponseType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ResponseType_Name().");
  return CamCtlResponse_ResponseType_Name(static_cast<CamCtlResponse_ResponseType>(value));
}
template <>
inline const std::string& CamCtlResponse_ResponseType_Name(CamCtlResponse_ResponseType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<CamCtlResponse_ResponseType_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool CamCtlResponse_ResponseType_Parse(absl::string_view name, CamCtlResponse_ResponseType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CamCtlResponse_ResponseType>(
      CamCtlResponse_ResponseType_descriptor(), name, value);
}
enum VencType : int {
  VENC_UNKNOWN = 0,
  VENC_MAIN = 1,
  VENC_AUX = 2,
  VencType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  VencType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool VencType_IsValid(int value);
extern const uint32_t VencType_internal_data_[];
constexpr VencType VencType_MIN = static_cast<VencType>(0);
constexpr VencType VencType_MAX = static_cast<VencType>(2);
constexpr int VencType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
VencType_descriptor();
template <typename T>
const std::string& VencType_Name(T value) {
  static_assert(std::is_same<T, VencType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to VencType_Name().");
  return VencType_Name(static_cast<VencType>(value));
}
template <>
inline const std::string& VencType_Name(VencType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<VencType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool VencType_Parse(absl::string_view name, VencType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VencType>(
      VencType_descriptor(), name, value);
}
enum StepMotorType : int {
  STEP_MOTOR_UNKNOWN = 0,
  STEP_MOTOR_PAN = 1,
  STEP_MOTOR_TILT = 2,
  StepMotorType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  StepMotorType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool StepMotorType_IsValid(int value);
extern const uint32_t StepMotorType_internal_data_[];
constexpr StepMotorType StepMotorType_MIN = static_cast<StepMotorType>(0);
constexpr StepMotorType StepMotorType_MAX = static_cast<StepMotorType>(2);
constexpr int StepMotorType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
StepMotorType_descriptor();
template <typename T>
const std::string& StepMotorType_Name(T value) {
  static_assert(std::is_same<T, StepMotorType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to StepMotorType_Name().");
  return StepMotorType_Name(static_cast<StepMotorType>(value));
}
template <>
inline const std::string& StepMotorType_Name(StepMotorType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<StepMotorType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool StepMotorType_Parse(absl::string_view name, StepMotorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StepMotorType>(
      StepMotorType_descriptor(), name, value);
}
enum StepMotorDirection : int {
  STEP_DIRECTION_UNKNOWN = 0,
  STEP_DIRECTION_FORWARD = 1,
  STEP_DIRECTION_REVERSE = 2,
  StepMotorDirection_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  StepMotorDirection_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool StepMotorDirection_IsValid(int value);
extern const uint32_t StepMotorDirection_internal_data_[];
constexpr StepMotorDirection StepMotorDirection_MIN = static_cast<StepMotorDirection>(0);
constexpr StepMotorDirection StepMotorDirection_MAX = static_cast<StepMotorDirection>(2);
constexpr int StepMotorDirection_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
StepMotorDirection_descriptor();
template <typename T>
const std::string& StepMotorDirection_Name(T value) {
  static_assert(std::is_same<T, StepMotorDirection>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to StepMotorDirection_Name().");
  return StepMotorDirection_Name(static_cast<StepMotorDirection>(value));
}
template <>
inline const std::string& StepMotorDirection_Name(StepMotorDirection value) {
  return ::google::protobuf::internal::NameOfDenseEnum<StepMotorDirection_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool StepMotorDirection_Parse(absl::string_view name, StepMotorDirection* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StepMotorDirection>(
      StepMotorDirection_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class UserList final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:UserList) */ {
 public:
  inline UserList() : UserList(nullptr) {}
  ~UserList() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UserList(
      ::google::protobuf::internal::ConstantInitialized);

  inline UserList(const UserList& from) : UserList(nullptr, from) {}
  inline UserList(UserList&& from) noexcept
      : UserList(nullptr, std::move(from)) {}
  inline UserList& operator=(const UserList& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserList& operator=(UserList&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserList& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserList* internal_default_instance() {
    return reinterpret_cast<const UserList*>(
        &_UserList_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(UserList& a, UserList& b) { a.Swap(&b); }
  inline void Swap(UserList* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserList* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<UserList>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UserList& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UserList& from) { UserList::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UserList* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "UserList"; }

 protected:
  explicit UserList(::google::protobuf::Arena* arena);
  UserList(::google::protobuf::Arena* arena, const UserList& from);
  UserList(::google::protobuf::Arena* arena, UserList&& from) noexcept
      : UserList(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUsernameFieldNumber = 1,
  };
  // repeated string username = 1;
  int username_size() const;
  private:
  int _internal_username_size() const;

  public:
  void clear_username() ;
  const std::string& username(int index) const;
  std::string* mutable_username(int index);
  void set_username(int index, const std::string& value);
  void set_username(int index, std::string&& value);
  void set_username(int index, const char* value);
  void set_username(int index, const char* value, std::size_t size);
  void set_username(int index, absl::string_view value);
  std::string* add_username();
  void add_username(const std::string& value);
  void add_username(std::string&& value);
  void add_username(const char* value);
  void add_username(const char* value, std::size_t size);
  void add_username(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& username() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_username();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_username() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_username();

  public:
  // @@protoc_insertion_point(class_scope:UserList)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      25, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField<std::string> username_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cameractl_2eproto;
};
// -------------------------------------------------------------------

class NvtCodecVencSettings_VencNoneBRC final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:NvtCodecVencSettings.VencNoneBRC) */ {
 public:
  inline NvtCodecVencSettings_VencNoneBRC() : NvtCodecVencSettings_VencNoneBRC(nullptr) {}
  ~NvtCodecVencSettings_VencNoneBRC() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NvtCodecVencSettings_VencNoneBRC(
      ::google::protobuf::internal::ConstantInitialized);

  inline NvtCodecVencSettings_VencNoneBRC(const NvtCodecVencSettings_VencNoneBRC& from) : NvtCodecVencSettings_VencNoneBRC(nullptr, from) {}
  inline NvtCodecVencSettings_VencNoneBRC(NvtCodecVencSettings_VencNoneBRC&& from) noexcept
      : NvtCodecVencSettings_VencNoneBRC(nullptr, std::move(from)) {}
  inline NvtCodecVencSettings_VencNoneBRC& operator=(const NvtCodecVencSettings_VencNoneBRC& from) {
    CopyFrom(from);
    return *this;
  }
  inline NvtCodecVencSettings_VencNoneBRC& operator=(NvtCodecVencSettings_VencNoneBRC&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NvtCodecVencSettings_VencNoneBRC& default_instance() {
    return *internal_default_instance();
  }
  static inline const NvtCodecVencSettings_VencNoneBRC* internal_default_instance() {
    return reinterpret_cast<const NvtCodecVencSettings_VencNoneBRC*>(
        &_NvtCodecVencSettings_VencNoneBRC_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(NvtCodecVencSettings_VencNoneBRC& a, NvtCodecVencSettings_VencNoneBRC& b) { a.Swap(&b); }
  inline void Swap(NvtCodecVencSettings_VencNoneBRC* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NvtCodecVencSettings_VencNoneBRC* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NvtCodecVencSettings_VencNoneBRC* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<NvtCodecVencSettings_VencNoneBRC>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NvtCodecVencSettings_VencNoneBRC& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NvtCodecVencSettings_VencNoneBRC& from) { NvtCodecVencSettings_VencNoneBRC::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NvtCodecVencSettings_VencNoneBRC* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "NvtCodecVencSettings.VencNoneBRC"; }

 protected:
  explicit NvtCodecVencSettings_VencNoneBRC(::google::protobuf::Arena* arena);
  NvtCodecVencSettings_VencNoneBRC(::google::protobuf::Arena* arena, const NvtCodecVencSettings_VencNoneBRC& from);
  NvtCodecVencSettings_VencNoneBRC(::google::protobuf::Arena* arena, NvtCodecVencSettings_VencNoneBRC&& from) noexcept
      : NvtCodecVencSettings_VencNoneBRC(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFrameRateFieldNumber = 1,
    kGopFieldNumber = 2,
    kByterateFieldNumber = 3,
  };
  // uint32 frameRate = 1;
  void clear_framerate() ;
  ::uint32_t framerate() const;
  void set_framerate(::uint32_t value);

  private:
  ::uint32_t _internal_framerate() const;
  void _internal_set_framerate(::uint32_t value);

  public:
  // uint32 gop = 2;
  void clear_gop() ;
  ::uint32_t gop() const;
  void set_gop(::uint32_t value);

  private:
  ::uint32_t _internal_gop() const;
  void _internal_set_gop(::uint32_t value);

  public:
  // uint32 byterate = 3;
  void clear_byterate() ;
  ::uint32_t byterate() const;
  void set_byterate(::uint32_t value);

  private:
  ::uint32_t _internal_byterate() const;
  void _internal_set_byterate(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:NvtCodecVencSettings.VencNoneBRC)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::uint32_t framerate_;
    ::uint32_t gop_;
    ::uint32_t byterate_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cameractl_2eproto;
};
// -------------------------------------------------------------------

class NvtCodecVencSettings_VencFIXQP final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:NvtCodecVencSettings.VencFIXQP) */ {
 public:
  inline NvtCodecVencSettings_VencFIXQP() : NvtCodecVencSettings_VencFIXQP(nullptr) {}
  ~NvtCodecVencSettings_VencFIXQP() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NvtCodecVencSettings_VencFIXQP(
      ::google::protobuf::internal::ConstantInitialized);

  inline NvtCodecVencSettings_VencFIXQP(const NvtCodecVencSettings_VencFIXQP& from) : NvtCodecVencSettings_VencFIXQP(nullptr, from) {}
  inline NvtCodecVencSettings_VencFIXQP(NvtCodecVencSettings_VencFIXQP&& from) noexcept
      : NvtCodecVencSettings_VencFIXQP(nullptr, std::move(from)) {}
  inline NvtCodecVencSettings_VencFIXQP& operator=(const NvtCodecVencSettings_VencFIXQP& from) {
    CopyFrom(from);
    return *this;
  }
  inline NvtCodecVencSettings_VencFIXQP& operator=(NvtCodecVencSettings_VencFIXQP&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NvtCodecVencSettings_VencFIXQP& default_instance() {
    return *internal_default_instance();
  }
  static inline const NvtCodecVencSettings_VencFIXQP* internal_default_instance() {
    return reinterpret_cast<const NvtCodecVencSettings_VencFIXQP*>(
        &_NvtCodecVencSettings_VencFIXQP_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(NvtCodecVencSettings_VencFIXQP& a, NvtCodecVencSettings_VencFIXQP& b) { a.Swap(&b); }
  inline void Swap(NvtCodecVencSettings_VencFIXQP* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NvtCodecVencSettings_VencFIXQP* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NvtCodecVencSettings_VencFIXQP* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<NvtCodecVencSettings_VencFIXQP>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NvtCodecVencSettings_VencFIXQP& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NvtCodecVencSettings_VencFIXQP& from) { NvtCodecVencSettings_VencFIXQP::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NvtCodecVencSettings_VencFIXQP* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "NvtCodecVencSettings.VencFIXQP"; }

 protected:
  explicit NvtCodecVencSettings_VencFIXQP(::google::protobuf::Arena* arena);
  NvtCodecVencSettings_VencFIXQP(::google::protobuf::Arena* arena, const NvtCodecVencSettings_VencFIXQP& from);
  NvtCodecVencSettings_VencFIXQP(::google::protobuf::Arena* arena, NvtCodecVencSettings_VencFIXQP&& from) noexcept
      : NvtCodecVencSettings_VencFIXQP(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kByterateFieldNumber = 1,
    kFramerateFieldNumber = 2,
    kGopFieldNumber = 3,
    kIFixQPFieldNumber = 4,
    kPFixQPFieldNumber = 5,
  };
  // uint32 byterate = 1;
  void clear_byterate() ;
  ::uint32_t byterate() const;
  void set_byterate(::uint32_t value);

  private:
  ::uint32_t _internal_byterate() const;
  void _internal_set_byterate(::uint32_t value);

  public:
  // uint32 framerate = 2;
  void clear_framerate() ;
  ::uint32_t framerate() const;
  void set_framerate(::uint32_t value);

  private:
  ::uint32_t _internal_framerate() const;
  void _internal_set_framerate(::uint32_t value);

  public:
  // uint32 gop = 3;
  void clear_gop() ;
  ::uint32_t gop() const;
  void set_gop(::uint32_t value);

  private:
  ::uint32_t _internal_gop() const;
  void _internal_set_gop(::uint32_t value);

  public:
  // uint32 IFixQP = 4;
  void clear_ifixqp() ;
  ::uint32_t ifixqp() const;
  void set_ifixqp(::uint32_t value);

  private:
  ::uint32_t _internal_ifixqp() const;
  void _internal_set_ifixqp(::uint32_t value);

  public:
  // uint32 PFixQP = 5;
  void clear_pfixqp() ;
  ::uint32_t pfixqp() const;
  void set_pfixqp(::uint32_t value);

  private:
  ::uint32_t _internal_pfixqp() const;
  void _internal_set_pfixqp(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:NvtCodecVencSettings.VencFIXQP)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::uint32_t byterate_;
    ::uint32_t framerate_;
    ::uint32_t gop_;
    ::uint32_t ifixqp_;
    ::uint32_t pfixqp_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cameractl_2eproto;
};
// -------------------------------------------------------------------

class NvtCodecVencSettings_VencCBR_RowRcSettings final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:NvtCodecVencSettings.VencCBR.RowRcSettings) */ {
 public:
  inline NvtCodecVencSettings_VencCBR_RowRcSettings() : NvtCodecVencSettings_VencCBR_RowRcSettings(nullptr) {}
  ~NvtCodecVencSettings_VencCBR_RowRcSettings() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NvtCodecVencSettings_VencCBR_RowRcSettings(
      ::google::protobuf::internal::ConstantInitialized);

  inline NvtCodecVencSettings_VencCBR_RowRcSettings(const NvtCodecVencSettings_VencCBR_RowRcSettings& from) : NvtCodecVencSettings_VencCBR_RowRcSettings(nullptr, from) {}
  inline NvtCodecVencSettings_VencCBR_RowRcSettings(NvtCodecVencSettings_VencCBR_RowRcSettings&& from) noexcept
      : NvtCodecVencSettings_VencCBR_RowRcSettings(nullptr, std::move(from)) {}
  inline NvtCodecVencSettings_VencCBR_RowRcSettings& operator=(const NvtCodecVencSettings_VencCBR_RowRcSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline NvtCodecVencSettings_VencCBR_RowRcSettings& operator=(NvtCodecVencSettings_VencCBR_RowRcSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NvtCodecVencSettings_VencCBR_RowRcSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const NvtCodecVencSettings_VencCBR_RowRcSettings* internal_default_instance() {
    return reinterpret_cast<const NvtCodecVencSettings_VencCBR_RowRcSettings*>(
        &_NvtCodecVencSettings_VencCBR_RowRcSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(NvtCodecVencSettings_VencCBR_RowRcSettings& a, NvtCodecVencSettings_VencCBR_RowRcSettings& b) { a.Swap(&b); }
  inline void Swap(NvtCodecVencSettings_VencCBR_RowRcSettings* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NvtCodecVencSettings_VencCBR_RowRcSettings* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NvtCodecVencSettings_VencCBR_RowRcSettings* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<NvtCodecVencSettings_VencCBR_RowRcSettings>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NvtCodecVencSettings_VencCBR_RowRcSettings& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NvtCodecVencSettings_VencCBR_RowRcSettings& from) { NvtCodecVencSettings_VencCBR_RowRcSettings::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NvtCodecVencSettings_VencCBR_RowRcSettings* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "NvtCodecVencSettings.VencCBR.RowRcSettings"; }

 protected:
  explicit NvtCodecVencSettings_VencCBR_RowRcSettings(::google::protobuf::Arena* arena);
  NvtCodecVencSettings_VencCBR_RowRcSettings(::google::protobuf::Arena* arena, const NvtCodecVencSettings_VencCBR_RowRcSettings& from);
  NvtCodecVencSettings_VencCBR_RowRcSettings(::google::protobuf::Arena* arena, NvtCodecVencSettings_VencCBR_RowRcSettings&& from) noexcept
      : NvtCodecVencSettings_VencCBR_RowRcSettings(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kQpRangeFieldNumber = 1,
    kQpStepFieldNumber = 2,
  };
  // uint32 QpRange = 1;
  void clear_qprange() ;
  ::uint32_t qprange() const;
  void set_qprange(::uint32_t value);

  private:
  ::uint32_t _internal_qprange() const;
  void _internal_set_qprange(::uint32_t value);

  public:
  // uint32 QpStep = 2;
  void clear_qpstep() ;
  ::uint32_t qpstep() const;
  void set_qpstep(::uint32_t value);

  private:
  ::uint32_t _internal_qpstep() const;
  void _internal_set_qpstep(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:NvtCodecVencSettings.VencCBR.RowRcSettings)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::uint32_t qprange_;
    ::uint32_t qpstep_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cameractl_2eproto;
};
// -------------------------------------------------------------------

class NvtCodecVencSettings_VencCBR_PQp final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:NvtCodecVencSettings.VencCBR.PQp) */ {
 public:
  inline NvtCodecVencSettings_VencCBR_PQp() : NvtCodecVencSettings_VencCBR_PQp(nullptr) {}
  ~NvtCodecVencSettings_VencCBR_PQp() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NvtCodecVencSettings_VencCBR_PQp(
      ::google::protobuf::internal::ConstantInitialized);

  inline NvtCodecVencSettings_VencCBR_PQp(const NvtCodecVencSettings_VencCBR_PQp& from) : NvtCodecVencSettings_VencCBR_PQp(nullptr, from) {}
  inline NvtCodecVencSettings_VencCBR_PQp(NvtCodecVencSettings_VencCBR_PQp&& from) noexcept
      : NvtCodecVencSettings_VencCBR_PQp(nullptr, std::move(from)) {}
  inline NvtCodecVencSettings_VencCBR_PQp& operator=(const NvtCodecVencSettings_VencCBR_PQp& from) {
    CopyFrom(from);
    return *this;
  }
  inline NvtCodecVencSettings_VencCBR_PQp& operator=(NvtCodecVencSettings_VencCBR_PQp&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NvtCodecVencSettings_VencCBR_PQp& default_instance() {
    return *internal_default_instance();
  }
  static inline const NvtCodecVencSettings_VencCBR_PQp* internal_default_instance() {
    return reinterpret_cast<const NvtCodecVencSettings_VencCBR_PQp*>(
        &_NvtCodecVencSettings_VencCBR_PQp_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(NvtCodecVencSettings_VencCBR_PQp& a, NvtCodecVencSettings_VencCBR_PQp& b) { a.Swap(&b); }
  inline void Swap(NvtCodecVencSettings_VencCBR_PQp* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NvtCodecVencSettings_VencCBR_PQp* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NvtCodecVencSettings_VencCBR_PQp* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<NvtCodecVencSettings_VencCBR_PQp>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NvtCodecVencSettings_VencCBR_PQp& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NvtCodecVencSettings_VencCBR_PQp& from) { NvtCodecVencSettings_VencCBR_PQp::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NvtCodecVencSettings_VencCBR_PQp* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "NvtCodecVencSettings.VencCBR.PQp"; }

 protected:
  explicit NvtCodecVencSettings_VencCBR_PQp(::google::protobuf::Arena* arena);
  NvtCodecVencSettings_VencCBR_PQp(::google::protobuf::Arena* arena, const NvtCodecVencSettings_VencCBR_PQp& from);
  NvtCodecVencSettings_VencCBR_PQp(::google::protobuf::Arena* arena, NvtCodecVencSettings_VencCBR_PQp&& from) noexcept
      : NvtCodecVencSettings_VencCBR_PQp(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kInitFieldNumber = 1,
    kMinFieldNumber = 2,
    kMaxFieldNumber = 3,
  };
  // uint32 init = 1;
  void clear_init() ;
  ::uint32_t init() const;
  void set_init(::uint32_t value);

  private:
  ::uint32_t _internal_init() const;
  void _internal_set_init(::uint32_t value);

  public:
  // uint32 min = 2;
  void clear_min() ;
  ::uint32_t min() const;
  void set_min(::uint32_t value);

  private:
  ::uint32_t _internal_min() const;
  void _internal_set_min(::uint32_t value);

  public:
  // uint32 max = 3;
  void clear_max() ;
  ::uint32_t max() const;
  void set_max(::uint32_t value);

  private:
  ::uint32_t _internal_max() const;
  void _internal_set_max(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:NvtCodecVencSettings.VencCBR.PQp)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::uint32_t init_;
    ::uint32_t min_;
    ::uint32_t max_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cameractl_2eproto;
};
// -------------------------------------------------------------------

class NvtCodecVencSettings_VencCBR_IQp final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:NvtCodecVencSettings.VencCBR.IQp) */ {
 public:
  inline NvtCodecVencSettings_VencCBR_IQp() : NvtCodecVencSettings_VencCBR_IQp(nullptr) {}
  ~NvtCodecVencSettings_VencCBR_IQp() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NvtCodecVencSettings_VencCBR_IQp(
      ::google::protobuf::internal::ConstantInitialized);

  inline NvtCodecVencSettings_VencCBR_IQp(const NvtCodecVencSettings_VencCBR_IQp& from) : NvtCodecVencSettings_VencCBR_IQp(nullptr, from) {}
  inline NvtCodecVencSettings_VencCBR_IQp(NvtCodecVencSettings_VencCBR_IQp&& from) noexcept
      : NvtCodecVencSettings_VencCBR_IQp(nullptr, std::move(from)) {}
  inline NvtCodecVencSettings_VencCBR_IQp& operator=(const NvtCodecVencSettings_VencCBR_IQp& from) {
    CopyFrom(from);
    return *this;
  }
  inline NvtCodecVencSettings_VencCBR_IQp& operator=(NvtCodecVencSettings_VencCBR_IQp&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NvtCodecVencSettings_VencCBR_IQp& default_instance() {
    return *internal_default_instance();
  }
  static inline const NvtCodecVencSettings_VencCBR_IQp* internal_default_instance() {
    return reinterpret_cast<const NvtCodecVencSettings_VencCBR_IQp*>(
        &_NvtCodecVencSettings_VencCBR_IQp_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(NvtCodecVencSettings_VencCBR_IQp& a, NvtCodecVencSettings_VencCBR_IQp& b) { a.Swap(&b); }
  inline void Swap(NvtCodecVencSettings_VencCBR_IQp* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NvtCodecVencSettings_VencCBR_IQp* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NvtCodecVencSettings_VencCBR_IQp* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<NvtCodecVencSettings_VencCBR_IQp>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NvtCodecVencSettings_VencCBR_IQp& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NvtCodecVencSettings_VencCBR_IQp& from) { NvtCodecVencSettings_VencCBR_IQp::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NvtCodecVencSettings_VencCBR_IQp* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "NvtCodecVencSettings.VencCBR.IQp"; }

 protected:
  explicit NvtCodecVencSettings_VencCBR_IQp(::google::protobuf::Arena* arena);
  NvtCodecVencSettings_VencCBR_IQp(::google::protobuf::Arena* arena, const NvtCodecVencSettings_VencCBR_IQp& from);
  NvtCodecVencSettings_VencCBR_IQp(::google::protobuf::Arena* arena, NvtCodecVencSettings_VencCBR_IQp&& from) noexcept
      : NvtCodecVencSettings_VencCBR_IQp(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kInitFieldNumber = 1,
    kMinFieldNumber = 2,
    kMaxFieldNumber = 3,
  };
  // uint32 init = 1;
  void clear_init() ;
  ::uint32_t init() const;
  void set_init(::uint32_t value);

  private:
  ::uint32_t _internal_init() const;
  void _internal_set_init(::uint32_t value);

  public:
  // uint32 min = 2;
  void clear_min() ;
  ::uint32_t min() const;
  void set_min(::uint32_t value);

  private:
  ::uint32_t _internal_min() const;
  void _internal_set_min(::uint32_t value);

  public:
  // uint32 max = 3;
  void clear_max() ;
  ::uint32_t max() const;
  void set_max(::uint32_t value);

  private:
  ::uint32_t _internal_max() const;
  void _internal_set_max(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:NvtCodecVencSettings.VencCBR.IQp)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::uint32_t init_;
    ::uint32_t min_;
    ::uint32_t max_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cameractl_2eproto;
};
// -------------------------------------------------------------------

class NvtCodecVencSettings_LTRSettings final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:NvtCodecVencSettings.LTRSettings) */ {
 public:
  inline NvtCodecVencSettings_LTRSettings() : NvtCodecVencSettings_LTRSettings(nullptr) {}
  ~NvtCodecVencSettings_LTRSettings() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NvtCodecVencSettings_LTRSettings(
      ::google::protobuf::internal::ConstantInitialized);

  inline NvtCodecVencSettings_LTRSettings(const NvtCodecVencSettings_LTRSettings& from) : NvtCodecVencSettings_LTRSettings(nullptr, from) {}
  inline NvtCodecVencSettings_LTRSettings(NvtCodecVencSettings_LTRSettings&& from) noexcept
      : NvtCodecVencSettings_LTRSettings(nullptr, std::move(from)) {}
  inline NvtCodecVencSettings_LTRSettings& operator=(const NvtCodecVencSettings_LTRSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline NvtCodecVencSettings_LTRSettings& operator=(NvtCodecVencSettings_LTRSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NvtCodecVencSettings_LTRSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const NvtCodecVencSettings_LTRSettings* internal_default_instance() {
    return reinterpret_cast<const NvtCodecVencSettings_LTRSettings*>(
        &_NvtCodecVencSettings_LTRSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(NvtCodecVencSettings_LTRSettings& a, NvtCodecVencSettings_LTRSettings& b) { a.Swap(&b); }
  inline void Swap(NvtCodecVencSettings_LTRSettings* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NvtCodecVencSettings_LTRSettings* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NvtCodecVencSettings_LTRSettings* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<NvtCodecVencSettings_LTRSettings>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NvtCodecVencSettings_LTRSettings& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NvtCodecVencSettings_LTRSettings& from) { NvtCodecVencSettings_LTRSettings::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NvtCodecVencSettings_LTRSettings* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "NvtCodecVencSettings.LTRSettings"; }

 protected:
  explicit NvtCodecVencSettings_LTRSettings(::google::protobuf::Arena* arena);
  NvtCodecVencSettings_LTRSettings(::google::protobuf::Arena* arena, const NvtCodecVencSettings_LTRSettings& from);
  NvtCodecVencSettings_LTRSettings(::google::protobuf::Arena* arena, NvtCodecVencSettings_LTRSettings&& from) noexcept
      : NvtCodecVencSettings_LTRSettings(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIntervalFieldNumber = 1,
    kPreRefFieldNumber = 2,
  };
  // uint32 interval = 1;
  void clear_interval() ;
  ::uint32_t interval() const;
  void set_interval(::uint32_t value);

  private:
  ::uint32_t _internal_interval() const;
  void _internal_set_interval(::uint32_t value);

  public:
  // uint32 preRef = 2;
  void clear_preref() ;
  ::uint32_t preref() const;
  void set_preref(::uint32_t value);

  private:
  ::uint32_t _internal_preref() const;
  void _internal_set_preref(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:NvtCodecVencSettings.LTRSettings)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::uint32_t interval_;
    ::uint32_t preref_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cameractl_2eproto;
};
// -------------------------------------------------------------------

class NvtCodecVencSettings_AQSettings final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:NvtCodecVencSettings.AQSettings) */ {
 public:
  inline NvtCodecVencSettings_AQSettings() : NvtCodecVencSettings_AQSettings(nullptr) {}
  ~NvtCodecVencSettings_AQSettings() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NvtCodecVencSettings_AQSettings(
      ::google::protobuf::internal::ConstantInitialized);

  inline NvtCodecVencSettings_AQSettings(const NvtCodecVencSettings_AQSettings& from) : NvtCodecVencSettings_AQSettings(nullptr, from) {}
  inline NvtCodecVencSettings_AQSettings(NvtCodecVencSettings_AQSettings&& from) noexcept
      : NvtCodecVencSettings_AQSettings(nullptr, std::move(from)) {}
  inline NvtCodecVencSettings_AQSettings& operator=(const NvtCodecVencSettings_AQSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline NvtCodecVencSettings_AQSettings& operator=(NvtCodecVencSettings_AQSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NvtCodecVencSettings_AQSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const NvtCodecVencSettings_AQSettings* internal_default_instance() {
    return reinterpret_cast<const NvtCodecVencSettings_AQSettings*>(
        &_NvtCodecVencSettings_AQSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(NvtCodecVencSettings_AQSettings& a, NvtCodecVencSettings_AQSettings& b) { a.Swap(&b); }
  inline void Swap(NvtCodecVencSettings_AQSettings* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NvtCodecVencSettings_AQSettings* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NvtCodecVencSettings_AQSettings* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<NvtCodecVencSettings_AQSettings>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NvtCodecVencSettings_AQSettings& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NvtCodecVencSettings_AQSettings& from) { NvtCodecVencSettings_AQSettings::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NvtCodecVencSettings_AQSettings* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "NvtCodecVencSettings.AQSettings"; }

 protected:
  explicit NvtCodecVencSettings_AQSettings(::google::protobuf::Arena* arena);
  NvtCodecVencSettings_AQSettings(::google::protobuf::Arena* arena, const NvtCodecVencSettings_AQSettings& from);
  NvtCodecVencSettings_AQSettings(::google::protobuf::Arena* arena, NvtCodecVencSettings_AQSettings&& from) noexcept
      : NvtCodecVencSettings_AQSettings(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAqStrFieldNumber = 1,
    kSraqInitAslog2FieldNumber = 2,
    kMaxSraqFieldNumber = 3,
    kMinSraqFieldNumber = 4,
    kSraqConstAslog2FieldNumber = 5,
  };
  // uint32 aqStr = 1;
  void clear_aqstr() ;
  ::uint32_t aqstr() const;
  void set_aqstr(::uint32_t value);

  private:
  ::uint32_t _internal_aqstr() const;
  void _internal_set_aqstr(::uint32_t value);

  public:
  // int32 sraqInitAslog2 = 2;
  void clear_sraqinitaslog2() ;
  ::int32_t sraqinitaslog2() const;
  void set_sraqinitaslog2(::int32_t value);

  private:
  ::int32_t _internal_sraqinitaslog2() const;
  void _internal_set_sraqinitaslog2(::int32_t value);

  public:
  // int32 maxSraq = 3;
  void clear_maxsraq() ;
  ::int32_t maxsraq() const;
  void set_maxsraq(::int32_t value);

  private:
  ::int32_t _internal_maxsraq() const;
  void _internal_set_maxsraq(::int32_t value);

  public:
  // int32 minSraq = 4;
  void clear_minsraq() ;
  ::int32_t minsraq() const;
  void set_minsraq(::int32_t value);

  private:
  ::int32_t _internal_minsraq() const;
  void _internal_set_minsraq(::int32_t value);

  public:
  // int32 sraqConstAslog2 = 5;
  void clear_sraqconstaslog2() ;
  ::int32_t sraqconstaslog2() const;
  void set_sraqconstaslog2(::int32_t value);

  private:
  ::int32_t _internal_sraqconstaslog2() const;
  void _internal_set_sraqconstaslog2(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:NvtCodecVencSettings.AQSettings)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::uint32_t aqstr_;
    ::int32_t sraqinitaslog2_;
    ::int32_t maxsraq_;
    ::int32_t minsraq_;
    ::int32_t sraqconstaslog2_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cameractl_2eproto;
};
// -------------------------------------------------------------------

class NewUserData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:NewUserData) */ {
 public:
  inline NewUserData() : NewUserData(nullptr) {}
  ~NewUserData() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NewUserData(
      ::google::protobuf::internal::ConstantInitialized);

  inline NewUserData(const NewUserData& from) : NewUserData(nullptr, from) {}
  inline NewUserData(NewUserData&& from) noexcept
      : NewUserData(nullptr, std::move(from)) {}
  inline NewUserData& operator=(const NewUserData& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewUserData& operator=(NewUserData&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NewUserData& default_instance() {
    return *internal_default_instance();
  }
  static inline const NewUserData* internal_default_instance() {
    return reinterpret_cast<const NewUserData*>(
        &_NewUserData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(NewUserData& a, NewUserData& b) { a.Swap(&b); }
  inline void Swap(NewUserData* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewUserData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NewUserData* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<NewUserData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NewUserData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NewUserData& from) { NewUserData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NewUserData* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "NewUserData"; }

 protected:
  explicit NewUserData(::google::protobuf::Arena* arena);
  NewUserData(::google::protobuf::Arena* arena, const NewUserData& from);
  NewUserData(::google::protobuf::Arena* arena, NewUserData&& from) noexcept
      : NewUserData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUsernameFieldNumber = 2,
    kPasswordFieldNumber = 3,
    kExistsFieldNumber = 1,
  };
  // string username = 2;
  void clear_username() ;
  const std::string& username() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_username(Arg_&& arg, Args_... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* value);

  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(
      const std::string& value);
  std::string* _internal_mutable_username();

  public:
  // optional string password = 3;
  bool has_password() const;
  void clear_password() ;
  const std::string& password() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_password(Arg_&& arg, Args_... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* value);

  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(
      const std::string& value);
  std::string* _internal_mutable_password();

  public:
  // bool exists = 1;
  void clear_exists() ;
  bool exists() const;
  void set_exists(bool value);

  private:
  bool _internal_exists() const;
  void _internal_set_exists(bool value);

  public:
  // @@protoc_insertion_point(class_scope:NewUserData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      36, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr username_;
    ::google::protobuf::internal::ArenaStringPtr password_;
    bool exists_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cameractl_2eproto;
};
// -------------------------------------------------------------------

class ModeSwitchParams final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ModeSwitchParams) */ {
 public:
  inline ModeSwitchParams() : ModeSwitchParams(nullptr) {}
  ~ModeSwitchParams() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ModeSwitchParams(
      ::google::protobuf::internal::ConstantInitialized);

  inline ModeSwitchParams(const ModeSwitchParams& from) : ModeSwitchParams(nullptr, from) {}
  inline ModeSwitchParams(ModeSwitchParams&& from) noexcept
      : ModeSwitchParams(nullptr, std::move(from)) {}
  inline ModeSwitchParams& operator=(const ModeSwitchParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModeSwitchParams& operator=(ModeSwitchParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModeSwitchParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModeSwitchParams* internal_default_instance() {
    return reinterpret_cast<const ModeSwitchParams*>(
        &_ModeSwitchParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;
  friend void swap(ModeSwitchParams& a, ModeSwitchParams& b) { a.Swap(&b); }
  inline void Swap(ModeSwitchParams* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModeSwitchParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModeSwitchParams* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ModeSwitchParams>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ModeSwitchParams& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ModeSwitchParams& from) { ModeSwitchParams::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ModeSwitchParams* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "ModeSwitchParams"; }

 protected:
  explicit ModeSwitchParams(::google::protobuf::Arena* arena);
  ModeSwitchParams(::google::protobuf::Arena* arena, const ModeSwitchParams& from);
  ModeSwitchParams(::google::protobuf::Arena* arena, ModeSwitchParams&& from) noexcept
      : ModeSwitchParams(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------
  using MSMode = ModeSwitchParams_MSMode;
  static constexpr MSMode MS_UNKNOWN = ModeSwitchParams_MSMode_MS_UNKNOWN;
  static constexpr MSMode MS_AUTO = ModeSwitchParams_MSMode_MS_AUTO;
  static constexpr MSMode MS_DAY = ModeSwitchParams_MSMode_MS_DAY;
  static constexpr MSMode MS_NIGHT = ModeSwitchParams_MSMode_MS_NIGHT;
  static inline bool MSMode_IsValid(int value) {
    return ModeSwitchParams_MSMode_IsValid(value);
  }
  static constexpr MSMode MSMode_MIN = ModeSwitchParams_MSMode_MSMode_MIN;
  static constexpr MSMode MSMode_MAX = ModeSwitchParams_MSMode_MSMode_MAX;
  static constexpr int MSMode_ARRAYSIZE = ModeSwitchParams_MSMode_MSMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* MSMode_descriptor() {
    return ModeSwitchParams_MSMode_descriptor();
  }
  template <typename T>
  static inline const std::string& MSMode_Name(T value) {
    return ModeSwitchParams_MSMode_Name(value);
  }
  static inline bool MSMode_Parse(absl::string_view name, MSMode* value) {
    return ModeSwitchParams_MSMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kIrEnableFieldNumber = 1,
    kModeFieldNumber = 2,
  };
  // optional bool irEnable = 1;
  bool has_irenable() const;
  void clear_irenable() ;
  bool irenable() const;
  void set_irenable(bool value);

  private:
  bool _internal_irenable() const;
  void _internal_set_irenable(bool value);

  public:
  // optional .ModeSwitchParams.MSMode mode = 2;
  bool has_mode() const;
  void clear_mode() ;
  ::ModeSwitchParams_MSMode mode() const;
  void set_mode(::ModeSwitchParams_MSMode value);

  private:
  ::ModeSwitchParams_MSMode _internal_mode() const;
  void _internal_set_mode(::ModeSwitchParams_MSMode value);

  public:
  // @@protoc_insertion_point(class_scope:ModeSwitchParams)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    bool irenable_;
    int mode_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cameractl_2eproto;
};
// -------------------------------------------------------------------

class ISPSettings final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ISPSettings) */ {
 public:
  inline ISPSettings() : ISPSettings(nullptr) {}
  ~ISPSettings() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ISPSettings(
      ::google::protobuf::internal::ConstantInitialized);

  inline ISPSettings(const ISPSettings& from) : ISPSettings(nullptr, from) {}
  inline ISPSettings(ISPSettings&& from) noexcept
      : ISPSettings(nullptr, std::move(from)) {}
  inline ISPSettings& operator=(const ISPSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline ISPSettings& operator=(ISPSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ISPSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const ISPSettings* internal_default_instance() {
    return reinterpret_cast<const ISPSettings*>(
        &_ISPSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(ISPSettings& a, ISPSettings& b) { a.Swap(&b); }
  inline void Swap(ISPSettings* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ISPSettings* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ISPSettings* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ISPSettings>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ISPSettings& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ISPSettings& from) { ISPSettings::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ISPSettings* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "ISPSettings"; }

 protected:
  explicit ISPSettings(::google::protobuf::Arena* arena);
  ISPSettings(::google::protobuf::Arena* arena, const ISPSettings& from);
  ISPSettings(::google::protobuf::Arena* arena, ISPSettings&& from) noexcept
      : ISPSettings(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------
  using ISPPreset = ISPSettings_ISPPreset;
  static constexpr ISPPreset PRESET_UNKNOWN = ISPSettings_ISPPreset_PRESET_UNKNOWN;
  static constexpr ISPPreset PRESET_DAY = ISPSettings_ISPPreset_PRESET_DAY;
  static constexpr ISPPreset PRESET_NIGHT = ISPSettings_ISPPreset_PRESET_NIGHT;
  static constexpr ISPPreset PRESET_NIGHT_IR = ISPSettings_ISPPreset_PRESET_NIGHT_IR;
  static inline bool ISPPreset_IsValid(int value) {
    return ISPSettings_ISPPreset_IsValid(value);
  }
  static constexpr ISPPreset ISPPreset_MIN = ISPSettings_ISPPreset_ISPPreset_MIN;
  static constexpr ISPPreset ISPPreset_MAX = ISPSettings_ISPPreset_ISPPreset_MAX;
  static constexpr int ISPPreset_ARRAYSIZE = ISPSettings_ISPPreset_ISPPreset_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* ISPPreset_descriptor() {
    return ISPSettings_ISPPreset_descriptor();
  }
  template <typename T>
  static inline const std::string& ISPPreset_Name(T value) {
    return ISPSettings_ISPPreset_Name(value);
  }
  static inline bool ISPPreset_Parse(absl::string_view name, ISPPreset* value) {
    return ISPSettings_ISPPreset_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kSelectedPresetFieldNumber = 1,
    kNightModeFieldNumber = 2,
    kBrightnessFieldNumber = 3,
    kSaturationFieldNumber = 4,
    kHueFieldNumber = 5,
    kContrastFieldNumber = 6,
    kNrLevelFieldNumber = 7,
    kEeLevelFieldNumber = 8,
    kTnrLevelFieldNumber = 9,
  };
  // optional .ISPSettings.ISPPreset selectedPreset = 1;
  bool has_selectedpreset() const;
  void clear_selectedpreset() ;
  ::ISPSettings_ISPPreset selectedpreset() const;
  void set_selectedpreset(::ISPSettings_ISPPreset value);

  private:
  ::ISPSettings_ISPPreset _internal_selectedpreset() const;
  void _internal_set_selectedpreset(::ISPSettings_ISPPreset value);

  public:
  // optional bool nightMode = 2;
  bool has_nightmode() const;
  void clear_nightmode() ;
  bool nightmode() const;
  void set_nightmode(bool value);

  private:
  bool _internal_nightmode() const;
  void _internal_set_nightmode(bool value);

  public:
  // optional int32 brightness = 3;
  bool has_brightness() const;
  void clear_brightness() ;
  ::int32_t brightness() const;
  void set_brightness(::int32_t value);

  private:
  ::int32_t _internal_brightness() const;
  void _internal_set_brightness(::int32_t value);

  public:
  // optional int32 saturation = 4;
  bool has_saturation() const;
  void clear_saturation() ;
  ::int32_t saturation() const;
  void set_saturation(::int32_t value);

  private:
  ::int32_t _internal_saturation() const;
  void _internal_set_saturation(::int32_t value);

  public:
  // optional int32 hue = 5;
  bool has_hue() const;
  void clear_hue() ;
  ::int32_t hue() const;
  void set_hue(::int32_t value);

  private:
  ::int32_t _internal_hue() const;
  void _internal_set_hue(::int32_t value);

  public:
  // optional int32 contrast = 6;
  bool has_contrast() const;
  void clear_contrast() ;
  ::int32_t contrast() const;
  void set_contrast(::int32_t value);

  private:
  ::int32_t _internal_contrast() const;
  void _internal_set_contrast(::int32_t value);

  public:
  // optional int32 nrLevel = 7;
  bool has_nrlevel() const;
  void clear_nrlevel() ;
  ::int32_t nrlevel() const;
  void set_nrlevel(::int32_t value);

  private:
  ::int32_t _internal_nrlevel() const;
  void _internal_set_nrlevel(::int32_t value);

  public:
  // optional int32 eeLevel = 8;
  bool has_eelevel() const;
  void clear_eelevel() ;
  ::int32_t eelevel() const;
  void set_eelevel(::int32_t value);

  private:
  ::int32_t _internal_eelevel() const;
  void _internal_set_eelevel(::int32_t value);

  public:
  // optional int32 tnrLevel = 9;
  bool has_tnrlevel() const;
  void clear_tnrlevel() ;
  ::int32_t tnrlevel() const;
  void set_tnrlevel(::int32_t value);

  private:
  ::int32_t _internal_tnrlevel() const;
  void _internal_set_tnrlevel(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ISPSettings)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    int selectedpreset_;
    bool nightmode_;
    ::int32_t brightness_;
    ::int32_t saturation_;
    ::int32_t hue_;
    ::int32_t contrast_;
    ::int32_t nrlevel_;
    ::int32_t eelevel_;
    ::int32_t tnrlevel_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cameractl_2eproto;
};
// -------------------------------------------------------------------

class CamCtlRequest_motorMoveRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:CamCtlRequest.motorMoveRequest) */ {
 public:
  inline CamCtlRequest_motorMoveRequest() : CamCtlRequest_motorMoveRequest(nullptr) {}
  ~CamCtlRequest_motorMoveRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CamCtlRequest_motorMoveRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline CamCtlRequest_motorMoveRequest(const CamCtlRequest_motorMoveRequest& from) : CamCtlRequest_motorMoveRequest(nullptr, from) {}
  inline CamCtlRequest_motorMoveRequest(CamCtlRequest_motorMoveRequest&& from) noexcept
      : CamCtlRequest_motorMoveRequest(nullptr, std::move(from)) {}
  inline CamCtlRequest_motorMoveRequest& operator=(const CamCtlRequest_motorMoveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CamCtlRequest_motorMoveRequest& operator=(CamCtlRequest_motorMoveRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CamCtlRequest_motorMoveRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CamCtlRequest_motorMoveRequest* internal_default_instance() {
    return reinterpret_cast<const CamCtlRequest_motorMoveRequest*>(
        &_CamCtlRequest_motorMoveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 16;
  friend void swap(CamCtlRequest_motorMoveRequest& a, CamCtlRequest_motorMoveRequest& b) { a.Swap(&b); }
  inline void Swap(CamCtlRequest_motorMoveRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CamCtlRequest_motorMoveRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CamCtlRequest_motorMoveRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<CamCtlRequest_motorMoveRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CamCtlRequest_motorMoveRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CamCtlRequest_motorMoveRequest& from) { CamCtlRequest_motorMoveRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CamCtlRequest_motorMoveRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "CamCtlRequest.motorMoveRequest"; }

 protected:
  explicit CamCtlRequest_motorMoveRequest(::google::protobuf::Arena* arena);
  CamCtlRequest_motorMoveRequest(::google::protobuf::Arena* arena, const CamCtlRequest_motorMoveRequest& from);
  CamCtlRequest_motorMoveRequest(::google::protobuf::Arena* arena, CamCtlRequest_motorMoveRequest&& from) noexcept
      : CamCtlRequest_motorMoveRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMotorFieldNumber = 1,
    kDirFieldNumber = 2,
    kStepsFieldNumber = 3,
  };
  // .StepMotorType motor = 1;
  void clear_motor() ;
  ::StepMotorType motor() const;
  void set_motor(::StepMotorType value);

  private:
  ::StepMotorType _internal_motor() const;
  void _internal_set_motor(::StepMotorType value);

  public:
  // .StepMotorDirection dir = 2;
  void clear_dir() ;
  ::StepMotorDirection dir() const;
  void set_dir(::StepMotorDirection value);

  private:
  ::StepMotorDirection _internal_dir() const;
  void _internal_set_dir(::StepMotorDirection value);

  public:
  // uint32 steps = 3;
  void clear_steps() ;
  ::uint32_t steps() const;
  void set_steps(::uint32_t value);

  private:
  ::uint32_t _internal_steps() const;
  void _internal_set_steps(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:CamCtlRequest.motorMoveRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    int motor_;
    int dir_;
    ::uint32_t steps_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cameractl_2eproto;
};
// -------------------------------------------------------------------

class NvtCodecVencSettings_VencCBR final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:NvtCodecVencSettings.VencCBR) */ {
 public:
  inline NvtCodecVencSettings_VencCBR() : NvtCodecVencSettings_VencCBR(nullptr) {}
  ~NvtCodecVencSettings_VencCBR() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NvtCodecVencSettings_VencCBR(
      ::google::protobuf::internal::ConstantInitialized);

  inline NvtCodecVencSettings_VencCBR(const NvtCodecVencSettings_VencCBR& from) : NvtCodecVencSettings_VencCBR(nullptr, from) {}
  inline NvtCodecVencSettings_VencCBR(NvtCodecVencSettings_VencCBR&& from) noexcept
      : NvtCodecVencSettings_VencCBR(nullptr, std::move(from)) {}
  inline NvtCodecVencSettings_VencCBR& operator=(const NvtCodecVencSettings_VencCBR& from) {
    CopyFrom(from);
    return *this;
  }
  inline NvtCodecVencSettings_VencCBR& operator=(NvtCodecVencSettings_VencCBR&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NvtCodecVencSettings_VencCBR& default_instance() {
    return *internal_default_instance();
  }
  static inline const NvtCodecVencSettings_VencCBR* internal_default_instance() {
    return reinterpret_cast<const NvtCodecVencSettings_VencCBR*>(
        &_NvtCodecVencSettings_VencCBR_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(NvtCodecVencSettings_VencCBR& a, NvtCodecVencSettings_VencCBR& b) { a.Swap(&b); }
  inline void Swap(NvtCodecVencSettings_VencCBR* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NvtCodecVencSettings_VencCBR* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NvtCodecVencSettings_VencCBR* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<NvtCodecVencSettings_VencCBR>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NvtCodecVencSettings_VencCBR& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NvtCodecVencSettings_VencCBR& from) { NvtCodecVencSettings_VencCBR::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NvtCodecVencSettings_VencCBR* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "NvtCodecVencSettings.VencCBR"; }

 protected:
  explicit NvtCodecVencSettings_VencCBR(::google::protobuf::Arena* arena);
  NvtCodecVencSettings_VencCBR(::google::protobuf::Arena* arena, const NvtCodecVencSettings_VencCBR& from);
  NvtCodecVencSettings_VencCBR(::google::protobuf::Arena* arena, NvtCodecVencSettings_VencCBR&& from) noexcept
      : NvtCodecVencSettings_VencCBR(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------
  using IQp = NvtCodecVencSettings_VencCBR_IQp;
  using PQp = NvtCodecVencSettings_VencCBR_PQp;
  using RowRcSettings = NvtCodecVencSettings_VencCBR_RowRcSettings;

  // accessors -------------------------------------------------------
  enum : int {
    kIqpFieldNumber = 5,
    kPqpFieldNumber = 6,
    kRowRcSettingsFieldNumber = 8,
    kStaticTimeFieldNumber = 1,
    kByterateFieldNumber = 2,
    kFramerateFieldNumber = 3,
    kGopFieldNumber = 4,
    kIPWeightFieldNumber = 7,
  };
  // .NvtCodecVencSettings.VencCBR.IQp iqp = 5;
  bool has_iqp() const;
  void clear_iqp() ;
  const ::NvtCodecVencSettings_VencCBR_IQp& iqp() const;
  PROTOBUF_NODISCARD ::NvtCodecVencSettings_VencCBR_IQp* release_iqp();
  ::NvtCodecVencSettings_VencCBR_IQp* mutable_iqp();
  void set_allocated_iqp(::NvtCodecVencSettings_VencCBR_IQp* value);
  void unsafe_arena_set_allocated_iqp(::NvtCodecVencSettings_VencCBR_IQp* value);
  ::NvtCodecVencSettings_VencCBR_IQp* unsafe_arena_release_iqp();

  private:
  const ::NvtCodecVencSettings_VencCBR_IQp& _internal_iqp() const;
  ::NvtCodecVencSettings_VencCBR_IQp* _internal_mutable_iqp();

  public:
  // .NvtCodecVencSettings.VencCBR.PQp pqp = 6;
  bool has_pqp() const;
  void clear_pqp() ;
  const ::NvtCodecVencSettings_VencCBR_PQp& pqp() const;
  PROTOBUF_NODISCARD ::NvtCodecVencSettings_VencCBR_PQp* release_pqp();
  ::NvtCodecVencSettings_VencCBR_PQp* mutable_pqp();
  void set_allocated_pqp(::NvtCodecVencSettings_VencCBR_PQp* value);
  void unsafe_arena_set_allocated_pqp(::NvtCodecVencSettings_VencCBR_PQp* value);
  ::NvtCodecVencSettings_VencCBR_PQp* unsafe_arena_release_pqp();

  private:
  const ::NvtCodecVencSettings_VencCBR_PQp& _internal_pqp() const;
  ::NvtCodecVencSettings_VencCBR_PQp* _internal_mutable_pqp();

  public:
  // optional .NvtCodecVencSettings.VencCBR.RowRcSettings rowRcSettings = 8;
  bool has_rowrcsettings() const;
  void clear_rowrcsettings() ;
  const ::NvtCodecVencSettings_VencCBR_RowRcSettings& rowrcsettings() const;
  PROTOBUF_NODISCARD ::NvtCodecVencSettings_VencCBR_RowRcSettings* release_rowrcsettings();
  ::NvtCodecVencSettings_VencCBR_RowRcSettings* mutable_rowrcsettings();
  void set_allocated_rowrcsettings(::NvtCodecVencSettings_VencCBR_RowRcSettings* value);
  void unsafe_arena_set_allocated_rowrcsettings(::NvtCodecVencSettings_VencCBR_RowRcSettings* value);
  ::NvtCodecVencSettings_VencCBR_RowRcSettings* unsafe_arena_release_rowrcsettings();

  private:
  const ::NvtCodecVencSettings_VencCBR_RowRcSettings& _internal_rowrcsettings() const;
  ::NvtCodecVencSettings_VencCBR_RowRcSettings* _internal_mutable_rowrcsettings();

  public:
  // uint32 staticTime = 1;
  void clear_statictime() ;
  ::uint32_t statictime() const;
  void set_statictime(::uint32_t value);

  private:
  ::uint32_t _internal_statictime() const;
  void _internal_set_statictime(::uint32_t value);

  public:
  // uint32 byterate = 2;
  void clear_byterate() ;
  ::uint32_t byterate() const;
  void set_byterate(::uint32_t value);

  private:
  ::uint32_t _internal_byterate() const;
  void _internal_set_byterate(::uint32_t value);

  public:
  // uint32 framerate = 3;
  void clear_framerate() ;
  ::uint32_t framerate() const;
  void set_framerate(::uint32_t value);

  private:
  ::uint32_t _internal_framerate() const;
  void _internal_set_framerate(::uint32_t value);

  public:
  // uint32 gop = 4;
  void clear_gop() ;
  ::uint32_t gop() const;
  void set_gop(::uint32_t value);

  private:
  ::uint32_t _internal_gop() const;
  void _internal_set_gop(::uint32_t value);

  public:
  // int32 IPWeight = 7;
  void clear_ipweight() ;
  ::int32_t ipweight() const;
  void set_ipweight(::int32_t value);

  private:
  ::int32_t _internal_ipweight() const;
  void _internal_set_ipweight(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:NvtCodecVencSettings.VencCBR)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 3,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::NvtCodecVencSettings_VencCBR_IQp* iqp_;
    ::NvtCodecVencSettings_VencCBR_PQp* pqp_;
    ::NvtCodecVencSettings_VencCBR_RowRcSettings* rowrcsettings_;
    ::uint32_t statictime_;
    ::uint32_t byterate_;
    ::uint32_t framerate_;
    ::uint32_t gop_;
    ::int32_t ipweight_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cameractl_2eproto;
};
// -------------------------------------------------------------------

class NvtCodecVencSettings_VencVBR final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:NvtCodecVencSettings.VencVBR) */ {
 public:
  inline NvtCodecVencSettings_VencVBR() : NvtCodecVencSettings_VencVBR(nullptr) {}
  ~NvtCodecVencSettings_VencVBR() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NvtCodecVencSettings_VencVBR(
      ::google::protobuf::internal::ConstantInitialized);

  inline NvtCodecVencSettings_VencVBR(const NvtCodecVencSettings_VencVBR& from) : NvtCodecVencSettings_VencVBR(nullptr, from) {}
  inline NvtCodecVencSettings_VencVBR(NvtCodecVencSettings_VencVBR&& from) noexcept
      : NvtCodecVencSettings_VencVBR(nullptr, std::move(from)) {}
  inline NvtCodecVencSettings_VencVBR& operator=(const NvtCodecVencSettings_VencVBR& from) {
    CopyFrom(from);
    return *this;
  }
  inline NvtCodecVencSettings_VencVBR& operator=(NvtCodecVencSettings_VencVBR&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NvtCodecVencSettings_VencVBR& default_instance() {
    return *internal_default_instance();
  }
  static inline const NvtCodecVencSettings_VencVBR* internal_default_instance() {
    return reinterpret_cast<const NvtCodecVencSettings_VencVBR*>(
        &_NvtCodecVencSettings_VencVBR_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(NvtCodecVencSettings_VencVBR& a, NvtCodecVencSettings_VencVBR& b) { a.Swap(&b); }
  inline void Swap(NvtCodecVencSettings_VencVBR* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NvtCodecVencSettings_VencVBR* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NvtCodecVencSettings_VencVBR* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<NvtCodecVencSettings_VencVBR>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NvtCodecVencSettings_VencVBR& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NvtCodecVencSettings_VencVBR& from) { NvtCodecVencSettings_VencVBR::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NvtCodecVencSettings_VencVBR* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "NvtCodecVencSettings.VencVBR"; }

 protected:
  explicit NvtCodecVencSettings_VencVBR(::google::protobuf::Arena* arena);
  NvtCodecVencSettings_VencVBR(::google::protobuf::Arena* arena, const NvtCodecVencSettings_VencVBR& from);
  NvtCodecVencSettings_VencVBR(::google::protobuf::Arena* arena, NvtCodecVencSettings_VencVBR&& from) noexcept
      : NvtCodecVencSettings_VencVBR(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCbrSettingsFieldNumber = 1,
    kChangePosFieldNumber = 2,
  };
  // .NvtCodecVencSettings.VencCBR cbrSettings = 1;
  bool has_cbrsettings() const;
  void clear_cbrsettings() ;
  const ::NvtCodecVencSettings_VencCBR& cbrsettings() const;
  PROTOBUF_NODISCARD ::NvtCodecVencSettings_VencCBR* release_cbrsettings();
  ::NvtCodecVencSettings_VencCBR* mutable_cbrsettings();
  void set_allocated_cbrsettings(::NvtCodecVencSettings_VencCBR* value);
  void unsafe_arena_set_allocated_cbrsettings(::NvtCodecVencSettings_VencCBR* value);
  ::NvtCodecVencSettings_VencCBR* unsafe_arena_release_cbrsettings();

  private:
  const ::NvtCodecVencSettings_VencCBR& _internal_cbrsettings() const;
  ::NvtCodecVencSettings_VencCBR* _internal_mutable_cbrsettings();

  public:
  // uint32 changePos = 2;
  void clear_changepos() ;
  ::uint32_t changepos() const;
  void set_changepos(::uint32_t value);

  private:
  ::uint32_t _internal_changepos() const;
  void _internal_set_changepos(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:NvtCodecVencSettings.VencVBR)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::NvtCodecVencSettings_VencCBR* cbrsettings_;
    ::uint32_t changepos_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cameractl_2eproto;
};
// -------------------------------------------------------------------

class NvtCodecVencSettings_VencEVBR final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:NvtCodecVencSettings.VencEVBR) */ {
 public:
  inline NvtCodecVencSettings_VencEVBR() : NvtCodecVencSettings_VencEVBR(nullptr) {}
  ~NvtCodecVencSettings_VencEVBR() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NvtCodecVencSettings_VencEVBR(
      ::google::protobuf::internal::ConstantInitialized);

  inline NvtCodecVencSettings_VencEVBR(const NvtCodecVencSettings_VencEVBR& from) : NvtCodecVencSettings_VencEVBR(nullptr, from) {}
  inline NvtCodecVencSettings_VencEVBR(NvtCodecVencSettings_VencEVBR&& from) noexcept
      : NvtCodecVencSettings_VencEVBR(nullptr, std::move(from)) {}
  inline NvtCodecVencSettings_VencEVBR& operator=(const NvtCodecVencSettings_VencEVBR& from) {
    CopyFrom(from);
    return *this;
  }
  inline NvtCodecVencSettings_VencEVBR& operator=(NvtCodecVencSettings_VencEVBR&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NvtCodecVencSettings_VencEVBR& default_instance() {
    return *internal_default_instance();
  }
  static inline const NvtCodecVencSettings_VencEVBR* internal_default_instance() {
    return reinterpret_cast<const NvtCodecVencSettings_VencEVBR*>(
        &_NvtCodecVencSettings_VencEVBR_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(NvtCodecVencSettings_VencEVBR& a, NvtCodecVencSettings_VencEVBR& b) { a.Swap(&b); }
  inline void Swap(NvtCodecVencSettings_VencEVBR* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NvtCodecVencSettings_VencEVBR* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NvtCodecVencSettings_VencEVBR* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<NvtCodecVencSettings_VencEVBR>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NvtCodecVencSettings_VencEVBR& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NvtCodecVencSettings_VencEVBR& from) { NvtCodecVencSettings_VencEVBR::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NvtCodecVencSettings_VencEVBR* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "NvtCodecVencSettings.VencEVBR"; }

 protected:
  explicit NvtCodecVencSettings_VencEVBR(::google::protobuf::Arena* arena);
  NvtCodecVencSettings_VencEVBR(::google::protobuf::Arena* arena, const NvtCodecVencSettings_VencEVBR& from);
  NvtCodecVencSettings_VencEVBR(::google::protobuf::Arena* arena, NvtCodecVencSettings_VencEVBR&& from) noexcept
      : NvtCodecVencSettings_VencEVBR(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCbrSettingsFieldNumber = 1,
    kKeyPPeriodFieldNumber = 2,
    kKeyPWeightFieldNumber = 3,
    kMotionAQStrengthFieldNumber = 4,
    kStillFrameCntFieldNumber = 5,
    kMotionRatioThdFieldNumber = 6,
    kIPsnrCndFieldNumber = 7,
    kPPsnrCndFieldNumber = 8,
    kKeyPPsnrCndFieldNumber = 9,
  };
  // .NvtCodecVencSettings.VencCBR cbrSettings = 1;
  bool has_cbrsettings() const;
  void clear_cbrsettings() ;
  const ::NvtCodecVencSettings_VencCBR& cbrsettings() const;
  PROTOBUF_NODISCARD ::NvtCodecVencSettings_VencCBR* release_cbrsettings();
  ::NvtCodecVencSettings_VencCBR* mutable_cbrsettings();
  void set_allocated_cbrsettings(::NvtCodecVencSettings_VencCBR* value);
  void unsafe_arena_set_allocated_cbrsettings(::NvtCodecVencSettings_VencCBR* value);
  ::NvtCodecVencSettings_VencCBR* unsafe_arena_release_cbrsettings();

  private:
  const ::NvtCodecVencSettings_VencCBR& _internal_cbrsettings() const;
  ::NvtCodecVencSettings_VencCBR* _internal_mutable_cbrsettings();

  public:
  // int32 keyPPeriod = 2;
  void clear_keypperiod() ;
  ::int32_t keypperiod() const;
  void set_keypperiod(::int32_t value);

  private:
  ::int32_t _internal_keypperiod() const;
  void _internal_set_keypperiod(::int32_t value);

  public:
  // int32 keyPWeight = 3;
  void clear_keypweight() ;
  ::int32_t keypweight() const;
  void set_keypweight(::int32_t value);

  private:
  ::int32_t _internal_keypweight() const;
  void _internal_set_keypweight(::int32_t value);

  public:
  // int32 motionAQStrength = 4;
  void clear_motionaqstrength() ;
  ::int32_t motionaqstrength() const;
  void set_motionaqstrength(::int32_t value);

  private:
  ::int32_t _internal_motionaqstrength() const;
  void _internal_set_motionaqstrength(::int32_t value);

  public:
  // uint32 stillFrameCnt = 5;
  void clear_stillframecnt() ;
  ::uint32_t stillframecnt() const;
  void set_stillframecnt(::uint32_t value);

  private:
  ::uint32_t _internal_stillframecnt() const;
  void _internal_set_stillframecnt(::uint32_t value);

  public:
  // uint32 motionRatioThd = 6;
  void clear_motionratiothd() ;
  ::uint32_t motionratiothd() const;
  void set_motionratiothd(::uint32_t value);

  private:
  ::uint32_t _internal_motionratiothd() const;
  void _internal_set_motionratiothd(::uint32_t value);

  public:
  // uint32 IPsnrCnd = 7;
  void clear_ipsnrcnd() ;
  ::uint32_t ipsnrcnd() const;
  void set_ipsnrcnd(::uint32_t value);

  private:
  ::uint32_t _internal_ipsnrcnd() const;
  void _internal_set_ipsnrcnd(::uint32_t value);

  public:
  // uint32 PPsnrCnd = 8;
  void clear_ppsnrcnd() ;
  ::uint32_t ppsnrcnd() const;
  void set_ppsnrcnd(::uint32_t value);

  private:
  ::uint32_t _internal_ppsnrcnd() const;
  void _internal_set_ppsnrcnd(::uint32_t value);

  public:
  // uint32 KeyPPsnrCnd = 9;
  void clear_keyppsnrcnd() ;
  ::uint32_t keyppsnrcnd() const;
  void set_keyppsnrcnd(::uint32_t value);

  private:
  ::uint32_t _internal_keyppsnrcnd() const;
  void _internal_set_keyppsnrcnd(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:NvtCodecVencSettings.VencEVBR)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::NvtCodecVencSettings_VencCBR* cbrsettings_;
    ::int32_t keypperiod_;
    ::int32_t keypweight_;
    ::int32_t motionaqstrength_;
    ::uint32_t stillframecnt_;
    ::uint32_t motionratiothd_;
    ::uint32_t ipsnrcnd_;
    ::uint32_t ppsnrcnd_;
    ::uint32_t keyppsnrcnd_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cameractl_2eproto;
};
// -------------------------------------------------------------------

class NvtCodecVencSettings final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:NvtCodecVencSettings) */ {
 public:
  inline NvtCodecVencSettings() : NvtCodecVencSettings(nullptr) {}
  ~NvtCodecVencSettings() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NvtCodecVencSettings(
      ::google::protobuf::internal::ConstantInitialized);

  inline NvtCodecVencSettings(const NvtCodecVencSettings& from) : NvtCodecVencSettings(nullptr, from) {}
  inline NvtCodecVencSettings(NvtCodecVencSettings&& from) noexcept
      : NvtCodecVencSettings(nullptr, std::move(from)) {}
  inline NvtCodecVencSettings& operator=(const NvtCodecVencSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline NvtCodecVencSettings& operator=(NvtCodecVencSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NvtCodecVencSettings& default_instance() {
    return *internal_default_instance();
  }
  enum BrcTypeCase {
    kNoneBrcSettings = 8,
    kCBRSettings = 9,
    kVBRSettings = 10,
    kEVBRSettings = 11,
    kFIXQPSettings = 12,
    BRCTYPE_NOT_SET = 0,
  };
  static inline const NvtCodecVencSettings* internal_default_instance() {
    return reinterpret_cast<const NvtCodecVencSettings*>(
        &_NvtCodecVencSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(NvtCodecVencSettings& a, NvtCodecVencSettings& b) { a.Swap(&b); }
  inline void Swap(NvtCodecVencSettings* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NvtCodecVencSettings* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NvtCodecVencSettings* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<NvtCodecVencSettings>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NvtCodecVencSettings& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NvtCodecVencSettings& from) { NvtCodecVencSettings::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NvtCodecVencSettings* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "NvtCodecVencSettings"; }

 protected:
  explicit NvtCodecVencSettings(::google::protobuf::Arena* arena);
  NvtCodecVencSettings(::google::protobuf::Arena* arena, const NvtCodecVencSettings& from);
  NvtCodecVencSettings(::google::protobuf::Arena* arena, NvtCodecVencSettings&& from) noexcept
      : NvtCodecVencSettings(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------
  using VencCBR = NvtCodecVencSettings_VencCBR;
  using VencVBR = NvtCodecVencSettings_VencVBR;
  using VencEVBR = NvtCodecVencSettings_VencEVBR;
  using VencNoneBRC = NvtCodecVencSettings_VencNoneBRC;
  using VencFIXQP = NvtCodecVencSettings_VencFIXQP;
  using AQSettings = NvtCodecVencSettings_AQSettings;
  using LTRSettings = NvtCodecVencSettings_LTRSettings;
  using InputSource = NvtCodecVencSettings_InputSource;
  static constexpr InputSource INPUT_SOURCE_UNKNOWN = NvtCodecVencSettings_InputSource_INPUT_SOURCE_UNKNOWN;
  static constexpr InputSource INPUT_SOURCE_SENSOR1 = NvtCodecVencSettings_InputSource_INPUT_SOURCE_SENSOR1;
  static constexpr InputSource INPUT_SOURCE_SENSOR2 = NvtCodecVencSettings_InputSource_INPUT_SOURCE_SENSOR2;
  static constexpr InputSource INPUT_SOURCE_SENSOR3 = NvtCodecVencSettings_InputSource_INPUT_SOURCE_SENSOR3;
  static constexpr InputSource INPUT_SOURCE_SENSOR4 = NvtCodecVencSettings_InputSource_INPUT_SOURCE_SENSOR4;
  static constexpr InputSource INPUT_SOURCE_UVC = NvtCodecVencSettings_InputSource_INPUT_SOURCE_UVC;
  static inline bool InputSource_IsValid(int value) {
    return NvtCodecVencSettings_InputSource_IsValid(value);
  }
  static constexpr InputSource InputSource_MIN = NvtCodecVencSettings_InputSource_InputSource_MIN;
  static constexpr InputSource InputSource_MAX = NvtCodecVencSettings_InputSource_InputSource_MAX;
  static constexpr int InputSource_ARRAYSIZE = NvtCodecVencSettings_InputSource_InputSource_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* InputSource_descriptor() {
    return NvtCodecVencSettings_InputSource_descriptor();
  }
  template <typename T>
  static inline const std::string& InputSource_Name(T value) {
    return NvtCodecVencSettings_InputSource_Name(value);
  }
  static inline bool InputSource_Parse(absl::string_view name, InputSource* value) {
    return NvtCodecVencSettings_InputSource_Parse(name, value);
  }
  using Format = NvtCodecVencSettings_Format;
  static constexpr Format FORMAT_UNKNOWN = NvtCodecVencSettings_Format_FORMAT_UNKNOWN;
  static constexpr Format FORMAT_MJPEG = NvtCodecVencSettings_Format_FORMAT_MJPEG;
  static constexpr Format FORMAT_H264 = NvtCodecVencSettings_Format_FORMAT_H264;
  static constexpr Format FORMAT_H265 = NvtCodecVencSettings_Format_FORMAT_H265;
  static constexpr Format FORMAT_YUV = NvtCodecVencSettings_Format_FORMAT_YUV;
  static inline bool Format_IsValid(int value) {
    return NvtCodecVencSettings_Format_IsValid(value);
  }
  static constexpr Format Format_MIN = NvtCodecVencSettings_Format_Format_MIN;
  static constexpr Format Format_MAX = NvtCodecVencSettings_Format_Format_MAX;
  static constexpr int Format_ARRAYSIZE = NvtCodecVencSettings_Format_Format_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Format_descriptor() {
    return NvtCodecVencSettings_Format_descriptor();
  }
  template <typename T>
  static inline const std::string& Format_Name(T value) {
    return NvtCodecVencSettings_Format_Name(value);
  }
  static inline bool Format_Parse(absl::string_view name, Format* value) {
    return NvtCodecVencSettings_Format_Parse(name, value);
  }
  using Profile = NvtCodecVencSettings_Profile;
  static constexpr Profile PROFILE_UNKNOWN = NvtCodecVencSettings_Profile_PROFILE_UNKNOWN;
  static constexpr Profile PROFILE_BASELINE = NvtCodecVencSettings_Profile_PROFILE_BASELINE;
  static constexpr Profile PROFILE_MAIN = NvtCodecVencSettings_Profile_PROFILE_MAIN;
  static constexpr Profile PROFILE_HIGH = NvtCodecVencSettings_Profile_PROFILE_HIGH;
  static inline bool Profile_IsValid(int value) {
    return NvtCodecVencSettings_Profile_IsValid(value);
  }
  static constexpr Profile Profile_MIN = NvtCodecVencSettings_Profile_Profile_MIN;
  static constexpr Profile Profile_MAX = NvtCodecVencSettings_Profile_Profile_MAX;
  static constexpr int Profile_ARRAYSIZE = NvtCodecVencSettings_Profile_Profile_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Profile_descriptor() {
    return NvtCodecVencSettings_Profile_descriptor();
  }
  template <typename T>
  static inline const std::string& Profile_Name(T value) {
    return NvtCodecVencSettings_Profile_Name(value);
  }
  static inline bool Profile_Parse(absl::string_view name, Profile* value) {
    return NvtCodecVencSettings_Profile_Parse(name, value);
  }
  using VencSVCT = NvtCodecVencSettings_VencSVCT;
  static constexpr VencSVCT SVCT_DISABLE = NvtCodecVencSettings_VencSVCT_SVCT_DISABLE;
  static constexpr VencSVCT SVCT_LAYER_1 = NvtCodecVencSettings_VencSVCT_SVCT_LAYER_1;
  static constexpr VencSVCT SVCT_LAYER_2 = NvtCodecVencSettings_VencSVCT_SVCT_LAYER_2;
  static inline bool VencSVCT_IsValid(int value) {
    return NvtCodecVencSettings_VencSVCT_IsValid(value);
  }
  static constexpr VencSVCT VencSVCT_MIN = NvtCodecVencSettings_VencSVCT_VencSVCT_MIN;
  static constexpr VencSVCT VencSVCT_MAX = NvtCodecVencSettings_VencSVCT_VencSVCT_MAX;
  static constexpr int VencSVCT_ARRAYSIZE = NvtCodecVencSettings_VencSVCT_VencSVCT_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* VencSVCT_descriptor() {
    return NvtCodecVencSettings_VencSVCT_descriptor();
  }
  template <typename T>
  static inline const std::string& VencSVCT_Name(T value) {
    return NvtCodecVencSettings_VencSVCT_Name(value);
  }
  static inline bool VencSVCT_Parse(absl::string_view name, VencSVCT* value) {
    return NvtCodecVencSettings_VencSVCT_Parse(name, value);
  }
  using VencRotation = NvtCodecVencSettings_VencRotation;
  static constexpr VencRotation RT_NONE = NvtCodecVencSettings_VencRotation_RT_NONE;
  static constexpr VencRotation RT_BUILTIN_90 = NvtCodecVencSettings_VencRotation_RT_BUILTIN_90;
  static constexpr VencRotation RT_BUILTIN_270 = NvtCodecVencSettings_VencRotation_RT_BUILTIN_270;
  static constexpr VencRotation RT_EXTEND_90 = NvtCodecVencSettings_VencRotation_RT_EXTEND_90;
  static constexpr VencRotation RT_EXTEND_180 = NvtCodecVencSettings_VencRotation_RT_EXTEND_180;
  static constexpr VencRotation RT_EXTEND_270 = NvtCodecVencSettings_VencRotation_RT_EXTEND_270;
  static inline bool VencRotation_IsValid(int value) {
    return NvtCodecVencSettings_VencRotation_IsValid(value);
  }
  static constexpr VencRotation VencRotation_MIN = NvtCodecVencSettings_VencRotation_VencRotation_MIN;
  static constexpr VencRotation VencRotation_MAX = NvtCodecVencSettings_VencRotation_VencRotation_MAX;
  static constexpr int VencRotation_ARRAYSIZE = NvtCodecVencSettings_VencRotation_VencRotation_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* VencRotation_descriptor() {
    return NvtCodecVencSettings_VencRotation_descriptor();
  }
  template <typename T>
  static inline const std::string& VencRotation_Name(T value) {
    return NvtCodecVencSettings_VencRotation_Name(value);
  }
  static inline bool VencRotation_Parse(absl::string_view name, VencRotation* value) {
    return NvtCodecVencSettings_VencRotation_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kAqSettingsFieldNumber = 16,
    kLtrSettingsFieldNumber = 17,
    kVencNumFieldNumber = 1,
    kEInputSourceFieldNumber = 2,
    kEFormatFieldNumber = 3,
    kEProfileFieldNumber = 4,
    kTargetWidthFieldNumber = 5,
    kTargetHeightFieldNumber = 6,
    kSvctSettingsFieldNumber = 13,
    kEVencRTFieldNumber = 15,
    kEnableNRFieldNumber = 14,
    kSEIEnableFieldNumber = 18,
    kNoneBrcSettingsFieldNumber = 8,
    kCBRSettingsFieldNumber = 9,
    kVBRSettingsFieldNumber = 10,
    kEVBRSettingsFieldNumber = 11,
    kFIXQPSettingsFieldNumber = 12,
  };
  // optional .NvtCodecVencSettings.AQSettings aqSettings = 16;
  bool has_aqsettings() const;
  void clear_aqsettings() ;
  const ::NvtCodecVencSettings_AQSettings& aqsettings() const;
  PROTOBUF_NODISCARD ::NvtCodecVencSettings_AQSettings* release_aqsettings();
  ::NvtCodecVencSettings_AQSettings* mutable_aqsettings();
  void set_allocated_aqsettings(::NvtCodecVencSettings_AQSettings* value);
  void unsafe_arena_set_allocated_aqsettings(::NvtCodecVencSettings_AQSettings* value);
  ::NvtCodecVencSettings_AQSettings* unsafe_arena_release_aqsettings();

  private:
  const ::NvtCodecVencSettings_AQSettings& _internal_aqsettings() const;
  ::NvtCodecVencSettings_AQSettings* _internal_mutable_aqsettings();

  public:
  // .NvtCodecVencSettings.LTRSettings ltrSettings = 17;
  bool has_ltrsettings() const;
  void clear_ltrsettings() ;
  const ::NvtCodecVencSettings_LTRSettings& ltrsettings() const;
  PROTOBUF_NODISCARD ::NvtCodecVencSettings_LTRSettings* release_ltrsettings();
  ::NvtCodecVencSettings_LTRSettings* mutable_ltrsettings();
  void set_allocated_ltrsettings(::NvtCodecVencSettings_LTRSettings* value);
  void unsafe_arena_set_allocated_ltrsettings(::NvtCodecVencSettings_LTRSettings* value);
  ::NvtCodecVencSettings_LTRSettings* unsafe_arena_release_ltrsettings();

  private:
  const ::NvtCodecVencSettings_LTRSettings& _internal_ltrsettings() const;
  ::NvtCodecVencSettings_LTRSettings* _internal_mutable_ltrsettings();

  public:
  // uint32 VencNum = 1;
  void clear_vencnum() ;
  ::uint32_t vencnum() const;
  void set_vencnum(::uint32_t value);

  private:
  ::uint32_t _internal_vencnum() const;
  void _internal_set_vencnum(::uint32_t value);

  public:
  // .NvtCodecVencSettings.InputSource eInputSource = 2;
  void clear_einputsource() ;
  ::NvtCodecVencSettings_InputSource einputsource() const;
  void set_einputsource(::NvtCodecVencSettings_InputSource value);

  private:
  ::NvtCodecVencSettings_InputSource _internal_einputsource() const;
  void _internal_set_einputsource(::NvtCodecVencSettings_InputSource value);

  public:
  // .NvtCodecVencSettings.Format eFormat = 3;
  void clear_eformat() ;
  ::NvtCodecVencSettings_Format eformat() const;
  void set_eformat(::NvtCodecVencSettings_Format value);

  private:
  ::NvtCodecVencSettings_Format _internal_eformat() const;
  void _internal_set_eformat(::NvtCodecVencSettings_Format value);

  public:
  // optional .NvtCodecVencSettings.Profile eProfile = 4;
  bool has_eprofile() const;
  void clear_eprofile() ;
  ::NvtCodecVencSettings_Profile eprofile() const;
  void set_eprofile(::NvtCodecVencSettings_Profile value);

  private:
  ::NvtCodecVencSettings_Profile _internal_eprofile() const;
  void _internal_set_eprofile(::NvtCodecVencSettings_Profile value);

  public:
  // uint32 TargetWidth = 5;
  void clear_targetwidth() ;
  ::uint32_t targetwidth() const;
  void set_targetwidth(::uint32_t value);

  private:
  ::uint32_t _internal_targetwidth() const;
  void _internal_set_targetwidth(::uint32_t value);

  public:
  // uint32 TargetHeight = 6;
  void clear_targetheight() ;
  ::uint32_t targetheight() const;
  void set_targetheight(::uint32_t value);

  private:
  ::uint32_t _internal_targetheight() const;
  void _internal_set_targetheight(::uint32_t value);

  public:
  // .NvtCodecVencSettings.VencSVCT svctSettings = 13;
  void clear_svctsettings() ;
  ::NvtCodecVencSettings_VencSVCT svctsettings() const;
  void set_svctsettings(::NvtCodecVencSettings_VencSVCT value);

  private:
  ::NvtCodecVencSettings_VencSVCT _internal_svctsettings() const;
  void _internal_set_svctsettings(::NvtCodecVencSettings_VencSVCT value);

  public:
  // .NvtCodecVencSettings.VencRotation eVencRT = 15;
  void clear_evencrt() ;
  ::NvtCodecVencSettings_VencRotation evencrt() const;
  void set_evencrt(::NvtCodecVencSettings_VencRotation value);

  private:
  ::NvtCodecVencSettings_VencRotation _internal_evencrt() const;
  void _internal_set_evencrt(::NvtCodecVencSettings_VencRotation value);

  public:
  // bool enableNR = 14;
  void clear_enablenr() ;
  bool enablenr() const;
  void set_enablenr(bool value);

  private:
  bool _internal_enablenr() const;
  void _internal_set_enablenr(bool value);

  public:
  // bool SEIEnable = 18;
  void clear_seienable() ;
  bool seienable() const;
  void set_seienable(bool value);

  private:
  bool _internal_seienable() const;
  void _internal_set_seienable(bool value);

  public:
  // .NvtCodecVencSettings.VencNoneBRC noneBrcSettings = 8;
  bool has_nonebrcsettings() const;
  private:
  bool _internal_has_nonebrcsettings() const;

  public:
  void clear_nonebrcsettings() ;
  const ::NvtCodecVencSettings_VencNoneBRC& nonebrcsettings() const;
  PROTOBUF_NODISCARD ::NvtCodecVencSettings_VencNoneBRC* release_nonebrcsettings();
  ::NvtCodecVencSettings_VencNoneBRC* mutable_nonebrcsettings();
  void set_allocated_nonebrcsettings(::NvtCodecVencSettings_VencNoneBRC* value);
  void unsafe_arena_set_allocated_nonebrcsettings(::NvtCodecVencSettings_VencNoneBRC* value);
  ::NvtCodecVencSettings_VencNoneBRC* unsafe_arena_release_nonebrcsettings();

  private:
  const ::NvtCodecVencSettings_VencNoneBRC& _internal_nonebrcsettings() const;
  ::NvtCodecVencSettings_VencNoneBRC* _internal_mutable_nonebrcsettings();

  public:
  // .NvtCodecVencSettings.VencCBR CBRSettings = 9;
  bool has_cbrsettings() const;
  private:
  bool _internal_has_cbrsettings() const;

  public:
  void clear_cbrsettings() ;
  const ::NvtCodecVencSettings_VencCBR& cbrsettings() const;
  PROTOBUF_NODISCARD ::NvtCodecVencSettings_VencCBR* release_cbrsettings();
  ::NvtCodecVencSettings_VencCBR* mutable_cbrsettings();
  void set_allocated_cbrsettings(::NvtCodecVencSettings_VencCBR* value);
  void unsafe_arena_set_allocated_cbrsettings(::NvtCodecVencSettings_VencCBR* value);
  ::NvtCodecVencSettings_VencCBR* unsafe_arena_release_cbrsettings();

  private:
  const ::NvtCodecVencSettings_VencCBR& _internal_cbrsettings() const;
  ::NvtCodecVencSettings_VencCBR* _internal_mutable_cbrsettings();

  public:
  // .NvtCodecVencSettings.VencVBR VBRSettings = 10;
  bool has_vbrsettings() const;
  private:
  bool _internal_has_vbrsettings() const;

  public:
  void clear_vbrsettings() ;
  const ::NvtCodecVencSettings_VencVBR& vbrsettings() const;
  PROTOBUF_NODISCARD ::NvtCodecVencSettings_VencVBR* release_vbrsettings();
  ::NvtCodecVencSettings_VencVBR* mutable_vbrsettings();
  void set_allocated_vbrsettings(::NvtCodecVencSettings_VencVBR* value);
  void unsafe_arena_set_allocated_vbrsettings(::NvtCodecVencSettings_VencVBR* value);
  ::NvtCodecVencSettings_VencVBR* unsafe_arena_release_vbrsettings();

  private:
  const ::NvtCodecVencSettings_VencVBR& _internal_vbrsettings() const;
  ::NvtCodecVencSettings_VencVBR* _internal_mutable_vbrsettings();

  public:
  // .NvtCodecVencSettings.VencEVBR EVBRSettings = 11;
  bool has_evbrsettings() const;
  private:
  bool _internal_has_evbrsettings() const;

  public:
  void clear_evbrsettings() ;
  const ::NvtCodecVencSettings_VencEVBR& evbrsettings() const;
  PROTOBUF_NODISCARD ::NvtCodecVencSettings_VencEVBR* release_evbrsettings();
  ::NvtCodecVencSettings_VencEVBR* mutable_evbrsettings();
  void set_allocated_evbrsettings(::NvtCodecVencSettings_VencEVBR* value);
  void unsafe_arena_set_allocated_evbrsettings(::NvtCodecVencSettings_VencEVBR* value);
  ::NvtCodecVencSettings_VencEVBR* unsafe_arena_release_evbrsettings();

  private:
  const ::NvtCodecVencSettings_VencEVBR& _internal_evbrsettings() const;
  ::NvtCodecVencSettings_VencEVBR* _internal_mutable_evbrsettings();

  public:
  // .NvtCodecVencSettings.VencFIXQP FIXQPSettings = 12;
  bool has_fixqpsettings() const;
  private:
  bool _internal_has_fixqpsettings() const;

  public:
  void clear_fixqpsettings() ;
  const ::NvtCodecVencSettings_VencFIXQP& fixqpsettings() const;
  PROTOBUF_NODISCARD ::NvtCodecVencSettings_VencFIXQP* release_fixqpsettings();
  ::NvtCodecVencSettings_VencFIXQP* mutable_fixqpsettings();
  void set_allocated_fixqpsettings(::NvtCodecVencSettings_VencFIXQP* value);
  void unsafe_arena_set_allocated_fixqpsettings(::NvtCodecVencSettings_VencFIXQP* value);
  ::NvtCodecVencSettings_VencFIXQP* unsafe_arena_release_fixqpsettings();

  private:
  const ::NvtCodecVencSettings_VencFIXQP& _internal_fixqpsettings() const;
  ::NvtCodecVencSettings_VencFIXQP* _internal_mutable_fixqpsettings();

  public:
  void clear_brcType();
  BrcTypeCase brcType_case() const;
  // @@protoc_insertion_point(class_scope:NvtCodecVencSettings)
 private:
  class _Internal;
  void set_has_nonebrcsettings();
  void set_has_cbrsettings();
  void set_has_vbrsettings();
  void set_has_evbrsettings();
  void set_has_fixqpsettings();
  inline bool has_brcType() const;
  inline void clear_has_brcType();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 17, 7,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::NvtCodecVencSettings_AQSettings* aqsettings_;
    ::NvtCodecVencSettings_LTRSettings* ltrsettings_;
    ::uint32_t vencnum_;
    int einputsource_;
    int eformat_;
    int eprofile_;
    ::uint32_t targetwidth_;
    ::uint32_t targetheight_;
    int svctsettings_;
    int evencrt_;
    bool enablenr_;
    bool seienable_;
    union BrcTypeUnion {
      constexpr BrcTypeUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::NvtCodecVencSettings_VencNoneBRC* nonebrcsettings_;
      ::NvtCodecVencSettings_VencCBR* cbrsettings_;
      ::NvtCodecVencSettings_VencVBR* vbrsettings_;
      ::NvtCodecVencSettings_VencEVBR* evbrsettings_;
      ::NvtCodecVencSettings_VencFIXQP* fixqpsettings_;
    } brcType_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cameractl_2eproto;
};
// -------------------------------------------------------------------

class CamCtlResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:CamCtlResponse) */ {
 public:
  inline CamCtlResponse() : CamCtlResponse(nullptr) {}
  ~CamCtlResponse() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CamCtlResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline CamCtlResponse(const CamCtlResponse& from) : CamCtlResponse(nullptr, from) {}
  inline CamCtlResponse(CamCtlResponse&& from) noexcept
      : CamCtlResponse(nullptr, std::move(from)) {}
  inline CamCtlResponse& operator=(const CamCtlResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CamCtlResponse& operator=(CamCtlResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CamCtlResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CamCtlResponse* internal_default_instance() {
    return reinterpret_cast<const CamCtlResponse*>(
        &_CamCtlResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 18;
  friend void swap(CamCtlResponse& a, CamCtlResponse& b) { a.Swap(&b); }
  inline void Swap(CamCtlResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CamCtlResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CamCtlResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<CamCtlResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CamCtlResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CamCtlResponse& from) { CamCtlResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CamCtlResponse* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "CamCtlResponse"; }

 protected:
  explicit CamCtlResponse(::google::protobuf::Arena* arena);
  CamCtlResponse(::google::protobuf::Arena* arena, const CamCtlResponse& from);
  CamCtlResponse(::google::protobuf::Arena* arena, CamCtlResponse&& from) noexcept
      : CamCtlResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------
  using ResponseType = CamCtlResponse_ResponseType;
  static constexpr ResponseType UNKNOWN = CamCtlResponse_ResponseType_UNKNOWN;
  static constexpr ResponseType OK = CamCtlResponse_ResponseType_OK;
  static constexpr ResponseType INVALID_REQUEST = CamCtlResponse_ResponseType_INVALID_REQUEST;
  static constexpr ResponseType REQUEST_ERROR = CamCtlResponse_ResponseType_REQUEST_ERROR;
  static constexpr ResponseType DECODE_ERROR = CamCtlResponse_ResponseType_DECODE_ERROR;
  static inline bool ResponseType_IsValid(int value) {
    return CamCtlResponse_ResponseType_IsValid(value);
  }
  static constexpr ResponseType ResponseType_MIN = CamCtlResponse_ResponseType_ResponseType_MIN;
  static constexpr ResponseType ResponseType_MAX = CamCtlResponse_ResponseType_ResponseType_MAX;
  static constexpr int ResponseType_ARRAYSIZE = CamCtlResponse_ResponseType_ResponseType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* ResponseType_descriptor() {
    return CamCtlResponse_ResponseType_descriptor();
  }
  template <typename T>
  static inline const std::string& ResponseType_Name(T value) {
    return CamCtlResponse_ResponseType_Name(value);
  }
  static inline bool ResponseType_Parse(absl::string_view name, ResponseType* value) {
    return CamCtlResponse_ResponseType_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kErrorReasonFieldNumber = 2,
    kCurrentSettingsFieldNumber = 4,
    kCurrentISPSettingsFieldNumber = 5,
    kUserListFieldNumber = 6,
    kCurrentMsParamsFieldNumber = 7,
    kResponseTypeFieldNumber = 1,
    kPingResponseFieldNumber = 3,
  };
  // optional string errorReason = 2;
  bool has_errorreason() const;
  void clear_errorreason() ;
  const std::string& errorreason() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_errorreason(Arg_&& arg, Args_... args);
  std::string* mutable_errorreason();
  PROTOBUF_NODISCARD std::string* release_errorreason();
  void set_allocated_errorreason(std::string* value);

  private:
  const std::string& _internal_errorreason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errorreason(
      const std::string& value);
  std::string* _internal_mutable_errorreason();

  public:
  // optional .NvtCodecVencSettings currentSettings = 4;
  bool has_currentsettings() const;
  void clear_currentsettings() ;
  const ::NvtCodecVencSettings& currentsettings() const;
  PROTOBUF_NODISCARD ::NvtCodecVencSettings* release_currentsettings();
  ::NvtCodecVencSettings* mutable_currentsettings();
  void set_allocated_currentsettings(::NvtCodecVencSettings* value);
  void unsafe_arena_set_allocated_currentsettings(::NvtCodecVencSettings* value);
  ::NvtCodecVencSettings* unsafe_arena_release_currentsettings();

  private:
  const ::NvtCodecVencSettings& _internal_currentsettings() const;
  ::NvtCodecVencSettings* _internal_mutable_currentsettings();

  public:
  // optional .ISPSettings currentISPSettings = 5;
  bool has_currentispsettings() const;
  void clear_currentispsettings() ;
  const ::ISPSettings& currentispsettings() const;
  PROTOBUF_NODISCARD ::ISPSettings* release_currentispsettings();
  ::ISPSettings* mutable_currentispsettings();
  void set_allocated_currentispsettings(::ISPSettings* value);
  void unsafe_arena_set_allocated_currentispsettings(::ISPSettings* value);
  ::ISPSettings* unsafe_arena_release_currentispsettings();

  private:
  const ::ISPSettings& _internal_currentispsettings() const;
  ::ISPSettings* _internal_mutable_currentispsettings();

  public:
  // optional .UserList userList = 6;
  bool has_userlist() const;
  void clear_userlist() ;
  const ::UserList& userlist() const;
  PROTOBUF_NODISCARD ::UserList* release_userlist();
  ::UserList* mutable_userlist();
  void set_allocated_userlist(::UserList* value);
  void unsafe_arena_set_allocated_userlist(::UserList* value);
  ::UserList* unsafe_arena_release_userlist();

  private:
  const ::UserList& _internal_userlist() const;
  ::UserList* _internal_mutable_userlist();

  public:
  // optional .ModeSwitchParams currentMsParams = 7;
  bool has_currentmsparams() const;
  void clear_currentmsparams() ;
  const ::ModeSwitchParams& currentmsparams() const;
  PROTOBUF_NODISCARD ::ModeSwitchParams* release_currentmsparams();
  ::ModeSwitchParams* mutable_currentmsparams();
  void set_allocated_currentmsparams(::ModeSwitchParams* value);
  void unsafe_arena_set_allocated_currentmsparams(::ModeSwitchParams* value);
  ::ModeSwitchParams* unsafe_arena_release_currentmsparams();

  private:
  const ::ModeSwitchParams& _internal_currentmsparams() const;
  ::ModeSwitchParams* _internal_mutable_currentmsparams();

  public:
  // .CamCtlResponse.ResponseType responseType = 1;
  void clear_responsetype() ;
  ::CamCtlResponse_ResponseType responsetype() const;
  void set_responsetype(::CamCtlResponse_ResponseType value);

  private:
  ::CamCtlResponse_ResponseType _internal_responsetype() const;
  void _internal_set_responsetype(::CamCtlResponse_ResponseType value);

  public:
  // optional bool pingResponse = 3;
  bool has_pingresponse() const;
  void clear_pingresponse() ;
  bool pingresponse() const;
  void set_pingresponse(bool value);

  private:
  bool _internal_pingresponse() const;
  void _internal_set_pingresponse(bool value);

  public:
  // @@protoc_insertion_point(class_scope:CamCtlResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 4,
      34, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr errorreason_;
    ::NvtCodecVencSettings* currentsettings_;
    ::ISPSettings* currentispsettings_;
    ::UserList* userlist_;
    ::ModeSwitchParams* currentmsparams_;
    int responsetype_;
    bool pingresponse_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cameractl_2eproto;
};
// -------------------------------------------------------------------

class CamCtlRequest_vencSettingsSetRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:CamCtlRequest.vencSettingsSetRequest) */ {
 public:
  inline CamCtlRequest_vencSettingsSetRequest() : CamCtlRequest_vencSettingsSetRequest(nullptr) {}
  ~CamCtlRequest_vencSettingsSetRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CamCtlRequest_vencSettingsSetRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline CamCtlRequest_vencSettingsSetRequest(const CamCtlRequest_vencSettingsSetRequest& from) : CamCtlRequest_vencSettingsSetRequest(nullptr, from) {}
  inline CamCtlRequest_vencSettingsSetRequest(CamCtlRequest_vencSettingsSetRequest&& from) noexcept
      : CamCtlRequest_vencSettingsSetRequest(nullptr, std::move(from)) {}
  inline CamCtlRequest_vencSettingsSetRequest& operator=(const CamCtlRequest_vencSettingsSetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CamCtlRequest_vencSettingsSetRequest& operator=(CamCtlRequest_vencSettingsSetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CamCtlRequest_vencSettingsSetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CamCtlRequest_vencSettingsSetRequest* internal_default_instance() {
    return reinterpret_cast<const CamCtlRequest_vencSettingsSetRequest*>(
        &_CamCtlRequest_vencSettingsSetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(CamCtlRequest_vencSettingsSetRequest& a, CamCtlRequest_vencSettingsSetRequest& b) { a.Swap(&b); }
  inline void Swap(CamCtlRequest_vencSettingsSetRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CamCtlRequest_vencSettingsSetRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CamCtlRequest_vencSettingsSetRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<CamCtlRequest_vencSettingsSetRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CamCtlRequest_vencSettingsSetRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CamCtlRequest_vencSettingsSetRequest& from) { CamCtlRequest_vencSettingsSetRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CamCtlRequest_vencSettingsSetRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "CamCtlRequest.vencSettingsSetRequest"; }

 protected:
  explicit CamCtlRequest_vencSettingsSetRequest(::google::protobuf::Arena* arena);
  CamCtlRequest_vencSettingsSetRequest(::google::protobuf::Arena* arena, const CamCtlRequest_vencSettingsSetRequest& from);
  CamCtlRequest_vencSettingsSetRequest(::google::protobuf::Arena* arena, CamCtlRequest_vencSettingsSetRequest&& from) noexcept
      : CamCtlRequest_vencSettingsSetRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNewSettingsFieldNumber = 2,
    kTgtVencFieldNumber = 1,
  };
  // .NvtCodecVencSettings newSettings = 2;
  bool has_newsettings() const;
  void clear_newsettings() ;
  const ::NvtCodecVencSettings& newsettings() const;
  PROTOBUF_NODISCARD ::NvtCodecVencSettings* release_newsettings();
  ::NvtCodecVencSettings* mutable_newsettings();
  void set_allocated_newsettings(::NvtCodecVencSettings* value);
  void unsafe_arena_set_allocated_newsettings(::NvtCodecVencSettings* value);
  ::NvtCodecVencSettings* unsafe_arena_release_newsettings();

  private:
  const ::NvtCodecVencSettings& _internal_newsettings() const;
  ::NvtCodecVencSettings* _internal_mutable_newsettings();

  public:
  // .VencType tgtVenc = 1;
  void clear_tgtvenc() ;
  ::VencType tgtvenc() const;
  void set_tgtvenc(::VencType value);

  private:
  ::VencType _internal_tgtvenc() const;
  void _internal_set_tgtvenc(::VencType value);

  public:
  // @@protoc_insertion_point(class_scope:CamCtlRequest.vencSettingsSetRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::NvtCodecVencSettings* newsettings_;
    int tgtvenc_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cameractl_2eproto;
};
// -------------------------------------------------------------------

class CamCtlRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:CamCtlRequest) */ {
 public:
  inline CamCtlRequest() : CamCtlRequest(nullptr) {}
  ~CamCtlRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CamCtlRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline CamCtlRequest(const CamCtlRequest& from) : CamCtlRequest(nullptr, from) {}
  inline CamCtlRequest(CamCtlRequest&& from) noexcept
      : CamCtlRequest(nullptr, std::move(from)) {}
  inline CamCtlRequest& operator=(const CamCtlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CamCtlRequest& operator=(CamCtlRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CamCtlRequest& default_instance() {
    return *internal_default_instance();
  }
  enum CmdBodyCase {
    kPingRequest = 2,
    kSetVencSettings = 3,
    kGetVencSettings = 4,
    kMoveMotor = 5,
    kIspSettingGetReq = 6,
    kNewIspSettings = 7,
    kEnableIRLight = 8,
    kFetchUserList = 9,
    kUserModRequest = 10,
    kMsParamsGetReq = 11,
    kNewMsParams = 12,
    CMDBODY_NOT_SET = 0,
  };
  static inline const CamCtlRequest* internal_default_instance() {
    return reinterpret_cast<const CamCtlRequest*>(
        &_CamCtlRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 17;
  friend void swap(CamCtlRequest& a, CamCtlRequest& b) { a.Swap(&b); }
  inline void Swap(CamCtlRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CamCtlRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CamCtlRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<CamCtlRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CamCtlRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CamCtlRequest& from) { CamCtlRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CamCtlRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "CamCtlRequest"; }

 protected:
  explicit CamCtlRequest(::google::protobuf::Arena* arena);
  CamCtlRequest(::google::protobuf::Arena* arena, const CamCtlRequest& from);
  CamCtlRequest(::google::protobuf::Arena* arena, CamCtlRequest&& from) noexcept
      : CamCtlRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------
  using vencSettingsSetRequest = CamCtlRequest_vencSettingsSetRequest;
  using motorMoveRequest = CamCtlRequest_motorMoveRequest;
  using RequestType = CamCtlRequest_RequestType;
  static constexpr RequestType UNKNOWN = CamCtlRequest_RequestType_UNKNOWN;
  static constexpr RequestType CMD = CamCtlRequest_RequestType_CMD;
  static inline bool RequestType_IsValid(int value) {
    return CamCtlRequest_RequestType_IsValid(value);
  }
  static constexpr RequestType RequestType_MIN = CamCtlRequest_RequestType_RequestType_MIN;
  static constexpr RequestType RequestType_MAX = CamCtlRequest_RequestType_RequestType_MAX;
  static constexpr int RequestType_ARRAYSIZE = CamCtlRequest_RequestType_RequestType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* RequestType_descriptor() {
    return CamCtlRequest_RequestType_descriptor();
  }
  template <typename T>
  static inline const std::string& RequestType_Name(T value) {
    return CamCtlRequest_RequestType_Name(value);
  }
  static inline bool RequestType_Parse(absl::string_view name, RequestType* value) {
    return CamCtlRequest_RequestType_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kRequestTypeFieldNumber = 1,
    kPingRequestFieldNumber = 2,
    kSetVencSettingsFieldNumber = 3,
    kGetVencSettingsFieldNumber = 4,
    kMoveMotorFieldNumber = 5,
    kIspSettingGetReqFieldNumber = 6,
    kNewIspSettingsFieldNumber = 7,
    kEnableIRLightFieldNumber = 8,
    kFetchUserListFieldNumber = 9,
    kUserModRequestFieldNumber = 10,
    kMsParamsGetReqFieldNumber = 11,
    kNewMsParamsFieldNumber = 12,
  };
  // .CamCtlRequest.RequestType requestType = 1;
  void clear_requesttype() ;
  ::CamCtlRequest_RequestType requesttype() const;
  void set_requesttype(::CamCtlRequest_RequestType value);

  private:
  ::CamCtlRequest_RequestType _internal_requesttype() const;
  void _internal_set_requesttype(::CamCtlRequest_RequestType value);

  public:
  // bool pingRequest = 2;
  bool has_pingrequest() const;
  void clear_pingrequest() ;
  bool pingrequest() const;
  void set_pingrequest(bool value);

  private:
  bool _internal_pingrequest() const;
  void _internal_set_pingrequest(bool value);

  public:
  // .CamCtlRequest.vencSettingsSetRequest setVencSettings = 3;
  bool has_setvencsettings() const;
  private:
  bool _internal_has_setvencsettings() const;

  public:
  void clear_setvencsettings() ;
  const ::CamCtlRequest_vencSettingsSetRequest& setvencsettings() const;
  PROTOBUF_NODISCARD ::CamCtlRequest_vencSettingsSetRequest* release_setvencsettings();
  ::CamCtlRequest_vencSettingsSetRequest* mutable_setvencsettings();
  void set_allocated_setvencsettings(::CamCtlRequest_vencSettingsSetRequest* value);
  void unsafe_arena_set_allocated_setvencsettings(::CamCtlRequest_vencSettingsSetRequest* value);
  ::CamCtlRequest_vencSettingsSetRequest* unsafe_arena_release_setvencsettings();

  private:
  const ::CamCtlRequest_vencSettingsSetRequest& _internal_setvencsettings() const;
  ::CamCtlRequest_vencSettingsSetRequest* _internal_mutable_setvencsettings();

  public:
  // .VencType getVencSettings = 4;
  bool has_getvencsettings() const;
  void clear_getvencsettings() ;
  ::VencType getvencsettings() const;
  void set_getvencsettings(::VencType value);

  private:
  ::VencType _internal_getvencsettings() const;
  void _internal_set_getvencsettings(::VencType value);

  public:
  // .CamCtlRequest.motorMoveRequest moveMotor = 5;
  bool has_movemotor() const;
  private:
  bool _internal_has_movemotor() const;

  public:
  void clear_movemotor() ;
  const ::CamCtlRequest_motorMoveRequest& movemotor() const;
  PROTOBUF_NODISCARD ::CamCtlRequest_motorMoveRequest* release_movemotor();
  ::CamCtlRequest_motorMoveRequest* mutable_movemotor();
  void set_allocated_movemotor(::CamCtlRequest_motorMoveRequest* value);
  void unsafe_arena_set_allocated_movemotor(::CamCtlRequest_motorMoveRequest* value);
  ::CamCtlRequest_motorMoveRequest* unsafe_arena_release_movemotor();

  private:
  const ::CamCtlRequest_motorMoveRequest& _internal_movemotor() const;
  ::CamCtlRequest_motorMoveRequest* _internal_mutable_movemotor();

  public:
  // bool ispSettingGetReq = 6;
  bool has_ispsettinggetreq() const;
  void clear_ispsettinggetreq() ;
  bool ispsettinggetreq() const;
  void set_ispsettinggetreq(bool value);

  private:
  bool _internal_ispsettinggetreq() const;
  void _internal_set_ispsettinggetreq(bool value);

  public:
  // .ISPSettings newIspSettings = 7;
  bool has_newispsettings() const;
  private:
  bool _internal_has_newispsettings() const;

  public:
  void clear_newispsettings() ;
  const ::ISPSettings& newispsettings() const;
  PROTOBUF_NODISCARD ::ISPSettings* release_newispsettings();
  ::ISPSettings* mutable_newispsettings();
  void set_allocated_newispsettings(::ISPSettings* value);
  void unsafe_arena_set_allocated_newispsettings(::ISPSettings* value);
  ::ISPSettings* unsafe_arena_release_newispsettings();

  private:
  const ::ISPSettings& _internal_newispsettings() const;
  ::ISPSettings* _internal_mutable_newispsettings();

  public:
  // bool enableIRLight = 8;
  bool has_enableirlight() const;
  void clear_enableirlight() ;
  bool enableirlight() const;
  void set_enableirlight(bool value);

  private:
  bool _internal_enableirlight() const;
  void _internal_set_enableirlight(bool value);

  public:
  // bool fetchUserList = 9;
  bool has_fetchuserlist() const;
  void clear_fetchuserlist() ;
  bool fetchuserlist() const;
  void set_fetchuserlist(bool value);

  private:
  bool _internal_fetchuserlist() const;
  void _internal_set_fetchuserlist(bool value);

  public:
  // .NewUserData userModRequest = 10;
  bool has_usermodrequest() const;
  private:
  bool _internal_has_usermodrequest() const;

  public:
  void clear_usermodrequest() ;
  const ::NewUserData& usermodrequest() const;
  PROTOBUF_NODISCARD ::NewUserData* release_usermodrequest();
  ::NewUserData* mutable_usermodrequest();
  void set_allocated_usermodrequest(::NewUserData* value);
  void unsafe_arena_set_allocated_usermodrequest(::NewUserData* value);
  ::NewUserData* unsafe_arena_release_usermodrequest();

  private:
  const ::NewUserData& _internal_usermodrequest() const;
  ::NewUserData* _internal_mutable_usermodrequest();

  public:
  // bool msParamsGetReq = 11;
  bool has_msparamsgetreq() const;
  void clear_msparamsgetreq() ;
  bool msparamsgetreq() const;
  void set_msparamsgetreq(bool value);

  private:
  bool _internal_msparamsgetreq() const;
  void _internal_set_msparamsgetreq(bool value);

  public:
  // .ModeSwitchParams newMsParams = 12;
  bool has_newmsparams() const;
  private:
  bool _internal_has_newmsparams() const;

  public:
  void clear_newmsparams() ;
  const ::ModeSwitchParams& newmsparams() const;
  PROTOBUF_NODISCARD ::ModeSwitchParams* release_newmsparams();
  ::ModeSwitchParams* mutable_newmsparams();
  void set_allocated_newmsparams(::ModeSwitchParams* value);
  void unsafe_arena_set_allocated_newmsparams(::ModeSwitchParams* value);
  ::ModeSwitchParams* unsafe_arena_release_newmsparams();

  private:
  const ::ModeSwitchParams& _internal_newmsparams() const;
  ::ModeSwitchParams* _internal_mutable_newmsparams();

  public:
  void clear_cmdBody();
  CmdBodyCase cmdBody_case() const;
  // @@protoc_insertion_point(class_scope:CamCtlRequest)
 private:
  class _Internal;
  void set_has_pingrequest();
  void set_has_setvencsettings();
  void set_has_getvencsettings();
  void set_has_movemotor();
  void set_has_ispsettinggetreq();
  void set_has_newispsettings();
  void set_has_enableirlight();
  void set_has_fetchuserlist();
  void set_has_usermodrequest();
  void set_has_msparamsgetreq();
  void set_has_newmsparams();
  inline bool has_cmdBody() const;
  inline void clear_has_cmdBody();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 12, 5,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    int requesttype_;
    union CmdBodyUnion {
      constexpr CmdBodyUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      bool pingrequest_;
      ::CamCtlRequest_vencSettingsSetRequest* setvencsettings_;
      int getvencsettings_;
      ::CamCtlRequest_motorMoveRequest* movemotor_;
      bool ispsettinggetreq_;
      ::ISPSettings* newispsettings_;
      bool enableirlight_;
      bool fetchuserlist_;
      ::NewUserData* usermodrequest_;
      bool msparamsgetreq_;
      ::ModeSwitchParams* newmsparams_;
    } cmdBody_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cameractl_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// NvtCodecVencSettings_VencCBR_IQp

// uint32 init = 1;
inline void NvtCodecVencSettings_VencCBR_IQp::clear_init() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.init_ = 0u;
}
inline ::uint32_t NvtCodecVencSettings_VencCBR_IQp::init() const {
  // @@protoc_insertion_point(field_get:NvtCodecVencSettings.VencCBR.IQp.init)
  return _internal_init();
}
inline void NvtCodecVencSettings_VencCBR_IQp::set_init(::uint32_t value) {
  _internal_set_init(value);
  // @@protoc_insertion_point(field_set:NvtCodecVencSettings.VencCBR.IQp.init)
}
inline ::uint32_t NvtCodecVencSettings_VencCBR_IQp::_internal_init() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.init_;
}
inline void NvtCodecVencSettings_VencCBR_IQp::_internal_set_init(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.init_ = value;
}

// uint32 min = 2;
inline void NvtCodecVencSettings_VencCBR_IQp::clear_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.min_ = 0u;
}
inline ::uint32_t NvtCodecVencSettings_VencCBR_IQp::min() const {
  // @@protoc_insertion_point(field_get:NvtCodecVencSettings.VencCBR.IQp.min)
  return _internal_min();
}
inline void NvtCodecVencSettings_VencCBR_IQp::set_min(::uint32_t value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:NvtCodecVencSettings.VencCBR.IQp.min)
}
inline ::uint32_t NvtCodecVencSettings_VencCBR_IQp::_internal_min() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.min_;
}
inline void NvtCodecVencSettings_VencCBR_IQp::_internal_set_min(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.min_ = value;
}

// uint32 max = 3;
inline void NvtCodecVencSettings_VencCBR_IQp::clear_max() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.max_ = 0u;
}
inline ::uint32_t NvtCodecVencSettings_VencCBR_IQp::max() const {
  // @@protoc_insertion_point(field_get:NvtCodecVencSettings.VencCBR.IQp.max)
  return _internal_max();
}
inline void NvtCodecVencSettings_VencCBR_IQp::set_max(::uint32_t value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:NvtCodecVencSettings.VencCBR.IQp.max)
}
inline ::uint32_t NvtCodecVencSettings_VencCBR_IQp::_internal_max() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.max_;
}
inline void NvtCodecVencSettings_VencCBR_IQp::_internal_set_max(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.max_ = value;
}

// -------------------------------------------------------------------

// NvtCodecVencSettings_VencCBR_PQp

// uint32 init = 1;
inline void NvtCodecVencSettings_VencCBR_PQp::clear_init() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.init_ = 0u;
}
inline ::uint32_t NvtCodecVencSettings_VencCBR_PQp::init() const {
  // @@protoc_insertion_point(field_get:NvtCodecVencSettings.VencCBR.PQp.init)
  return _internal_init();
}
inline void NvtCodecVencSettings_VencCBR_PQp::set_init(::uint32_t value) {
  _internal_set_init(value);
  // @@protoc_insertion_point(field_set:NvtCodecVencSettings.VencCBR.PQp.init)
}
inline ::uint32_t NvtCodecVencSettings_VencCBR_PQp::_internal_init() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.init_;
}
inline void NvtCodecVencSettings_VencCBR_PQp::_internal_set_init(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.init_ = value;
}

// uint32 min = 2;
inline void NvtCodecVencSettings_VencCBR_PQp::clear_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.min_ = 0u;
}
inline ::uint32_t NvtCodecVencSettings_VencCBR_PQp::min() const {
  // @@protoc_insertion_point(field_get:NvtCodecVencSettings.VencCBR.PQp.min)
  return _internal_min();
}
inline void NvtCodecVencSettings_VencCBR_PQp::set_min(::uint32_t value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:NvtCodecVencSettings.VencCBR.PQp.min)
}
inline ::uint32_t NvtCodecVencSettings_VencCBR_PQp::_internal_min() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.min_;
}
inline void NvtCodecVencSettings_VencCBR_PQp::_internal_set_min(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.min_ = value;
}

// uint32 max = 3;
inline void NvtCodecVencSettings_VencCBR_PQp::clear_max() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.max_ = 0u;
}
inline ::uint32_t NvtCodecVencSettings_VencCBR_PQp::max() const {
  // @@protoc_insertion_point(field_get:NvtCodecVencSettings.VencCBR.PQp.max)
  return _internal_max();
}
inline void NvtCodecVencSettings_VencCBR_PQp::set_max(::uint32_t value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:NvtCodecVencSettings.VencCBR.PQp.max)
}
inline ::uint32_t NvtCodecVencSettings_VencCBR_PQp::_internal_max() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.max_;
}
inline void NvtCodecVencSettings_VencCBR_PQp::_internal_set_max(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.max_ = value;
}

// -------------------------------------------------------------------

// NvtCodecVencSettings_VencCBR_RowRcSettings

// uint32 QpRange = 1;
inline void NvtCodecVencSettings_VencCBR_RowRcSettings::clear_qprange() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.qprange_ = 0u;
}
inline ::uint32_t NvtCodecVencSettings_VencCBR_RowRcSettings::qprange() const {
  // @@protoc_insertion_point(field_get:NvtCodecVencSettings.VencCBR.RowRcSettings.QpRange)
  return _internal_qprange();
}
inline void NvtCodecVencSettings_VencCBR_RowRcSettings::set_qprange(::uint32_t value) {
  _internal_set_qprange(value);
  // @@protoc_insertion_point(field_set:NvtCodecVencSettings.VencCBR.RowRcSettings.QpRange)
}
inline ::uint32_t NvtCodecVencSettings_VencCBR_RowRcSettings::_internal_qprange() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.qprange_;
}
inline void NvtCodecVencSettings_VencCBR_RowRcSettings::_internal_set_qprange(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.qprange_ = value;
}

// uint32 QpStep = 2;
inline void NvtCodecVencSettings_VencCBR_RowRcSettings::clear_qpstep() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.qpstep_ = 0u;
}
inline ::uint32_t NvtCodecVencSettings_VencCBR_RowRcSettings::qpstep() const {
  // @@protoc_insertion_point(field_get:NvtCodecVencSettings.VencCBR.RowRcSettings.QpStep)
  return _internal_qpstep();
}
inline void NvtCodecVencSettings_VencCBR_RowRcSettings::set_qpstep(::uint32_t value) {
  _internal_set_qpstep(value);
  // @@protoc_insertion_point(field_set:NvtCodecVencSettings.VencCBR.RowRcSettings.QpStep)
}
inline ::uint32_t NvtCodecVencSettings_VencCBR_RowRcSettings::_internal_qpstep() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.qpstep_;
}
inline void NvtCodecVencSettings_VencCBR_RowRcSettings::_internal_set_qpstep(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.qpstep_ = value;
}

// -------------------------------------------------------------------

// NvtCodecVencSettings_VencCBR

// uint32 staticTime = 1;
inline void NvtCodecVencSettings_VencCBR::clear_statictime() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.statictime_ = 0u;
}
inline ::uint32_t NvtCodecVencSettings_VencCBR::statictime() const {
  // @@protoc_insertion_point(field_get:NvtCodecVencSettings.VencCBR.staticTime)
  return _internal_statictime();
}
inline void NvtCodecVencSettings_VencCBR::set_statictime(::uint32_t value) {
  _internal_set_statictime(value);
  // @@protoc_insertion_point(field_set:NvtCodecVencSettings.VencCBR.staticTime)
}
inline ::uint32_t NvtCodecVencSettings_VencCBR::_internal_statictime() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.statictime_;
}
inline void NvtCodecVencSettings_VencCBR::_internal_set_statictime(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.statictime_ = value;
}

// uint32 byterate = 2;
inline void NvtCodecVencSettings_VencCBR::clear_byterate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.byterate_ = 0u;
}
inline ::uint32_t NvtCodecVencSettings_VencCBR::byterate() const {
  // @@protoc_insertion_point(field_get:NvtCodecVencSettings.VencCBR.byterate)
  return _internal_byterate();
}
inline void NvtCodecVencSettings_VencCBR::set_byterate(::uint32_t value) {
  _internal_set_byterate(value);
  // @@protoc_insertion_point(field_set:NvtCodecVencSettings.VencCBR.byterate)
}
inline ::uint32_t NvtCodecVencSettings_VencCBR::_internal_byterate() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.byterate_;
}
inline void NvtCodecVencSettings_VencCBR::_internal_set_byterate(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.byterate_ = value;
}

// uint32 framerate = 3;
inline void NvtCodecVencSettings_VencCBR::clear_framerate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.framerate_ = 0u;
}
inline ::uint32_t NvtCodecVencSettings_VencCBR::framerate() const {
  // @@protoc_insertion_point(field_get:NvtCodecVencSettings.VencCBR.framerate)
  return _internal_framerate();
}
inline void NvtCodecVencSettings_VencCBR::set_framerate(::uint32_t value) {
  _internal_set_framerate(value);
  // @@protoc_insertion_point(field_set:NvtCodecVencSettings.VencCBR.framerate)
}
inline ::uint32_t NvtCodecVencSettings_VencCBR::_internal_framerate() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.framerate_;
}
inline void NvtCodecVencSettings_VencCBR::_internal_set_framerate(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.framerate_ = value;
}

// uint32 gop = 4;
inline void NvtCodecVencSettings_VencCBR::clear_gop() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.gop_ = 0u;
}
inline ::uint32_t NvtCodecVencSettings_VencCBR::gop() const {
  // @@protoc_insertion_point(field_get:NvtCodecVencSettings.VencCBR.gop)
  return _internal_gop();
}
inline void NvtCodecVencSettings_VencCBR::set_gop(::uint32_t value) {
  _internal_set_gop(value);
  // @@protoc_insertion_point(field_set:NvtCodecVencSettings.VencCBR.gop)
}
inline ::uint32_t NvtCodecVencSettings_VencCBR::_internal_gop() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.gop_;
}
inline void NvtCodecVencSettings_VencCBR::_internal_set_gop(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.gop_ = value;
}

// .NvtCodecVencSettings.VencCBR.IQp iqp = 5;
inline bool NvtCodecVencSettings_VencCBR::has_iqp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.iqp_ != nullptr);
  return value;
}
inline void NvtCodecVencSettings_VencCBR::clear_iqp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.iqp_ != nullptr) _impl_.iqp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::NvtCodecVencSettings_VencCBR_IQp& NvtCodecVencSettings_VencCBR::_internal_iqp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::NvtCodecVencSettings_VencCBR_IQp* p = _impl_.iqp_;
  return p != nullptr ? *p : reinterpret_cast<const ::NvtCodecVencSettings_VencCBR_IQp&>(::_NvtCodecVencSettings_VencCBR_IQp_default_instance_);
}
inline const ::NvtCodecVencSettings_VencCBR_IQp& NvtCodecVencSettings_VencCBR::iqp() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NvtCodecVencSettings.VencCBR.iqp)
  return _internal_iqp();
}
inline void NvtCodecVencSettings_VencCBR::unsafe_arena_set_allocated_iqp(::NvtCodecVencSettings_VencCBR_IQp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.iqp_);
  }
  _impl_.iqp_ = reinterpret_cast<::NvtCodecVencSettings_VencCBR_IQp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NvtCodecVencSettings.VencCBR.iqp)
}
inline ::NvtCodecVencSettings_VencCBR_IQp* NvtCodecVencSettings_VencCBR::release_iqp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::NvtCodecVencSettings_VencCBR_IQp* released = _impl_.iqp_;
  _impl_.iqp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::NvtCodecVencSettings_VencCBR_IQp* NvtCodecVencSettings_VencCBR::unsafe_arena_release_iqp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:NvtCodecVencSettings.VencCBR.iqp)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::NvtCodecVencSettings_VencCBR_IQp* temp = _impl_.iqp_;
  _impl_.iqp_ = nullptr;
  return temp;
}
inline ::NvtCodecVencSettings_VencCBR_IQp* NvtCodecVencSettings_VencCBR::_internal_mutable_iqp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.iqp_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::NvtCodecVencSettings_VencCBR_IQp>(GetArena());
    _impl_.iqp_ = reinterpret_cast<::NvtCodecVencSettings_VencCBR_IQp*>(p);
  }
  return _impl_.iqp_;
}
inline ::NvtCodecVencSettings_VencCBR_IQp* NvtCodecVencSettings_VencCBR::mutable_iqp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::NvtCodecVencSettings_VencCBR_IQp* _msg = _internal_mutable_iqp();
  // @@protoc_insertion_point(field_mutable:NvtCodecVencSettings.VencCBR.iqp)
  return _msg;
}
inline void NvtCodecVencSettings_VencCBR::set_allocated_iqp(::NvtCodecVencSettings_VencCBR_IQp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.iqp_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.iqp_ = reinterpret_cast<::NvtCodecVencSettings_VencCBR_IQp*>(value);
  // @@protoc_insertion_point(field_set_allocated:NvtCodecVencSettings.VencCBR.iqp)
}

// .NvtCodecVencSettings.VencCBR.PQp pqp = 6;
inline bool NvtCodecVencSettings_VencCBR::has_pqp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pqp_ != nullptr);
  return value;
}
inline void NvtCodecVencSettings_VencCBR::clear_pqp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.pqp_ != nullptr) _impl_.pqp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::NvtCodecVencSettings_VencCBR_PQp& NvtCodecVencSettings_VencCBR::_internal_pqp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::NvtCodecVencSettings_VencCBR_PQp* p = _impl_.pqp_;
  return p != nullptr ? *p : reinterpret_cast<const ::NvtCodecVencSettings_VencCBR_PQp&>(::_NvtCodecVencSettings_VencCBR_PQp_default_instance_);
}
inline const ::NvtCodecVencSettings_VencCBR_PQp& NvtCodecVencSettings_VencCBR::pqp() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NvtCodecVencSettings.VencCBR.pqp)
  return _internal_pqp();
}
inline void NvtCodecVencSettings_VencCBR::unsafe_arena_set_allocated_pqp(::NvtCodecVencSettings_VencCBR_PQp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pqp_);
  }
  _impl_.pqp_ = reinterpret_cast<::NvtCodecVencSettings_VencCBR_PQp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NvtCodecVencSettings.VencCBR.pqp)
}
inline ::NvtCodecVencSettings_VencCBR_PQp* NvtCodecVencSettings_VencCBR::release_pqp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::NvtCodecVencSettings_VencCBR_PQp* released = _impl_.pqp_;
  _impl_.pqp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::NvtCodecVencSettings_VencCBR_PQp* NvtCodecVencSettings_VencCBR::unsafe_arena_release_pqp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:NvtCodecVencSettings.VencCBR.pqp)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::NvtCodecVencSettings_VencCBR_PQp* temp = _impl_.pqp_;
  _impl_.pqp_ = nullptr;
  return temp;
}
inline ::NvtCodecVencSettings_VencCBR_PQp* NvtCodecVencSettings_VencCBR::_internal_mutable_pqp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.pqp_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::NvtCodecVencSettings_VencCBR_PQp>(GetArena());
    _impl_.pqp_ = reinterpret_cast<::NvtCodecVencSettings_VencCBR_PQp*>(p);
  }
  return _impl_.pqp_;
}
inline ::NvtCodecVencSettings_VencCBR_PQp* NvtCodecVencSettings_VencCBR::mutable_pqp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::NvtCodecVencSettings_VencCBR_PQp* _msg = _internal_mutable_pqp();
  // @@protoc_insertion_point(field_mutable:NvtCodecVencSettings.VencCBR.pqp)
  return _msg;
}
inline void NvtCodecVencSettings_VencCBR::set_allocated_pqp(::NvtCodecVencSettings_VencCBR_PQp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.pqp_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.pqp_ = reinterpret_cast<::NvtCodecVencSettings_VencCBR_PQp*>(value);
  // @@protoc_insertion_point(field_set_allocated:NvtCodecVencSettings.VencCBR.pqp)
}

// int32 IPWeight = 7;
inline void NvtCodecVencSettings_VencCBR::clear_ipweight() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ipweight_ = 0;
}
inline ::int32_t NvtCodecVencSettings_VencCBR::ipweight() const {
  // @@protoc_insertion_point(field_get:NvtCodecVencSettings.VencCBR.IPWeight)
  return _internal_ipweight();
}
inline void NvtCodecVencSettings_VencCBR::set_ipweight(::int32_t value) {
  _internal_set_ipweight(value);
  // @@protoc_insertion_point(field_set:NvtCodecVencSettings.VencCBR.IPWeight)
}
inline ::int32_t NvtCodecVencSettings_VencCBR::_internal_ipweight() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ipweight_;
}
inline void NvtCodecVencSettings_VencCBR::_internal_set_ipweight(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ipweight_ = value;
}

// optional .NvtCodecVencSettings.VencCBR.RowRcSettings rowRcSettings = 8;
inline bool NvtCodecVencSettings_VencCBR::has_rowrcsettings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rowrcsettings_ != nullptr);
  return value;
}
inline void NvtCodecVencSettings_VencCBR::clear_rowrcsettings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.rowrcsettings_ != nullptr) _impl_.rowrcsettings_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::NvtCodecVencSettings_VencCBR_RowRcSettings& NvtCodecVencSettings_VencCBR::_internal_rowrcsettings() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::NvtCodecVencSettings_VencCBR_RowRcSettings* p = _impl_.rowrcsettings_;
  return p != nullptr ? *p : reinterpret_cast<const ::NvtCodecVencSettings_VencCBR_RowRcSettings&>(::_NvtCodecVencSettings_VencCBR_RowRcSettings_default_instance_);
}
inline const ::NvtCodecVencSettings_VencCBR_RowRcSettings& NvtCodecVencSettings_VencCBR::rowrcsettings() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NvtCodecVencSettings.VencCBR.rowRcSettings)
  return _internal_rowrcsettings();
}
inline void NvtCodecVencSettings_VencCBR::unsafe_arena_set_allocated_rowrcsettings(::NvtCodecVencSettings_VencCBR_RowRcSettings* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.rowrcsettings_);
  }
  _impl_.rowrcsettings_ = reinterpret_cast<::NvtCodecVencSettings_VencCBR_RowRcSettings*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NvtCodecVencSettings.VencCBR.rowRcSettings)
}
inline ::NvtCodecVencSettings_VencCBR_RowRcSettings* NvtCodecVencSettings_VencCBR::release_rowrcsettings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::NvtCodecVencSettings_VencCBR_RowRcSettings* released = _impl_.rowrcsettings_;
  _impl_.rowrcsettings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::NvtCodecVencSettings_VencCBR_RowRcSettings* NvtCodecVencSettings_VencCBR::unsafe_arena_release_rowrcsettings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:NvtCodecVencSettings.VencCBR.rowRcSettings)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::NvtCodecVencSettings_VencCBR_RowRcSettings* temp = _impl_.rowrcsettings_;
  _impl_.rowrcsettings_ = nullptr;
  return temp;
}
inline ::NvtCodecVencSettings_VencCBR_RowRcSettings* NvtCodecVencSettings_VencCBR::_internal_mutable_rowrcsettings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.rowrcsettings_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::NvtCodecVencSettings_VencCBR_RowRcSettings>(GetArena());
    _impl_.rowrcsettings_ = reinterpret_cast<::NvtCodecVencSettings_VencCBR_RowRcSettings*>(p);
  }
  return _impl_.rowrcsettings_;
}
inline ::NvtCodecVencSettings_VencCBR_RowRcSettings* NvtCodecVencSettings_VencCBR::mutable_rowrcsettings() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::NvtCodecVencSettings_VencCBR_RowRcSettings* _msg = _internal_mutable_rowrcsettings();
  // @@protoc_insertion_point(field_mutable:NvtCodecVencSettings.VencCBR.rowRcSettings)
  return _msg;
}
inline void NvtCodecVencSettings_VencCBR::set_allocated_rowrcsettings(::NvtCodecVencSettings_VencCBR_RowRcSettings* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.rowrcsettings_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.rowrcsettings_ = reinterpret_cast<::NvtCodecVencSettings_VencCBR_RowRcSettings*>(value);
  // @@protoc_insertion_point(field_set_allocated:NvtCodecVencSettings.VencCBR.rowRcSettings)
}

// -------------------------------------------------------------------

// NvtCodecVencSettings_VencVBR

// .NvtCodecVencSettings.VencCBR cbrSettings = 1;
inline bool NvtCodecVencSettings_VencVBR::has_cbrsettings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cbrsettings_ != nullptr);
  return value;
}
inline void NvtCodecVencSettings_VencVBR::clear_cbrsettings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.cbrsettings_ != nullptr) _impl_.cbrsettings_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::NvtCodecVencSettings_VencCBR& NvtCodecVencSettings_VencVBR::_internal_cbrsettings() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::NvtCodecVencSettings_VencCBR* p = _impl_.cbrsettings_;
  return p != nullptr ? *p : reinterpret_cast<const ::NvtCodecVencSettings_VencCBR&>(::_NvtCodecVencSettings_VencCBR_default_instance_);
}
inline const ::NvtCodecVencSettings_VencCBR& NvtCodecVencSettings_VencVBR::cbrsettings() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NvtCodecVencSettings.VencVBR.cbrSettings)
  return _internal_cbrsettings();
}
inline void NvtCodecVencSettings_VencVBR::unsafe_arena_set_allocated_cbrsettings(::NvtCodecVencSettings_VencCBR* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.cbrsettings_);
  }
  _impl_.cbrsettings_ = reinterpret_cast<::NvtCodecVencSettings_VencCBR*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NvtCodecVencSettings.VencVBR.cbrSettings)
}
inline ::NvtCodecVencSettings_VencCBR* NvtCodecVencSettings_VencVBR::release_cbrsettings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::NvtCodecVencSettings_VencCBR* released = _impl_.cbrsettings_;
  _impl_.cbrsettings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::NvtCodecVencSettings_VencCBR* NvtCodecVencSettings_VencVBR::unsafe_arena_release_cbrsettings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:NvtCodecVencSettings.VencVBR.cbrSettings)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::NvtCodecVencSettings_VencCBR* temp = _impl_.cbrsettings_;
  _impl_.cbrsettings_ = nullptr;
  return temp;
}
inline ::NvtCodecVencSettings_VencCBR* NvtCodecVencSettings_VencVBR::_internal_mutable_cbrsettings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.cbrsettings_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::NvtCodecVencSettings_VencCBR>(GetArena());
    _impl_.cbrsettings_ = reinterpret_cast<::NvtCodecVencSettings_VencCBR*>(p);
  }
  return _impl_.cbrsettings_;
}
inline ::NvtCodecVencSettings_VencCBR* NvtCodecVencSettings_VencVBR::mutable_cbrsettings() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::NvtCodecVencSettings_VencCBR* _msg = _internal_mutable_cbrsettings();
  // @@protoc_insertion_point(field_mutable:NvtCodecVencSettings.VencVBR.cbrSettings)
  return _msg;
}
inline void NvtCodecVencSettings_VencVBR::set_allocated_cbrsettings(::NvtCodecVencSettings_VencCBR* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.cbrsettings_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.cbrsettings_ = reinterpret_cast<::NvtCodecVencSettings_VencCBR*>(value);
  // @@protoc_insertion_point(field_set_allocated:NvtCodecVencSettings.VencVBR.cbrSettings)
}

// uint32 changePos = 2;
inline void NvtCodecVencSettings_VencVBR::clear_changepos() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.changepos_ = 0u;
}
inline ::uint32_t NvtCodecVencSettings_VencVBR::changepos() const {
  // @@protoc_insertion_point(field_get:NvtCodecVencSettings.VencVBR.changePos)
  return _internal_changepos();
}
inline void NvtCodecVencSettings_VencVBR::set_changepos(::uint32_t value) {
  _internal_set_changepos(value);
  // @@protoc_insertion_point(field_set:NvtCodecVencSettings.VencVBR.changePos)
}
inline ::uint32_t NvtCodecVencSettings_VencVBR::_internal_changepos() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.changepos_;
}
inline void NvtCodecVencSettings_VencVBR::_internal_set_changepos(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.changepos_ = value;
}

// -------------------------------------------------------------------

// NvtCodecVencSettings_VencEVBR

// .NvtCodecVencSettings.VencCBR cbrSettings = 1;
inline bool NvtCodecVencSettings_VencEVBR::has_cbrsettings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cbrsettings_ != nullptr);
  return value;
}
inline void NvtCodecVencSettings_VencEVBR::clear_cbrsettings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.cbrsettings_ != nullptr) _impl_.cbrsettings_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::NvtCodecVencSettings_VencCBR& NvtCodecVencSettings_VencEVBR::_internal_cbrsettings() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::NvtCodecVencSettings_VencCBR* p = _impl_.cbrsettings_;
  return p != nullptr ? *p : reinterpret_cast<const ::NvtCodecVencSettings_VencCBR&>(::_NvtCodecVencSettings_VencCBR_default_instance_);
}
inline const ::NvtCodecVencSettings_VencCBR& NvtCodecVencSettings_VencEVBR::cbrsettings() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NvtCodecVencSettings.VencEVBR.cbrSettings)
  return _internal_cbrsettings();
}
inline void NvtCodecVencSettings_VencEVBR::unsafe_arena_set_allocated_cbrsettings(::NvtCodecVencSettings_VencCBR* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.cbrsettings_);
  }
  _impl_.cbrsettings_ = reinterpret_cast<::NvtCodecVencSettings_VencCBR*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NvtCodecVencSettings.VencEVBR.cbrSettings)
}
inline ::NvtCodecVencSettings_VencCBR* NvtCodecVencSettings_VencEVBR::release_cbrsettings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::NvtCodecVencSettings_VencCBR* released = _impl_.cbrsettings_;
  _impl_.cbrsettings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::NvtCodecVencSettings_VencCBR* NvtCodecVencSettings_VencEVBR::unsafe_arena_release_cbrsettings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:NvtCodecVencSettings.VencEVBR.cbrSettings)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::NvtCodecVencSettings_VencCBR* temp = _impl_.cbrsettings_;
  _impl_.cbrsettings_ = nullptr;
  return temp;
}
inline ::NvtCodecVencSettings_VencCBR* NvtCodecVencSettings_VencEVBR::_internal_mutable_cbrsettings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.cbrsettings_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::NvtCodecVencSettings_VencCBR>(GetArena());
    _impl_.cbrsettings_ = reinterpret_cast<::NvtCodecVencSettings_VencCBR*>(p);
  }
  return _impl_.cbrsettings_;
}
inline ::NvtCodecVencSettings_VencCBR* NvtCodecVencSettings_VencEVBR::mutable_cbrsettings() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::NvtCodecVencSettings_VencCBR* _msg = _internal_mutable_cbrsettings();
  // @@protoc_insertion_point(field_mutable:NvtCodecVencSettings.VencEVBR.cbrSettings)
  return _msg;
}
inline void NvtCodecVencSettings_VencEVBR::set_allocated_cbrsettings(::NvtCodecVencSettings_VencCBR* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.cbrsettings_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.cbrsettings_ = reinterpret_cast<::NvtCodecVencSettings_VencCBR*>(value);
  // @@protoc_insertion_point(field_set_allocated:NvtCodecVencSettings.VencEVBR.cbrSettings)
}

// int32 keyPPeriod = 2;
inline void NvtCodecVencSettings_VencEVBR::clear_keypperiod() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.keypperiod_ = 0;
}
inline ::int32_t NvtCodecVencSettings_VencEVBR::keypperiod() const {
  // @@protoc_insertion_point(field_get:NvtCodecVencSettings.VencEVBR.keyPPeriod)
  return _internal_keypperiod();
}
inline void NvtCodecVencSettings_VencEVBR::set_keypperiod(::int32_t value) {
  _internal_set_keypperiod(value);
  // @@protoc_insertion_point(field_set:NvtCodecVencSettings.VencEVBR.keyPPeriod)
}
inline ::int32_t NvtCodecVencSettings_VencEVBR::_internal_keypperiod() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.keypperiod_;
}
inline void NvtCodecVencSettings_VencEVBR::_internal_set_keypperiod(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.keypperiod_ = value;
}

// int32 keyPWeight = 3;
inline void NvtCodecVencSettings_VencEVBR::clear_keypweight() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.keypweight_ = 0;
}
inline ::int32_t NvtCodecVencSettings_VencEVBR::keypweight() const {
  // @@protoc_insertion_point(field_get:NvtCodecVencSettings.VencEVBR.keyPWeight)
  return _internal_keypweight();
}
inline void NvtCodecVencSettings_VencEVBR::set_keypweight(::int32_t value) {
  _internal_set_keypweight(value);
  // @@protoc_insertion_point(field_set:NvtCodecVencSettings.VencEVBR.keyPWeight)
}
inline ::int32_t NvtCodecVencSettings_VencEVBR::_internal_keypweight() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.keypweight_;
}
inline void NvtCodecVencSettings_VencEVBR::_internal_set_keypweight(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.keypweight_ = value;
}

// int32 motionAQStrength = 4;
inline void NvtCodecVencSettings_VencEVBR::clear_motionaqstrength() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.motionaqstrength_ = 0;
}
inline ::int32_t NvtCodecVencSettings_VencEVBR::motionaqstrength() const {
  // @@protoc_insertion_point(field_get:NvtCodecVencSettings.VencEVBR.motionAQStrength)
  return _internal_motionaqstrength();
}
inline void NvtCodecVencSettings_VencEVBR::set_motionaqstrength(::int32_t value) {
  _internal_set_motionaqstrength(value);
  // @@protoc_insertion_point(field_set:NvtCodecVencSettings.VencEVBR.motionAQStrength)
}
inline ::int32_t NvtCodecVencSettings_VencEVBR::_internal_motionaqstrength() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.motionaqstrength_;
}
inline void NvtCodecVencSettings_VencEVBR::_internal_set_motionaqstrength(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.motionaqstrength_ = value;
}

// uint32 stillFrameCnt = 5;
inline void NvtCodecVencSettings_VencEVBR::clear_stillframecnt() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.stillframecnt_ = 0u;
}
inline ::uint32_t NvtCodecVencSettings_VencEVBR::stillframecnt() const {
  // @@protoc_insertion_point(field_get:NvtCodecVencSettings.VencEVBR.stillFrameCnt)
  return _internal_stillframecnt();
}
inline void NvtCodecVencSettings_VencEVBR::set_stillframecnt(::uint32_t value) {
  _internal_set_stillframecnt(value);
  // @@protoc_insertion_point(field_set:NvtCodecVencSettings.VencEVBR.stillFrameCnt)
}
inline ::uint32_t NvtCodecVencSettings_VencEVBR::_internal_stillframecnt() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.stillframecnt_;
}
inline void NvtCodecVencSettings_VencEVBR::_internal_set_stillframecnt(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.stillframecnt_ = value;
}

// uint32 motionRatioThd = 6;
inline void NvtCodecVencSettings_VencEVBR::clear_motionratiothd() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.motionratiothd_ = 0u;
}
inline ::uint32_t NvtCodecVencSettings_VencEVBR::motionratiothd() const {
  // @@protoc_insertion_point(field_get:NvtCodecVencSettings.VencEVBR.motionRatioThd)
  return _internal_motionratiothd();
}
inline void NvtCodecVencSettings_VencEVBR::set_motionratiothd(::uint32_t value) {
  _internal_set_motionratiothd(value);
  // @@protoc_insertion_point(field_set:NvtCodecVencSettings.VencEVBR.motionRatioThd)
}
inline ::uint32_t NvtCodecVencSettings_VencEVBR::_internal_motionratiothd() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.motionratiothd_;
}
inline void NvtCodecVencSettings_VencEVBR::_internal_set_motionratiothd(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.motionratiothd_ = value;
}

// uint32 IPsnrCnd = 7;
inline void NvtCodecVencSettings_VencEVBR::clear_ipsnrcnd() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ipsnrcnd_ = 0u;
}
inline ::uint32_t NvtCodecVencSettings_VencEVBR::ipsnrcnd() const {
  // @@protoc_insertion_point(field_get:NvtCodecVencSettings.VencEVBR.IPsnrCnd)
  return _internal_ipsnrcnd();
}
inline void NvtCodecVencSettings_VencEVBR::set_ipsnrcnd(::uint32_t value) {
  _internal_set_ipsnrcnd(value);
  // @@protoc_insertion_point(field_set:NvtCodecVencSettings.VencEVBR.IPsnrCnd)
}
inline ::uint32_t NvtCodecVencSettings_VencEVBR::_internal_ipsnrcnd() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ipsnrcnd_;
}
inline void NvtCodecVencSettings_VencEVBR::_internal_set_ipsnrcnd(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ipsnrcnd_ = value;
}

// uint32 PPsnrCnd = 8;
inline void NvtCodecVencSettings_VencEVBR::clear_ppsnrcnd() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ppsnrcnd_ = 0u;
}
inline ::uint32_t NvtCodecVencSettings_VencEVBR::ppsnrcnd() const {
  // @@protoc_insertion_point(field_get:NvtCodecVencSettings.VencEVBR.PPsnrCnd)
  return _internal_ppsnrcnd();
}
inline void NvtCodecVencSettings_VencEVBR::set_ppsnrcnd(::uint32_t value) {
  _internal_set_ppsnrcnd(value);
  // @@protoc_insertion_point(field_set:NvtCodecVencSettings.VencEVBR.PPsnrCnd)
}
inline ::uint32_t NvtCodecVencSettings_VencEVBR::_internal_ppsnrcnd() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ppsnrcnd_;
}
inline void NvtCodecVencSettings_VencEVBR::_internal_set_ppsnrcnd(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ppsnrcnd_ = value;
}

// uint32 KeyPPsnrCnd = 9;
inline void NvtCodecVencSettings_VencEVBR::clear_keyppsnrcnd() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.keyppsnrcnd_ = 0u;
}
inline ::uint32_t NvtCodecVencSettings_VencEVBR::keyppsnrcnd() const {
  // @@protoc_insertion_point(field_get:NvtCodecVencSettings.VencEVBR.KeyPPsnrCnd)
  return _internal_keyppsnrcnd();
}
inline void NvtCodecVencSettings_VencEVBR::set_keyppsnrcnd(::uint32_t value) {
  _internal_set_keyppsnrcnd(value);
  // @@protoc_insertion_point(field_set:NvtCodecVencSettings.VencEVBR.KeyPPsnrCnd)
}
inline ::uint32_t NvtCodecVencSettings_VencEVBR::_internal_keyppsnrcnd() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.keyppsnrcnd_;
}
inline void NvtCodecVencSettings_VencEVBR::_internal_set_keyppsnrcnd(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.keyppsnrcnd_ = value;
}

// -------------------------------------------------------------------

// NvtCodecVencSettings_VencNoneBRC

// uint32 frameRate = 1;
inline void NvtCodecVencSettings_VencNoneBRC::clear_framerate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.framerate_ = 0u;
}
inline ::uint32_t NvtCodecVencSettings_VencNoneBRC::framerate() const {
  // @@protoc_insertion_point(field_get:NvtCodecVencSettings.VencNoneBRC.frameRate)
  return _internal_framerate();
}
inline void NvtCodecVencSettings_VencNoneBRC::set_framerate(::uint32_t value) {
  _internal_set_framerate(value);
  // @@protoc_insertion_point(field_set:NvtCodecVencSettings.VencNoneBRC.frameRate)
}
inline ::uint32_t NvtCodecVencSettings_VencNoneBRC::_internal_framerate() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.framerate_;
}
inline void NvtCodecVencSettings_VencNoneBRC::_internal_set_framerate(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.framerate_ = value;
}

// uint32 gop = 2;
inline void NvtCodecVencSettings_VencNoneBRC::clear_gop() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.gop_ = 0u;
}
inline ::uint32_t NvtCodecVencSettings_VencNoneBRC::gop() const {
  // @@protoc_insertion_point(field_get:NvtCodecVencSettings.VencNoneBRC.gop)
  return _internal_gop();
}
inline void NvtCodecVencSettings_VencNoneBRC::set_gop(::uint32_t value) {
  _internal_set_gop(value);
  // @@protoc_insertion_point(field_set:NvtCodecVencSettings.VencNoneBRC.gop)
}
inline ::uint32_t NvtCodecVencSettings_VencNoneBRC::_internal_gop() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.gop_;
}
inline void NvtCodecVencSettings_VencNoneBRC::_internal_set_gop(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.gop_ = value;
}

// uint32 byterate = 3;
inline void NvtCodecVencSettings_VencNoneBRC::clear_byterate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.byterate_ = 0u;
}
inline ::uint32_t NvtCodecVencSettings_VencNoneBRC::byterate() const {
  // @@protoc_insertion_point(field_get:NvtCodecVencSettings.VencNoneBRC.byterate)
  return _internal_byterate();
}
inline void NvtCodecVencSettings_VencNoneBRC::set_byterate(::uint32_t value) {
  _internal_set_byterate(value);
  // @@protoc_insertion_point(field_set:NvtCodecVencSettings.VencNoneBRC.byterate)
}
inline ::uint32_t NvtCodecVencSettings_VencNoneBRC::_internal_byterate() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.byterate_;
}
inline void NvtCodecVencSettings_VencNoneBRC::_internal_set_byterate(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.byterate_ = value;
}

// -------------------------------------------------------------------

// NvtCodecVencSettings_VencFIXQP

// uint32 byterate = 1;
inline void NvtCodecVencSettings_VencFIXQP::clear_byterate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.byterate_ = 0u;
}
inline ::uint32_t NvtCodecVencSettings_VencFIXQP::byterate() const {
  // @@protoc_insertion_point(field_get:NvtCodecVencSettings.VencFIXQP.byterate)
  return _internal_byterate();
}
inline void NvtCodecVencSettings_VencFIXQP::set_byterate(::uint32_t value) {
  _internal_set_byterate(value);
  // @@protoc_insertion_point(field_set:NvtCodecVencSettings.VencFIXQP.byterate)
}
inline ::uint32_t NvtCodecVencSettings_VencFIXQP::_internal_byterate() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.byterate_;
}
inline void NvtCodecVencSettings_VencFIXQP::_internal_set_byterate(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.byterate_ = value;
}

// uint32 framerate = 2;
inline void NvtCodecVencSettings_VencFIXQP::clear_framerate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.framerate_ = 0u;
}
inline ::uint32_t NvtCodecVencSettings_VencFIXQP::framerate() const {
  // @@protoc_insertion_point(field_get:NvtCodecVencSettings.VencFIXQP.framerate)
  return _internal_framerate();
}
inline void NvtCodecVencSettings_VencFIXQP::set_framerate(::uint32_t value) {
  _internal_set_framerate(value);
  // @@protoc_insertion_point(field_set:NvtCodecVencSettings.VencFIXQP.framerate)
}
inline ::uint32_t NvtCodecVencSettings_VencFIXQP::_internal_framerate() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.framerate_;
}
inline void NvtCodecVencSettings_VencFIXQP::_internal_set_framerate(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.framerate_ = value;
}

// uint32 gop = 3;
inline void NvtCodecVencSettings_VencFIXQP::clear_gop() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.gop_ = 0u;
}
inline ::uint32_t NvtCodecVencSettings_VencFIXQP::gop() const {
  // @@protoc_insertion_point(field_get:NvtCodecVencSettings.VencFIXQP.gop)
  return _internal_gop();
}
inline void NvtCodecVencSettings_VencFIXQP::set_gop(::uint32_t value) {
  _internal_set_gop(value);
  // @@protoc_insertion_point(field_set:NvtCodecVencSettings.VencFIXQP.gop)
}
inline ::uint32_t NvtCodecVencSettings_VencFIXQP::_internal_gop() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.gop_;
}
inline void NvtCodecVencSettings_VencFIXQP::_internal_set_gop(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.gop_ = value;
}

// uint32 IFixQP = 4;
inline void NvtCodecVencSettings_VencFIXQP::clear_ifixqp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ifixqp_ = 0u;
}
inline ::uint32_t NvtCodecVencSettings_VencFIXQP::ifixqp() const {
  // @@protoc_insertion_point(field_get:NvtCodecVencSettings.VencFIXQP.IFixQP)
  return _internal_ifixqp();
}
inline void NvtCodecVencSettings_VencFIXQP::set_ifixqp(::uint32_t value) {
  _internal_set_ifixqp(value);
  // @@protoc_insertion_point(field_set:NvtCodecVencSettings.VencFIXQP.IFixQP)
}
inline ::uint32_t NvtCodecVencSettings_VencFIXQP::_internal_ifixqp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ifixqp_;
}
inline void NvtCodecVencSettings_VencFIXQP::_internal_set_ifixqp(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ifixqp_ = value;
}

// uint32 PFixQP = 5;
inline void NvtCodecVencSettings_VencFIXQP::clear_pfixqp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pfixqp_ = 0u;
}
inline ::uint32_t NvtCodecVencSettings_VencFIXQP::pfixqp() const {
  // @@protoc_insertion_point(field_get:NvtCodecVencSettings.VencFIXQP.PFixQP)
  return _internal_pfixqp();
}
inline void NvtCodecVencSettings_VencFIXQP::set_pfixqp(::uint32_t value) {
  _internal_set_pfixqp(value);
  // @@protoc_insertion_point(field_set:NvtCodecVencSettings.VencFIXQP.PFixQP)
}
inline ::uint32_t NvtCodecVencSettings_VencFIXQP::_internal_pfixqp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pfixqp_;
}
inline void NvtCodecVencSettings_VencFIXQP::_internal_set_pfixqp(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pfixqp_ = value;
}

// -------------------------------------------------------------------

// NvtCodecVencSettings_AQSettings

// uint32 aqStr = 1;
inline void NvtCodecVencSettings_AQSettings::clear_aqstr() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.aqstr_ = 0u;
}
inline ::uint32_t NvtCodecVencSettings_AQSettings::aqstr() const {
  // @@protoc_insertion_point(field_get:NvtCodecVencSettings.AQSettings.aqStr)
  return _internal_aqstr();
}
inline void NvtCodecVencSettings_AQSettings::set_aqstr(::uint32_t value) {
  _internal_set_aqstr(value);
  // @@protoc_insertion_point(field_set:NvtCodecVencSettings.AQSettings.aqStr)
}
inline ::uint32_t NvtCodecVencSettings_AQSettings::_internal_aqstr() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.aqstr_;
}
inline void NvtCodecVencSettings_AQSettings::_internal_set_aqstr(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.aqstr_ = value;
}

// int32 sraqInitAslog2 = 2;
inline void NvtCodecVencSettings_AQSettings::clear_sraqinitaslog2() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sraqinitaslog2_ = 0;
}
inline ::int32_t NvtCodecVencSettings_AQSettings::sraqinitaslog2() const {
  // @@protoc_insertion_point(field_get:NvtCodecVencSettings.AQSettings.sraqInitAslog2)
  return _internal_sraqinitaslog2();
}
inline void NvtCodecVencSettings_AQSettings::set_sraqinitaslog2(::int32_t value) {
  _internal_set_sraqinitaslog2(value);
  // @@protoc_insertion_point(field_set:NvtCodecVencSettings.AQSettings.sraqInitAslog2)
}
inline ::int32_t NvtCodecVencSettings_AQSettings::_internal_sraqinitaslog2() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sraqinitaslog2_;
}
inline void NvtCodecVencSettings_AQSettings::_internal_set_sraqinitaslog2(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sraqinitaslog2_ = value;
}

// int32 maxSraq = 3;
inline void NvtCodecVencSettings_AQSettings::clear_maxsraq() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.maxsraq_ = 0;
}
inline ::int32_t NvtCodecVencSettings_AQSettings::maxsraq() const {
  // @@protoc_insertion_point(field_get:NvtCodecVencSettings.AQSettings.maxSraq)
  return _internal_maxsraq();
}
inline void NvtCodecVencSettings_AQSettings::set_maxsraq(::int32_t value) {
  _internal_set_maxsraq(value);
  // @@protoc_insertion_point(field_set:NvtCodecVencSettings.AQSettings.maxSraq)
}
inline ::int32_t NvtCodecVencSettings_AQSettings::_internal_maxsraq() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.maxsraq_;
}
inline void NvtCodecVencSettings_AQSettings::_internal_set_maxsraq(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.maxsraq_ = value;
}

// int32 minSraq = 4;
inline void NvtCodecVencSettings_AQSettings::clear_minsraq() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.minsraq_ = 0;
}
inline ::int32_t NvtCodecVencSettings_AQSettings::minsraq() const {
  // @@protoc_insertion_point(field_get:NvtCodecVencSettings.AQSettings.minSraq)
  return _internal_minsraq();
}
inline void NvtCodecVencSettings_AQSettings::set_minsraq(::int32_t value) {
  _internal_set_minsraq(value);
  // @@protoc_insertion_point(field_set:NvtCodecVencSettings.AQSettings.minSraq)
}
inline ::int32_t NvtCodecVencSettings_AQSettings::_internal_minsraq() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.minsraq_;
}
inline void NvtCodecVencSettings_AQSettings::_internal_set_minsraq(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.minsraq_ = value;
}

// int32 sraqConstAslog2 = 5;
inline void NvtCodecVencSettings_AQSettings::clear_sraqconstaslog2() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sraqconstaslog2_ = 0;
}
inline ::int32_t NvtCodecVencSettings_AQSettings::sraqconstaslog2() const {
  // @@protoc_insertion_point(field_get:NvtCodecVencSettings.AQSettings.sraqConstAslog2)
  return _internal_sraqconstaslog2();
}
inline void NvtCodecVencSettings_AQSettings::set_sraqconstaslog2(::int32_t value) {
  _internal_set_sraqconstaslog2(value);
  // @@protoc_insertion_point(field_set:NvtCodecVencSettings.AQSettings.sraqConstAslog2)
}
inline ::int32_t NvtCodecVencSettings_AQSettings::_internal_sraqconstaslog2() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sraqconstaslog2_;
}
inline void NvtCodecVencSettings_AQSettings::_internal_set_sraqconstaslog2(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sraqconstaslog2_ = value;
}

// -------------------------------------------------------------------

// NvtCodecVencSettings_LTRSettings

// uint32 interval = 1;
inline void NvtCodecVencSettings_LTRSettings::clear_interval() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.interval_ = 0u;
}
inline ::uint32_t NvtCodecVencSettings_LTRSettings::interval() const {
  // @@protoc_insertion_point(field_get:NvtCodecVencSettings.LTRSettings.interval)
  return _internal_interval();
}
inline void NvtCodecVencSettings_LTRSettings::set_interval(::uint32_t value) {
  _internal_set_interval(value);
  // @@protoc_insertion_point(field_set:NvtCodecVencSettings.LTRSettings.interval)
}
inline ::uint32_t NvtCodecVencSettings_LTRSettings::_internal_interval() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.interval_;
}
inline void NvtCodecVencSettings_LTRSettings::_internal_set_interval(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.interval_ = value;
}

// uint32 preRef = 2;
inline void NvtCodecVencSettings_LTRSettings::clear_preref() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.preref_ = 0u;
}
inline ::uint32_t NvtCodecVencSettings_LTRSettings::preref() const {
  // @@protoc_insertion_point(field_get:NvtCodecVencSettings.LTRSettings.preRef)
  return _internal_preref();
}
inline void NvtCodecVencSettings_LTRSettings::set_preref(::uint32_t value) {
  _internal_set_preref(value);
  // @@protoc_insertion_point(field_set:NvtCodecVencSettings.LTRSettings.preRef)
}
inline ::uint32_t NvtCodecVencSettings_LTRSettings::_internal_preref() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.preref_;
}
inline void NvtCodecVencSettings_LTRSettings::_internal_set_preref(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.preref_ = value;
}

// -------------------------------------------------------------------

// NvtCodecVencSettings

// uint32 VencNum = 1;
inline void NvtCodecVencSettings::clear_vencnum() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.vencnum_ = 0u;
}
inline ::uint32_t NvtCodecVencSettings::vencnum() const {
  // @@protoc_insertion_point(field_get:NvtCodecVencSettings.VencNum)
  return _internal_vencnum();
}
inline void NvtCodecVencSettings::set_vencnum(::uint32_t value) {
  _internal_set_vencnum(value);
  // @@protoc_insertion_point(field_set:NvtCodecVencSettings.VencNum)
}
inline ::uint32_t NvtCodecVencSettings::_internal_vencnum() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.vencnum_;
}
inline void NvtCodecVencSettings::_internal_set_vencnum(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.vencnum_ = value;
}

// .NvtCodecVencSettings.InputSource eInputSource = 2;
inline void NvtCodecVencSettings::clear_einputsource() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.einputsource_ = 0;
}
inline ::NvtCodecVencSettings_InputSource NvtCodecVencSettings::einputsource() const {
  // @@protoc_insertion_point(field_get:NvtCodecVencSettings.eInputSource)
  return _internal_einputsource();
}
inline void NvtCodecVencSettings::set_einputsource(::NvtCodecVencSettings_InputSource value) {
  _internal_set_einputsource(value);
  // @@protoc_insertion_point(field_set:NvtCodecVencSettings.eInputSource)
}
inline ::NvtCodecVencSettings_InputSource NvtCodecVencSettings::_internal_einputsource() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::NvtCodecVencSettings_InputSource>(_impl_.einputsource_);
}
inline void NvtCodecVencSettings::_internal_set_einputsource(::NvtCodecVencSettings_InputSource value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.einputsource_ = value;
}

// .NvtCodecVencSettings.Format eFormat = 3;
inline void NvtCodecVencSettings::clear_eformat() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.eformat_ = 0;
}
inline ::NvtCodecVencSettings_Format NvtCodecVencSettings::eformat() const {
  // @@protoc_insertion_point(field_get:NvtCodecVencSettings.eFormat)
  return _internal_eformat();
}
inline void NvtCodecVencSettings::set_eformat(::NvtCodecVencSettings_Format value) {
  _internal_set_eformat(value);
  // @@protoc_insertion_point(field_set:NvtCodecVencSettings.eFormat)
}
inline ::NvtCodecVencSettings_Format NvtCodecVencSettings::_internal_eformat() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::NvtCodecVencSettings_Format>(_impl_.eformat_);
}
inline void NvtCodecVencSettings::_internal_set_eformat(::NvtCodecVencSettings_Format value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.eformat_ = value;
}

// optional .NvtCodecVencSettings.Profile eProfile = 4;
inline bool NvtCodecVencSettings::has_eprofile() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void NvtCodecVencSettings::clear_eprofile() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.eprofile_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::NvtCodecVencSettings_Profile NvtCodecVencSettings::eprofile() const {
  // @@protoc_insertion_point(field_get:NvtCodecVencSettings.eProfile)
  return _internal_eprofile();
}
inline void NvtCodecVencSettings::set_eprofile(::NvtCodecVencSettings_Profile value) {
  _internal_set_eprofile(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:NvtCodecVencSettings.eProfile)
}
inline ::NvtCodecVencSettings_Profile NvtCodecVencSettings::_internal_eprofile() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::NvtCodecVencSettings_Profile>(_impl_.eprofile_);
}
inline void NvtCodecVencSettings::_internal_set_eprofile(::NvtCodecVencSettings_Profile value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.eprofile_ = value;
}

// uint32 TargetWidth = 5;
inline void NvtCodecVencSettings::clear_targetwidth() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.targetwidth_ = 0u;
}
inline ::uint32_t NvtCodecVencSettings::targetwidth() const {
  // @@protoc_insertion_point(field_get:NvtCodecVencSettings.TargetWidth)
  return _internal_targetwidth();
}
inline void NvtCodecVencSettings::set_targetwidth(::uint32_t value) {
  _internal_set_targetwidth(value);
  // @@protoc_insertion_point(field_set:NvtCodecVencSettings.TargetWidth)
}
inline ::uint32_t NvtCodecVencSettings::_internal_targetwidth() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.targetwidth_;
}
inline void NvtCodecVencSettings::_internal_set_targetwidth(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.targetwidth_ = value;
}

// uint32 TargetHeight = 6;
inline void NvtCodecVencSettings::clear_targetheight() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.targetheight_ = 0u;
}
inline ::uint32_t NvtCodecVencSettings::targetheight() const {
  // @@protoc_insertion_point(field_get:NvtCodecVencSettings.TargetHeight)
  return _internal_targetheight();
}
inline void NvtCodecVencSettings::set_targetheight(::uint32_t value) {
  _internal_set_targetheight(value);
  // @@protoc_insertion_point(field_set:NvtCodecVencSettings.TargetHeight)
}
inline ::uint32_t NvtCodecVencSettings::_internal_targetheight() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.targetheight_;
}
inline void NvtCodecVencSettings::_internal_set_targetheight(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.targetheight_ = value;
}

// .NvtCodecVencSettings.VencNoneBRC noneBrcSettings = 8;
inline bool NvtCodecVencSettings::has_nonebrcsettings() const {
  return brcType_case() == kNoneBrcSettings;
}
inline bool NvtCodecVencSettings::_internal_has_nonebrcsettings() const {
  return brcType_case() == kNoneBrcSettings;
}
inline void NvtCodecVencSettings::set_has_nonebrcsettings() {
  _impl_._oneof_case_[0] = kNoneBrcSettings;
}
inline void NvtCodecVencSettings::clear_nonebrcsettings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (brcType_case() == kNoneBrcSettings) {
    if (GetArena() == nullptr) {
      delete _impl_.brcType_.nonebrcsettings_;
    }
    clear_has_brcType();
  }
}
inline ::NvtCodecVencSettings_VencNoneBRC* NvtCodecVencSettings::release_nonebrcsettings() {
  // @@protoc_insertion_point(field_release:NvtCodecVencSettings.noneBrcSettings)
  if (brcType_case() == kNoneBrcSettings) {
    clear_has_brcType();
    auto* temp = _impl_.brcType_.nonebrcsettings_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.brcType_.nonebrcsettings_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::NvtCodecVencSettings_VencNoneBRC& NvtCodecVencSettings::_internal_nonebrcsettings() const {
  return brcType_case() == kNoneBrcSettings ? *_impl_.brcType_.nonebrcsettings_ : reinterpret_cast<::NvtCodecVencSettings_VencNoneBRC&>(::_NvtCodecVencSettings_VencNoneBRC_default_instance_);
}
inline const ::NvtCodecVencSettings_VencNoneBRC& NvtCodecVencSettings::nonebrcsettings() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NvtCodecVencSettings.noneBrcSettings)
  return _internal_nonebrcsettings();
}
inline ::NvtCodecVencSettings_VencNoneBRC* NvtCodecVencSettings::unsafe_arena_release_nonebrcsettings() {
  // @@protoc_insertion_point(field_unsafe_arena_release:NvtCodecVencSettings.noneBrcSettings)
  if (brcType_case() == kNoneBrcSettings) {
    clear_has_brcType();
    auto* temp = _impl_.brcType_.nonebrcsettings_;
    _impl_.brcType_.nonebrcsettings_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void NvtCodecVencSettings::unsafe_arena_set_allocated_nonebrcsettings(::NvtCodecVencSettings_VencNoneBRC* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_brcType();
  if (value) {
    set_has_nonebrcsettings();
    _impl_.brcType_.nonebrcsettings_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NvtCodecVencSettings.noneBrcSettings)
}
inline ::NvtCodecVencSettings_VencNoneBRC* NvtCodecVencSettings::_internal_mutable_nonebrcsettings() {
  if (brcType_case() != kNoneBrcSettings) {
    clear_brcType();
    set_has_nonebrcsettings();
    _impl_.brcType_.nonebrcsettings_ =
        ::google::protobuf::Message::DefaultConstruct<::NvtCodecVencSettings_VencNoneBRC>(GetArena());
  }
  return _impl_.brcType_.nonebrcsettings_;
}
inline ::NvtCodecVencSettings_VencNoneBRC* NvtCodecVencSettings::mutable_nonebrcsettings() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::NvtCodecVencSettings_VencNoneBRC* _msg = _internal_mutable_nonebrcsettings();
  // @@protoc_insertion_point(field_mutable:NvtCodecVencSettings.noneBrcSettings)
  return _msg;
}

// .NvtCodecVencSettings.VencCBR CBRSettings = 9;
inline bool NvtCodecVencSettings::has_cbrsettings() const {
  return brcType_case() == kCBRSettings;
}
inline bool NvtCodecVencSettings::_internal_has_cbrsettings() const {
  return brcType_case() == kCBRSettings;
}
inline void NvtCodecVencSettings::set_has_cbrsettings() {
  _impl_._oneof_case_[0] = kCBRSettings;
}
inline void NvtCodecVencSettings::clear_cbrsettings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (brcType_case() == kCBRSettings) {
    if (GetArena() == nullptr) {
      delete _impl_.brcType_.cbrsettings_;
    }
    clear_has_brcType();
  }
}
inline ::NvtCodecVencSettings_VencCBR* NvtCodecVencSettings::release_cbrsettings() {
  // @@protoc_insertion_point(field_release:NvtCodecVencSettings.CBRSettings)
  if (brcType_case() == kCBRSettings) {
    clear_has_brcType();
    auto* temp = _impl_.brcType_.cbrsettings_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.brcType_.cbrsettings_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::NvtCodecVencSettings_VencCBR& NvtCodecVencSettings::_internal_cbrsettings() const {
  return brcType_case() == kCBRSettings ? *_impl_.brcType_.cbrsettings_ : reinterpret_cast<::NvtCodecVencSettings_VencCBR&>(::_NvtCodecVencSettings_VencCBR_default_instance_);
}
inline const ::NvtCodecVencSettings_VencCBR& NvtCodecVencSettings::cbrsettings() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NvtCodecVencSettings.CBRSettings)
  return _internal_cbrsettings();
}
inline ::NvtCodecVencSettings_VencCBR* NvtCodecVencSettings::unsafe_arena_release_cbrsettings() {
  // @@protoc_insertion_point(field_unsafe_arena_release:NvtCodecVencSettings.CBRSettings)
  if (brcType_case() == kCBRSettings) {
    clear_has_brcType();
    auto* temp = _impl_.brcType_.cbrsettings_;
    _impl_.brcType_.cbrsettings_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void NvtCodecVencSettings::unsafe_arena_set_allocated_cbrsettings(::NvtCodecVencSettings_VencCBR* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_brcType();
  if (value) {
    set_has_cbrsettings();
    _impl_.brcType_.cbrsettings_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NvtCodecVencSettings.CBRSettings)
}
inline ::NvtCodecVencSettings_VencCBR* NvtCodecVencSettings::_internal_mutable_cbrsettings() {
  if (brcType_case() != kCBRSettings) {
    clear_brcType();
    set_has_cbrsettings();
    _impl_.brcType_.cbrsettings_ =
        ::google::protobuf::Message::DefaultConstruct<::NvtCodecVencSettings_VencCBR>(GetArena());
  }
  return _impl_.brcType_.cbrsettings_;
}
inline ::NvtCodecVencSettings_VencCBR* NvtCodecVencSettings::mutable_cbrsettings() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::NvtCodecVencSettings_VencCBR* _msg = _internal_mutable_cbrsettings();
  // @@protoc_insertion_point(field_mutable:NvtCodecVencSettings.CBRSettings)
  return _msg;
}

// .NvtCodecVencSettings.VencVBR VBRSettings = 10;
inline bool NvtCodecVencSettings::has_vbrsettings() const {
  return brcType_case() == kVBRSettings;
}
inline bool NvtCodecVencSettings::_internal_has_vbrsettings() const {
  return brcType_case() == kVBRSettings;
}
inline void NvtCodecVencSettings::set_has_vbrsettings() {
  _impl_._oneof_case_[0] = kVBRSettings;
}
inline void NvtCodecVencSettings::clear_vbrsettings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (brcType_case() == kVBRSettings) {
    if (GetArena() == nullptr) {
      delete _impl_.brcType_.vbrsettings_;
    }
    clear_has_brcType();
  }
}
inline ::NvtCodecVencSettings_VencVBR* NvtCodecVencSettings::release_vbrsettings() {
  // @@protoc_insertion_point(field_release:NvtCodecVencSettings.VBRSettings)
  if (brcType_case() == kVBRSettings) {
    clear_has_brcType();
    auto* temp = _impl_.brcType_.vbrsettings_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.brcType_.vbrsettings_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::NvtCodecVencSettings_VencVBR& NvtCodecVencSettings::_internal_vbrsettings() const {
  return brcType_case() == kVBRSettings ? *_impl_.brcType_.vbrsettings_ : reinterpret_cast<::NvtCodecVencSettings_VencVBR&>(::_NvtCodecVencSettings_VencVBR_default_instance_);
}
inline const ::NvtCodecVencSettings_VencVBR& NvtCodecVencSettings::vbrsettings() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NvtCodecVencSettings.VBRSettings)
  return _internal_vbrsettings();
}
inline ::NvtCodecVencSettings_VencVBR* NvtCodecVencSettings::unsafe_arena_release_vbrsettings() {
  // @@protoc_insertion_point(field_unsafe_arena_release:NvtCodecVencSettings.VBRSettings)
  if (brcType_case() == kVBRSettings) {
    clear_has_brcType();
    auto* temp = _impl_.brcType_.vbrsettings_;
    _impl_.brcType_.vbrsettings_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void NvtCodecVencSettings::unsafe_arena_set_allocated_vbrsettings(::NvtCodecVencSettings_VencVBR* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_brcType();
  if (value) {
    set_has_vbrsettings();
    _impl_.brcType_.vbrsettings_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NvtCodecVencSettings.VBRSettings)
}
inline ::NvtCodecVencSettings_VencVBR* NvtCodecVencSettings::_internal_mutable_vbrsettings() {
  if (brcType_case() != kVBRSettings) {
    clear_brcType();
    set_has_vbrsettings();
    _impl_.brcType_.vbrsettings_ =
        ::google::protobuf::Message::DefaultConstruct<::NvtCodecVencSettings_VencVBR>(GetArena());
  }
  return _impl_.brcType_.vbrsettings_;
}
inline ::NvtCodecVencSettings_VencVBR* NvtCodecVencSettings::mutable_vbrsettings() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::NvtCodecVencSettings_VencVBR* _msg = _internal_mutable_vbrsettings();
  // @@protoc_insertion_point(field_mutable:NvtCodecVencSettings.VBRSettings)
  return _msg;
}

// .NvtCodecVencSettings.VencEVBR EVBRSettings = 11;
inline bool NvtCodecVencSettings::has_evbrsettings() const {
  return brcType_case() == kEVBRSettings;
}
inline bool NvtCodecVencSettings::_internal_has_evbrsettings() const {
  return brcType_case() == kEVBRSettings;
}
inline void NvtCodecVencSettings::set_has_evbrsettings() {
  _impl_._oneof_case_[0] = kEVBRSettings;
}
inline void NvtCodecVencSettings::clear_evbrsettings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (brcType_case() == kEVBRSettings) {
    if (GetArena() == nullptr) {
      delete _impl_.brcType_.evbrsettings_;
    }
    clear_has_brcType();
  }
}
inline ::NvtCodecVencSettings_VencEVBR* NvtCodecVencSettings::release_evbrsettings() {
  // @@protoc_insertion_point(field_release:NvtCodecVencSettings.EVBRSettings)
  if (brcType_case() == kEVBRSettings) {
    clear_has_brcType();
    auto* temp = _impl_.brcType_.evbrsettings_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.brcType_.evbrsettings_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::NvtCodecVencSettings_VencEVBR& NvtCodecVencSettings::_internal_evbrsettings() const {
  return brcType_case() == kEVBRSettings ? *_impl_.brcType_.evbrsettings_ : reinterpret_cast<::NvtCodecVencSettings_VencEVBR&>(::_NvtCodecVencSettings_VencEVBR_default_instance_);
}
inline const ::NvtCodecVencSettings_VencEVBR& NvtCodecVencSettings::evbrsettings() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NvtCodecVencSettings.EVBRSettings)
  return _internal_evbrsettings();
}
inline ::NvtCodecVencSettings_VencEVBR* NvtCodecVencSettings::unsafe_arena_release_evbrsettings() {
  // @@protoc_insertion_point(field_unsafe_arena_release:NvtCodecVencSettings.EVBRSettings)
  if (brcType_case() == kEVBRSettings) {
    clear_has_brcType();
    auto* temp = _impl_.brcType_.evbrsettings_;
    _impl_.brcType_.evbrsettings_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void NvtCodecVencSettings::unsafe_arena_set_allocated_evbrsettings(::NvtCodecVencSettings_VencEVBR* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_brcType();
  if (value) {
    set_has_evbrsettings();
    _impl_.brcType_.evbrsettings_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NvtCodecVencSettings.EVBRSettings)
}
inline ::NvtCodecVencSettings_VencEVBR* NvtCodecVencSettings::_internal_mutable_evbrsettings() {
  if (brcType_case() != kEVBRSettings) {
    clear_brcType();
    set_has_evbrsettings();
    _impl_.brcType_.evbrsettings_ =
        ::google::protobuf::Message::DefaultConstruct<::NvtCodecVencSettings_VencEVBR>(GetArena());
  }
  return _impl_.brcType_.evbrsettings_;
}
inline ::NvtCodecVencSettings_VencEVBR* NvtCodecVencSettings::mutable_evbrsettings() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::NvtCodecVencSettings_VencEVBR* _msg = _internal_mutable_evbrsettings();
  // @@protoc_insertion_point(field_mutable:NvtCodecVencSettings.EVBRSettings)
  return _msg;
}

// .NvtCodecVencSettings.VencFIXQP FIXQPSettings = 12;
inline bool NvtCodecVencSettings::has_fixqpsettings() const {
  return brcType_case() == kFIXQPSettings;
}
inline bool NvtCodecVencSettings::_internal_has_fixqpsettings() const {
  return brcType_case() == kFIXQPSettings;
}
inline void NvtCodecVencSettings::set_has_fixqpsettings() {
  _impl_._oneof_case_[0] = kFIXQPSettings;
}
inline void NvtCodecVencSettings::clear_fixqpsettings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (brcType_case() == kFIXQPSettings) {
    if (GetArena() == nullptr) {
      delete _impl_.brcType_.fixqpsettings_;
    }
    clear_has_brcType();
  }
}
inline ::NvtCodecVencSettings_VencFIXQP* NvtCodecVencSettings::release_fixqpsettings() {
  // @@protoc_insertion_point(field_release:NvtCodecVencSettings.FIXQPSettings)
  if (brcType_case() == kFIXQPSettings) {
    clear_has_brcType();
    auto* temp = _impl_.brcType_.fixqpsettings_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.brcType_.fixqpsettings_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::NvtCodecVencSettings_VencFIXQP& NvtCodecVencSettings::_internal_fixqpsettings() const {
  return brcType_case() == kFIXQPSettings ? *_impl_.brcType_.fixqpsettings_ : reinterpret_cast<::NvtCodecVencSettings_VencFIXQP&>(::_NvtCodecVencSettings_VencFIXQP_default_instance_);
}
inline const ::NvtCodecVencSettings_VencFIXQP& NvtCodecVencSettings::fixqpsettings() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NvtCodecVencSettings.FIXQPSettings)
  return _internal_fixqpsettings();
}
inline ::NvtCodecVencSettings_VencFIXQP* NvtCodecVencSettings::unsafe_arena_release_fixqpsettings() {
  // @@protoc_insertion_point(field_unsafe_arena_release:NvtCodecVencSettings.FIXQPSettings)
  if (brcType_case() == kFIXQPSettings) {
    clear_has_brcType();
    auto* temp = _impl_.brcType_.fixqpsettings_;
    _impl_.brcType_.fixqpsettings_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void NvtCodecVencSettings::unsafe_arena_set_allocated_fixqpsettings(::NvtCodecVencSettings_VencFIXQP* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_brcType();
  if (value) {
    set_has_fixqpsettings();
    _impl_.brcType_.fixqpsettings_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NvtCodecVencSettings.FIXQPSettings)
}
inline ::NvtCodecVencSettings_VencFIXQP* NvtCodecVencSettings::_internal_mutable_fixqpsettings() {
  if (brcType_case() != kFIXQPSettings) {
    clear_brcType();
    set_has_fixqpsettings();
    _impl_.brcType_.fixqpsettings_ =
        ::google::protobuf::Message::DefaultConstruct<::NvtCodecVencSettings_VencFIXQP>(GetArena());
  }
  return _impl_.brcType_.fixqpsettings_;
}
inline ::NvtCodecVencSettings_VencFIXQP* NvtCodecVencSettings::mutable_fixqpsettings() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::NvtCodecVencSettings_VencFIXQP* _msg = _internal_mutable_fixqpsettings();
  // @@protoc_insertion_point(field_mutable:NvtCodecVencSettings.FIXQPSettings)
  return _msg;
}

// .NvtCodecVencSettings.VencSVCT svctSettings = 13;
inline void NvtCodecVencSettings::clear_svctsettings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.svctsettings_ = 0;
}
inline ::NvtCodecVencSettings_VencSVCT NvtCodecVencSettings::svctsettings() const {
  // @@protoc_insertion_point(field_get:NvtCodecVencSettings.svctSettings)
  return _internal_svctsettings();
}
inline void NvtCodecVencSettings::set_svctsettings(::NvtCodecVencSettings_VencSVCT value) {
  _internal_set_svctsettings(value);
  // @@protoc_insertion_point(field_set:NvtCodecVencSettings.svctSettings)
}
inline ::NvtCodecVencSettings_VencSVCT NvtCodecVencSettings::_internal_svctsettings() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::NvtCodecVencSettings_VencSVCT>(_impl_.svctsettings_);
}
inline void NvtCodecVencSettings::_internal_set_svctsettings(::NvtCodecVencSettings_VencSVCT value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.svctsettings_ = value;
}

// bool enableNR = 14;
inline void NvtCodecVencSettings::clear_enablenr() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.enablenr_ = false;
}
inline bool NvtCodecVencSettings::enablenr() const {
  // @@protoc_insertion_point(field_get:NvtCodecVencSettings.enableNR)
  return _internal_enablenr();
}
inline void NvtCodecVencSettings::set_enablenr(bool value) {
  _internal_set_enablenr(value);
  // @@protoc_insertion_point(field_set:NvtCodecVencSettings.enableNR)
}
inline bool NvtCodecVencSettings::_internal_enablenr() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.enablenr_;
}
inline void NvtCodecVencSettings::_internal_set_enablenr(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.enablenr_ = value;
}

// .NvtCodecVencSettings.VencRotation eVencRT = 15;
inline void NvtCodecVencSettings::clear_evencrt() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.evencrt_ = 0;
}
inline ::NvtCodecVencSettings_VencRotation NvtCodecVencSettings::evencrt() const {
  // @@protoc_insertion_point(field_get:NvtCodecVencSettings.eVencRT)
  return _internal_evencrt();
}
inline void NvtCodecVencSettings::set_evencrt(::NvtCodecVencSettings_VencRotation value) {
  _internal_set_evencrt(value);
  // @@protoc_insertion_point(field_set:NvtCodecVencSettings.eVencRT)
}
inline ::NvtCodecVencSettings_VencRotation NvtCodecVencSettings::_internal_evencrt() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::NvtCodecVencSettings_VencRotation>(_impl_.evencrt_);
}
inline void NvtCodecVencSettings::_internal_set_evencrt(::NvtCodecVencSettings_VencRotation value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.evencrt_ = value;
}

// optional .NvtCodecVencSettings.AQSettings aqSettings = 16;
inline bool NvtCodecVencSettings::has_aqsettings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.aqsettings_ != nullptr);
  return value;
}
inline void NvtCodecVencSettings::clear_aqsettings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.aqsettings_ != nullptr) _impl_.aqsettings_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::NvtCodecVencSettings_AQSettings& NvtCodecVencSettings::_internal_aqsettings() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::NvtCodecVencSettings_AQSettings* p = _impl_.aqsettings_;
  return p != nullptr ? *p : reinterpret_cast<const ::NvtCodecVencSettings_AQSettings&>(::_NvtCodecVencSettings_AQSettings_default_instance_);
}
inline const ::NvtCodecVencSettings_AQSettings& NvtCodecVencSettings::aqsettings() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NvtCodecVencSettings.aqSettings)
  return _internal_aqsettings();
}
inline void NvtCodecVencSettings::unsafe_arena_set_allocated_aqsettings(::NvtCodecVencSettings_AQSettings* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.aqsettings_);
  }
  _impl_.aqsettings_ = reinterpret_cast<::NvtCodecVencSettings_AQSettings*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NvtCodecVencSettings.aqSettings)
}
inline ::NvtCodecVencSettings_AQSettings* NvtCodecVencSettings::release_aqsettings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::NvtCodecVencSettings_AQSettings* released = _impl_.aqsettings_;
  _impl_.aqsettings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::NvtCodecVencSettings_AQSettings* NvtCodecVencSettings::unsafe_arena_release_aqsettings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:NvtCodecVencSettings.aqSettings)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::NvtCodecVencSettings_AQSettings* temp = _impl_.aqsettings_;
  _impl_.aqsettings_ = nullptr;
  return temp;
}
inline ::NvtCodecVencSettings_AQSettings* NvtCodecVencSettings::_internal_mutable_aqsettings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.aqsettings_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::NvtCodecVencSettings_AQSettings>(GetArena());
    _impl_.aqsettings_ = reinterpret_cast<::NvtCodecVencSettings_AQSettings*>(p);
  }
  return _impl_.aqsettings_;
}
inline ::NvtCodecVencSettings_AQSettings* NvtCodecVencSettings::mutable_aqsettings() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::NvtCodecVencSettings_AQSettings* _msg = _internal_mutable_aqsettings();
  // @@protoc_insertion_point(field_mutable:NvtCodecVencSettings.aqSettings)
  return _msg;
}
inline void NvtCodecVencSettings::set_allocated_aqsettings(::NvtCodecVencSettings_AQSettings* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.aqsettings_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.aqsettings_ = reinterpret_cast<::NvtCodecVencSettings_AQSettings*>(value);
  // @@protoc_insertion_point(field_set_allocated:NvtCodecVencSettings.aqSettings)
}

// .NvtCodecVencSettings.LTRSettings ltrSettings = 17;
inline bool NvtCodecVencSettings::has_ltrsettings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ltrsettings_ != nullptr);
  return value;
}
inline void NvtCodecVencSettings::clear_ltrsettings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.ltrsettings_ != nullptr) _impl_.ltrsettings_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::NvtCodecVencSettings_LTRSettings& NvtCodecVencSettings::_internal_ltrsettings() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::NvtCodecVencSettings_LTRSettings* p = _impl_.ltrsettings_;
  return p != nullptr ? *p : reinterpret_cast<const ::NvtCodecVencSettings_LTRSettings&>(::_NvtCodecVencSettings_LTRSettings_default_instance_);
}
inline const ::NvtCodecVencSettings_LTRSettings& NvtCodecVencSettings::ltrsettings() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NvtCodecVencSettings.ltrSettings)
  return _internal_ltrsettings();
}
inline void NvtCodecVencSettings::unsafe_arena_set_allocated_ltrsettings(::NvtCodecVencSettings_LTRSettings* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ltrsettings_);
  }
  _impl_.ltrsettings_ = reinterpret_cast<::NvtCodecVencSettings_LTRSettings*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NvtCodecVencSettings.ltrSettings)
}
inline ::NvtCodecVencSettings_LTRSettings* NvtCodecVencSettings::release_ltrsettings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::NvtCodecVencSettings_LTRSettings* released = _impl_.ltrsettings_;
  _impl_.ltrsettings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::NvtCodecVencSettings_LTRSettings* NvtCodecVencSettings::unsafe_arena_release_ltrsettings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:NvtCodecVencSettings.ltrSettings)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::NvtCodecVencSettings_LTRSettings* temp = _impl_.ltrsettings_;
  _impl_.ltrsettings_ = nullptr;
  return temp;
}
inline ::NvtCodecVencSettings_LTRSettings* NvtCodecVencSettings::_internal_mutable_ltrsettings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.ltrsettings_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::NvtCodecVencSettings_LTRSettings>(GetArena());
    _impl_.ltrsettings_ = reinterpret_cast<::NvtCodecVencSettings_LTRSettings*>(p);
  }
  return _impl_.ltrsettings_;
}
inline ::NvtCodecVencSettings_LTRSettings* NvtCodecVencSettings::mutable_ltrsettings() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::NvtCodecVencSettings_LTRSettings* _msg = _internal_mutable_ltrsettings();
  // @@protoc_insertion_point(field_mutable:NvtCodecVencSettings.ltrSettings)
  return _msg;
}
inline void NvtCodecVencSettings::set_allocated_ltrsettings(::NvtCodecVencSettings_LTRSettings* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.ltrsettings_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.ltrsettings_ = reinterpret_cast<::NvtCodecVencSettings_LTRSettings*>(value);
  // @@protoc_insertion_point(field_set_allocated:NvtCodecVencSettings.ltrSettings)
}

// bool SEIEnable = 18;
inline void NvtCodecVencSettings::clear_seienable() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.seienable_ = false;
}
inline bool NvtCodecVencSettings::seienable() const {
  // @@protoc_insertion_point(field_get:NvtCodecVencSettings.SEIEnable)
  return _internal_seienable();
}
inline void NvtCodecVencSettings::set_seienable(bool value) {
  _internal_set_seienable(value);
  // @@protoc_insertion_point(field_set:NvtCodecVencSettings.SEIEnable)
}
inline bool NvtCodecVencSettings::_internal_seienable() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.seienable_;
}
inline void NvtCodecVencSettings::_internal_set_seienable(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.seienable_ = value;
}

inline bool NvtCodecVencSettings::has_brcType() const {
  return brcType_case() != BRCTYPE_NOT_SET;
}
inline void NvtCodecVencSettings::clear_has_brcType() {
  _impl_._oneof_case_[0] = BRCTYPE_NOT_SET;
}
inline NvtCodecVencSettings::BrcTypeCase NvtCodecVencSettings::brcType_case() const {
  return NvtCodecVencSettings::BrcTypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ISPSettings

// optional .ISPSettings.ISPPreset selectedPreset = 1;
inline bool ISPSettings::has_selectedpreset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ISPSettings::clear_selectedpreset() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.selectedpreset_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::ISPSettings_ISPPreset ISPSettings::selectedpreset() const {
  // @@protoc_insertion_point(field_get:ISPSettings.selectedPreset)
  return _internal_selectedpreset();
}
inline void ISPSettings::set_selectedpreset(::ISPSettings_ISPPreset value) {
  _internal_set_selectedpreset(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:ISPSettings.selectedPreset)
}
inline ::ISPSettings_ISPPreset ISPSettings::_internal_selectedpreset() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::ISPSettings_ISPPreset>(_impl_.selectedpreset_);
}
inline void ISPSettings::_internal_set_selectedpreset(::ISPSettings_ISPPreset value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.selectedpreset_ = value;
}

// optional bool nightMode = 2;
inline bool ISPSettings::has_nightmode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ISPSettings::clear_nightmode() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nightmode_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool ISPSettings::nightmode() const {
  // @@protoc_insertion_point(field_get:ISPSettings.nightMode)
  return _internal_nightmode();
}
inline void ISPSettings::set_nightmode(bool value) {
  _internal_set_nightmode(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:ISPSettings.nightMode)
}
inline bool ISPSettings::_internal_nightmode() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.nightmode_;
}
inline void ISPSettings::_internal_set_nightmode(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nightmode_ = value;
}

// optional int32 brightness = 3;
inline bool ISPSettings::has_brightness() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ISPSettings::clear_brightness() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.brightness_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t ISPSettings::brightness() const {
  // @@protoc_insertion_point(field_get:ISPSettings.brightness)
  return _internal_brightness();
}
inline void ISPSettings::set_brightness(::int32_t value) {
  _internal_set_brightness(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:ISPSettings.brightness)
}
inline ::int32_t ISPSettings::_internal_brightness() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.brightness_;
}
inline void ISPSettings::_internal_set_brightness(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.brightness_ = value;
}

// optional int32 saturation = 4;
inline bool ISPSettings::has_saturation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void ISPSettings::clear_saturation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.saturation_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t ISPSettings::saturation() const {
  // @@protoc_insertion_point(field_get:ISPSettings.saturation)
  return _internal_saturation();
}
inline void ISPSettings::set_saturation(::int32_t value) {
  _internal_set_saturation(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:ISPSettings.saturation)
}
inline ::int32_t ISPSettings::_internal_saturation() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.saturation_;
}
inline void ISPSettings::_internal_set_saturation(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.saturation_ = value;
}

// optional int32 hue = 5;
inline bool ISPSettings::has_hue() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void ISPSettings::clear_hue() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.hue_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t ISPSettings::hue() const {
  // @@protoc_insertion_point(field_get:ISPSettings.hue)
  return _internal_hue();
}
inline void ISPSettings::set_hue(::int32_t value) {
  _internal_set_hue(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:ISPSettings.hue)
}
inline ::int32_t ISPSettings::_internal_hue() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.hue_;
}
inline void ISPSettings::_internal_set_hue(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.hue_ = value;
}

// optional int32 contrast = 6;
inline bool ISPSettings::has_contrast() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void ISPSettings::clear_contrast() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.contrast_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t ISPSettings::contrast() const {
  // @@protoc_insertion_point(field_get:ISPSettings.contrast)
  return _internal_contrast();
}
inline void ISPSettings::set_contrast(::int32_t value) {
  _internal_set_contrast(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:ISPSettings.contrast)
}
inline ::int32_t ISPSettings::_internal_contrast() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.contrast_;
}
inline void ISPSettings::_internal_set_contrast(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.contrast_ = value;
}

// optional int32 nrLevel = 7;
inline bool ISPSettings::has_nrlevel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void ISPSettings::clear_nrlevel() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nrlevel_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int32_t ISPSettings::nrlevel() const {
  // @@protoc_insertion_point(field_get:ISPSettings.nrLevel)
  return _internal_nrlevel();
}
inline void ISPSettings::set_nrlevel(::int32_t value) {
  _internal_set_nrlevel(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:ISPSettings.nrLevel)
}
inline ::int32_t ISPSettings::_internal_nrlevel() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.nrlevel_;
}
inline void ISPSettings::_internal_set_nrlevel(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nrlevel_ = value;
}

// optional int32 eeLevel = 8;
inline bool ISPSettings::has_eelevel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void ISPSettings::clear_eelevel() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.eelevel_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int32_t ISPSettings::eelevel() const {
  // @@protoc_insertion_point(field_get:ISPSettings.eeLevel)
  return _internal_eelevel();
}
inline void ISPSettings::set_eelevel(::int32_t value) {
  _internal_set_eelevel(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:ISPSettings.eeLevel)
}
inline ::int32_t ISPSettings::_internal_eelevel() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.eelevel_;
}
inline void ISPSettings::_internal_set_eelevel(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.eelevel_ = value;
}

// optional int32 tnrLevel = 9;
inline bool ISPSettings::has_tnrlevel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void ISPSettings::clear_tnrlevel() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tnrlevel_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::int32_t ISPSettings::tnrlevel() const {
  // @@protoc_insertion_point(field_get:ISPSettings.tnrLevel)
  return _internal_tnrlevel();
}
inline void ISPSettings::set_tnrlevel(::int32_t value) {
  _internal_set_tnrlevel(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:ISPSettings.tnrLevel)
}
inline ::int32_t ISPSettings::_internal_tnrlevel() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tnrlevel_;
}
inline void ISPSettings::_internal_set_tnrlevel(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tnrlevel_ = value;
}

// -------------------------------------------------------------------

// UserList

// repeated string username = 1;
inline int UserList::_internal_username_size() const {
  return _internal_username().size();
}
inline int UserList::username_size() const {
  return _internal_username_size();
}
inline void UserList::clear_username() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.username_.Clear();
}
inline std::string* UserList::add_username()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_username()->Add();
  // @@protoc_insertion_point(field_add_mutable:UserList.username)
  return _s;
}
inline const std::string& UserList::username(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:UserList.username)
  return _internal_username().Get(index);
}
inline std::string* UserList::mutable_username(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:UserList.username)
  return _internal_mutable_username()->Mutable(index);
}
inline void UserList::set_username(int index, const std::string& value) {
  _internal_mutable_username()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:UserList.username)
}
inline void UserList::set_username(int index, std::string&& value) {
  _internal_mutable_username()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:UserList.username)
}
inline void UserList::set_username(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_username()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:UserList.username)
}
inline void UserList::set_username(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_username()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UserList.username)
}
inline void UserList::set_username(int index, absl::string_view value) {
  _internal_mutable_username()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:UserList.username)
}
inline void UserList::add_username(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_username()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:UserList.username)
}
inline void UserList::add_username(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_username()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:UserList.username)
}
inline void UserList::add_username(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_username()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:UserList.username)
}
inline void UserList::add_username(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_username()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:UserList.username)
}
inline void UserList::add_username(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_username()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:UserList.username)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
UserList::username() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:UserList.username)
  return _internal_username();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
UserList::mutable_username() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:UserList.username)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_username();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
UserList::_internal_username() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.username_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
UserList::_internal_mutable_username() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.username_;
}

// -------------------------------------------------------------------

// NewUserData

// bool exists = 1;
inline void NewUserData::clear_exists() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.exists_ = false;
}
inline bool NewUserData::exists() const {
  // @@protoc_insertion_point(field_get:NewUserData.exists)
  return _internal_exists();
}
inline void NewUserData::set_exists(bool value) {
  _internal_set_exists(value);
  // @@protoc_insertion_point(field_set:NewUserData.exists)
}
inline bool NewUserData::_internal_exists() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.exists_;
}
inline void NewUserData::_internal_set_exists(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.exists_ = value;
}

// string username = 2;
inline void NewUserData::clear_username() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.username_.ClearToEmpty();
}
inline const std::string& NewUserData::username() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NewUserData.username)
  return _internal_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NewUserData::set_username(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.username_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NewUserData.username)
}
inline std::string* NewUserData::mutable_username() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:NewUserData.username)
  return _s;
}
inline const std::string& NewUserData::_internal_username() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.username_.Get();
}
inline void NewUserData::_internal_set_username(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.username_.Set(value, GetArena());
}
inline std::string* NewUserData::_internal_mutable_username() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.username_.Mutable( GetArena());
}
inline std::string* NewUserData::release_username() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:NewUserData.username)
  return _impl_.username_.Release();
}
inline void NewUserData::set_allocated_username(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.username_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.username_.IsDefault()) {
          _impl_.username_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NewUserData.username)
}

// optional string password = 3;
inline bool NewUserData::has_password() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void NewUserData::clear_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.password_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NewUserData::password() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NewUserData.password)
  return _internal_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NewUserData::set_password(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.password_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:NewUserData.password)
}
inline std::string* NewUserData::mutable_password() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:NewUserData.password)
  return _s;
}
inline const std::string& NewUserData::_internal_password() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.password_.Get();
}
inline void NewUserData::_internal_set_password(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.password_.Set(value, GetArena());
}
inline std::string* NewUserData::_internal_mutable_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.password_.Mutable( GetArena());
}
inline std::string* NewUserData::release_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:NewUserData.password)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.password_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void NewUserData::set_allocated_password(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.password_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.password_.IsDefault()) {
          _impl_.password_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NewUserData.password)
}

// -------------------------------------------------------------------

// ModeSwitchParams

// optional bool irEnable = 1;
inline bool ModeSwitchParams::has_irenable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ModeSwitchParams::clear_irenable() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.irenable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool ModeSwitchParams::irenable() const {
  // @@protoc_insertion_point(field_get:ModeSwitchParams.irEnable)
  return _internal_irenable();
}
inline void ModeSwitchParams::set_irenable(bool value) {
  _internal_set_irenable(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:ModeSwitchParams.irEnable)
}
inline bool ModeSwitchParams::_internal_irenable() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.irenable_;
}
inline void ModeSwitchParams::_internal_set_irenable(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.irenable_ = value;
}

// optional .ModeSwitchParams.MSMode mode = 2;
inline bool ModeSwitchParams::has_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ModeSwitchParams::clear_mode() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::ModeSwitchParams_MSMode ModeSwitchParams::mode() const {
  // @@protoc_insertion_point(field_get:ModeSwitchParams.mode)
  return _internal_mode();
}
inline void ModeSwitchParams::set_mode(::ModeSwitchParams_MSMode value) {
  _internal_set_mode(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:ModeSwitchParams.mode)
}
inline ::ModeSwitchParams_MSMode ModeSwitchParams::_internal_mode() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::ModeSwitchParams_MSMode>(_impl_.mode_);
}
inline void ModeSwitchParams::_internal_set_mode(::ModeSwitchParams_MSMode value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mode_ = value;
}

// -------------------------------------------------------------------

// CamCtlRequest_vencSettingsSetRequest

// .VencType tgtVenc = 1;
inline void CamCtlRequest_vencSettingsSetRequest::clear_tgtvenc() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tgtvenc_ = 0;
}
inline ::VencType CamCtlRequest_vencSettingsSetRequest::tgtvenc() const {
  // @@protoc_insertion_point(field_get:CamCtlRequest.vencSettingsSetRequest.tgtVenc)
  return _internal_tgtvenc();
}
inline void CamCtlRequest_vencSettingsSetRequest::set_tgtvenc(::VencType value) {
  _internal_set_tgtvenc(value);
  // @@protoc_insertion_point(field_set:CamCtlRequest.vencSettingsSetRequest.tgtVenc)
}
inline ::VencType CamCtlRequest_vencSettingsSetRequest::_internal_tgtvenc() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::VencType>(_impl_.tgtvenc_);
}
inline void CamCtlRequest_vencSettingsSetRequest::_internal_set_tgtvenc(::VencType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tgtvenc_ = value;
}

// .NvtCodecVencSettings newSettings = 2;
inline bool CamCtlRequest_vencSettingsSetRequest::has_newsettings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.newsettings_ != nullptr);
  return value;
}
inline void CamCtlRequest_vencSettingsSetRequest::clear_newsettings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.newsettings_ != nullptr) _impl_.newsettings_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::NvtCodecVencSettings& CamCtlRequest_vencSettingsSetRequest::_internal_newsettings() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::NvtCodecVencSettings* p = _impl_.newsettings_;
  return p != nullptr ? *p : reinterpret_cast<const ::NvtCodecVencSettings&>(::_NvtCodecVencSettings_default_instance_);
}
inline const ::NvtCodecVencSettings& CamCtlRequest_vencSettingsSetRequest::newsettings() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CamCtlRequest.vencSettingsSetRequest.newSettings)
  return _internal_newsettings();
}
inline void CamCtlRequest_vencSettingsSetRequest::unsafe_arena_set_allocated_newsettings(::NvtCodecVencSettings* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.newsettings_);
  }
  _impl_.newsettings_ = reinterpret_cast<::NvtCodecVencSettings*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CamCtlRequest.vencSettingsSetRequest.newSettings)
}
inline ::NvtCodecVencSettings* CamCtlRequest_vencSettingsSetRequest::release_newsettings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::NvtCodecVencSettings* released = _impl_.newsettings_;
  _impl_.newsettings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::NvtCodecVencSettings* CamCtlRequest_vencSettingsSetRequest::unsafe_arena_release_newsettings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CamCtlRequest.vencSettingsSetRequest.newSettings)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::NvtCodecVencSettings* temp = _impl_.newsettings_;
  _impl_.newsettings_ = nullptr;
  return temp;
}
inline ::NvtCodecVencSettings* CamCtlRequest_vencSettingsSetRequest::_internal_mutable_newsettings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.newsettings_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::NvtCodecVencSettings>(GetArena());
    _impl_.newsettings_ = reinterpret_cast<::NvtCodecVencSettings*>(p);
  }
  return _impl_.newsettings_;
}
inline ::NvtCodecVencSettings* CamCtlRequest_vencSettingsSetRequest::mutable_newsettings() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::NvtCodecVencSettings* _msg = _internal_mutable_newsettings();
  // @@protoc_insertion_point(field_mutable:CamCtlRequest.vencSettingsSetRequest.newSettings)
  return _msg;
}
inline void CamCtlRequest_vencSettingsSetRequest::set_allocated_newsettings(::NvtCodecVencSettings* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.newsettings_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.newsettings_ = reinterpret_cast<::NvtCodecVencSettings*>(value);
  // @@protoc_insertion_point(field_set_allocated:CamCtlRequest.vencSettingsSetRequest.newSettings)
}

// -------------------------------------------------------------------

// CamCtlRequest_motorMoveRequest

// .StepMotorType motor = 1;
inline void CamCtlRequest_motorMoveRequest::clear_motor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.motor_ = 0;
}
inline ::StepMotorType CamCtlRequest_motorMoveRequest::motor() const {
  // @@protoc_insertion_point(field_get:CamCtlRequest.motorMoveRequest.motor)
  return _internal_motor();
}
inline void CamCtlRequest_motorMoveRequest::set_motor(::StepMotorType value) {
  _internal_set_motor(value);
  // @@protoc_insertion_point(field_set:CamCtlRequest.motorMoveRequest.motor)
}
inline ::StepMotorType CamCtlRequest_motorMoveRequest::_internal_motor() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::StepMotorType>(_impl_.motor_);
}
inline void CamCtlRequest_motorMoveRequest::_internal_set_motor(::StepMotorType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.motor_ = value;
}

// .StepMotorDirection dir = 2;
inline void CamCtlRequest_motorMoveRequest::clear_dir() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.dir_ = 0;
}
inline ::StepMotorDirection CamCtlRequest_motorMoveRequest::dir() const {
  // @@protoc_insertion_point(field_get:CamCtlRequest.motorMoveRequest.dir)
  return _internal_dir();
}
inline void CamCtlRequest_motorMoveRequest::set_dir(::StepMotorDirection value) {
  _internal_set_dir(value);
  // @@protoc_insertion_point(field_set:CamCtlRequest.motorMoveRequest.dir)
}
inline ::StepMotorDirection CamCtlRequest_motorMoveRequest::_internal_dir() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::StepMotorDirection>(_impl_.dir_);
}
inline void CamCtlRequest_motorMoveRequest::_internal_set_dir(::StepMotorDirection value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.dir_ = value;
}

// uint32 steps = 3;
inline void CamCtlRequest_motorMoveRequest::clear_steps() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.steps_ = 0u;
}
inline ::uint32_t CamCtlRequest_motorMoveRequest::steps() const {
  // @@protoc_insertion_point(field_get:CamCtlRequest.motorMoveRequest.steps)
  return _internal_steps();
}
inline void CamCtlRequest_motorMoveRequest::set_steps(::uint32_t value) {
  _internal_set_steps(value);
  // @@protoc_insertion_point(field_set:CamCtlRequest.motorMoveRequest.steps)
}
inline ::uint32_t CamCtlRequest_motorMoveRequest::_internal_steps() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.steps_;
}
inline void CamCtlRequest_motorMoveRequest::_internal_set_steps(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.steps_ = value;
}

// -------------------------------------------------------------------

// CamCtlRequest

// .CamCtlRequest.RequestType requestType = 1;
inline void CamCtlRequest::clear_requesttype() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.requesttype_ = 0;
}
inline ::CamCtlRequest_RequestType CamCtlRequest::requesttype() const {
  // @@protoc_insertion_point(field_get:CamCtlRequest.requestType)
  return _internal_requesttype();
}
inline void CamCtlRequest::set_requesttype(::CamCtlRequest_RequestType value) {
  _internal_set_requesttype(value);
  // @@protoc_insertion_point(field_set:CamCtlRequest.requestType)
}
inline ::CamCtlRequest_RequestType CamCtlRequest::_internal_requesttype() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::CamCtlRequest_RequestType>(_impl_.requesttype_);
}
inline void CamCtlRequest::_internal_set_requesttype(::CamCtlRequest_RequestType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.requesttype_ = value;
}

// bool pingRequest = 2;
inline bool CamCtlRequest::has_pingrequest() const {
  return cmdBody_case() == kPingRequest;
}
inline void CamCtlRequest::set_has_pingrequest() {
  _impl_._oneof_case_[0] = kPingRequest;
}
inline void CamCtlRequest::clear_pingrequest() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (cmdBody_case() == kPingRequest) {
    _impl_.cmdBody_.pingrequest_ = false;
    clear_has_cmdBody();
  }
}
inline bool CamCtlRequest::pingrequest() const {
  // @@protoc_insertion_point(field_get:CamCtlRequest.pingRequest)
  return _internal_pingrequest();
}
inline void CamCtlRequest::set_pingrequest(bool value) {
  if (cmdBody_case() != kPingRequest) {
    clear_cmdBody();
    set_has_pingrequest();
  }
  _impl_.cmdBody_.pingrequest_ = value;
  // @@protoc_insertion_point(field_set:CamCtlRequest.pingRequest)
}
inline bool CamCtlRequest::_internal_pingrequest() const {
  if (cmdBody_case() == kPingRequest) {
    return _impl_.cmdBody_.pingrequest_;
  }
  return false;
}

// .CamCtlRequest.vencSettingsSetRequest setVencSettings = 3;
inline bool CamCtlRequest::has_setvencsettings() const {
  return cmdBody_case() == kSetVencSettings;
}
inline bool CamCtlRequest::_internal_has_setvencsettings() const {
  return cmdBody_case() == kSetVencSettings;
}
inline void CamCtlRequest::set_has_setvencsettings() {
  _impl_._oneof_case_[0] = kSetVencSettings;
}
inline void CamCtlRequest::clear_setvencsettings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (cmdBody_case() == kSetVencSettings) {
    if (GetArena() == nullptr) {
      delete _impl_.cmdBody_.setvencsettings_;
    }
    clear_has_cmdBody();
  }
}
inline ::CamCtlRequest_vencSettingsSetRequest* CamCtlRequest::release_setvencsettings() {
  // @@protoc_insertion_point(field_release:CamCtlRequest.setVencSettings)
  if (cmdBody_case() == kSetVencSettings) {
    clear_has_cmdBody();
    auto* temp = _impl_.cmdBody_.setvencsettings_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmdBody_.setvencsettings_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CamCtlRequest_vencSettingsSetRequest& CamCtlRequest::_internal_setvencsettings() const {
  return cmdBody_case() == kSetVencSettings ? *_impl_.cmdBody_.setvencsettings_ : reinterpret_cast<::CamCtlRequest_vencSettingsSetRequest&>(::_CamCtlRequest_vencSettingsSetRequest_default_instance_);
}
inline const ::CamCtlRequest_vencSettingsSetRequest& CamCtlRequest::setvencsettings() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CamCtlRequest.setVencSettings)
  return _internal_setvencsettings();
}
inline ::CamCtlRequest_vencSettingsSetRequest* CamCtlRequest::unsafe_arena_release_setvencsettings() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CamCtlRequest.setVencSettings)
  if (cmdBody_case() == kSetVencSettings) {
    clear_has_cmdBody();
    auto* temp = _impl_.cmdBody_.setvencsettings_;
    _impl_.cmdBody_.setvencsettings_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CamCtlRequest::unsafe_arena_set_allocated_setvencsettings(::CamCtlRequest_vencSettingsSetRequest* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmdBody();
  if (value) {
    set_has_setvencsettings();
    _impl_.cmdBody_.setvencsettings_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CamCtlRequest.setVencSettings)
}
inline ::CamCtlRequest_vencSettingsSetRequest* CamCtlRequest::_internal_mutable_setvencsettings() {
  if (cmdBody_case() != kSetVencSettings) {
    clear_cmdBody();
    set_has_setvencsettings();
    _impl_.cmdBody_.setvencsettings_ =
        ::google::protobuf::Message::DefaultConstruct<::CamCtlRequest_vencSettingsSetRequest>(GetArena());
  }
  return _impl_.cmdBody_.setvencsettings_;
}
inline ::CamCtlRequest_vencSettingsSetRequest* CamCtlRequest::mutable_setvencsettings() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::CamCtlRequest_vencSettingsSetRequest* _msg = _internal_mutable_setvencsettings();
  // @@protoc_insertion_point(field_mutable:CamCtlRequest.setVencSettings)
  return _msg;
}

// .VencType getVencSettings = 4;
inline bool CamCtlRequest::has_getvencsettings() const {
  return cmdBody_case() == kGetVencSettings;
}
inline void CamCtlRequest::set_has_getvencsettings() {
  _impl_._oneof_case_[0] = kGetVencSettings;
}
inline void CamCtlRequest::clear_getvencsettings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (cmdBody_case() == kGetVencSettings) {
    _impl_.cmdBody_.getvencsettings_ = 0;
    clear_has_cmdBody();
  }
}
inline ::VencType CamCtlRequest::getvencsettings() const {
  // @@protoc_insertion_point(field_get:CamCtlRequest.getVencSettings)
  return _internal_getvencsettings();
}
inline void CamCtlRequest::set_getvencsettings(::VencType value) {
  if (cmdBody_case() != kGetVencSettings) {
    clear_cmdBody();
    set_has_getvencsettings();
  }
  _impl_.cmdBody_.getvencsettings_ = value;
  // @@protoc_insertion_point(field_set:CamCtlRequest.getVencSettings)
}
inline ::VencType CamCtlRequest::_internal_getvencsettings() const {
  if (cmdBody_case() == kGetVencSettings) {
    return static_cast<::VencType>(_impl_.cmdBody_.getvencsettings_);
  }
  return static_cast<::VencType>(0);
}

// .CamCtlRequest.motorMoveRequest moveMotor = 5;
inline bool CamCtlRequest::has_movemotor() const {
  return cmdBody_case() == kMoveMotor;
}
inline bool CamCtlRequest::_internal_has_movemotor() const {
  return cmdBody_case() == kMoveMotor;
}
inline void CamCtlRequest::set_has_movemotor() {
  _impl_._oneof_case_[0] = kMoveMotor;
}
inline void CamCtlRequest::clear_movemotor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (cmdBody_case() == kMoveMotor) {
    if (GetArena() == nullptr) {
      delete _impl_.cmdBody_.movemotor_;
    }
    clear_has_cmdBody();
  }
}
inline ::CamCtlRequest_motorMoveRequest* CamCtlRequest::release_movemotor() {
  // @@protoc_insertion_point(field_release:CamCtlRequest.moveMotor)
  if (cmdBody_case() == kMoveMotor) {
    clear_has_cmdBody();
    auto* temp = _impl_.cmdBody_.movemotor_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmdBody_.movemotor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CamCtlRequest_motorMoveRequest& CamCtlRequest::_internal_movemotor() const {
  return cmdBody_case() == kMoveMotor ? *_impl_.cmdBody_.movemotor_ : reinterpret_cast<::CamCtlRequest_motorMoveRequest&>(::_CamCtlRequest_motorMoveRequest_default_instance_);
}
inline const ::CamCtlRequest_motorMoveRequest& CamCtlRequest::movemotor() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CamCtlRequest.moveMotor)
  return _internal_movemotor();
}
inline ::CamCtlRequest_motorMoveRequest* CamCtlRequest::unsafe_arena_release_movemotor() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CamCtlRequest.moveMotor)
  if (cmdBody_case() == kMoveMotor) {
    clear_has_cmdBody();
    auto* temp = _impl_.cmdBody_.movemotor_;
    _impl_.cmdBody_.movemotor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CamCtlRequest::unsafe_arena_set_allocated_movemotor(::CamCtlRequest_motorMoveRequest* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmdBody();
  if (value) {
    set_has_movemotor();
    _impl_.cmdBody_.movemotor_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CamCtlRequest.moveMotor)
}
inline ::CamCtlRequest_motorMoveRequest* CamCtlRequest::_internal_mutable_movemotor() {
  if (cmdBody_case() != kMoveMotor) {
    clear_cmdBody();
    set_has_movemotor();
    _impl_.cmdBody_.movemotor_ =
        ::google::protobuf::Message::DefaultConstruct<::CamCtlRequest_motorMoveRequest>(GetArena());
  }
  return _impl_.cmdBody_.movemotor_;
}
inline ::CamCtlRequest_motorMoveRequest* CamCtlRequest::mutable_movemotor() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::CamCtlRequest_motorMoveRequest* _msg = _internal_mutable_movemotor();
  // @@protoc_insertion_point(field_mutable:CamCtlRequest.moveMotor)
  return _msg;
}

// bool ispSettingGetReq = 6;
inline bool CamCtlRequest::has_ispsettinggetreq() const {
  return cmdBody_case() == kIspSettingGetReq;
}
inline void CamCtlRequest::set_has_ispsettinggetreq() {
  _impl_._oneof_case_[0] = kIspSettingGetReq;
}
inline void CamCtlRequest::clear_ispsettinggetreq() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (cmdBody_case() == kIspSettingGetReq) {
    _impl_.cmdBody_.ispsettinggetreq_ = false;
    clear_has_cmdBody();
  }
}
inline bool CamCtlRequest::ispsettinggetreq() const {
  // @@protoc_insertion_point(field_get:CamCtlRequest.ispSettingGetReq)
  return _internal_ispsettinggetreq();
}
inline void CamCtlRequest::set_ispsettinggetreq(bool value) {
  if (cmdBody_case() != kIspSettingGetReq) {
    clear_cmdBody();
    set_has_ispsettinggetreq();
  }
  _impl_.cmdBody_.ispsettinggetreq_ = value;
  // @@protoc_insertion_point(field_set:CamCtlRequest.ispSettingGetReq)
}
inline bool CamCtlRequest::_internal_ispsettinggetreq() const {
  if (cmdBody_case() == kIspSettingGetReq) {
    return _impl_.cmdBody_.ispsettinggetreq_;
  }
  return false;
}

// .ISPSettings newIspSettings = 7;
inline bool CamCtlRequest::has_newispsettings() const {
  return cmdBody_case() == kNewIspSettings;
}
inline bool CamCtlRequest::_internal_has_newispsettings() const {
  return cmdBody_case() == kNewIspSettings;
}
inline void CamCtlRequest::set_has_newispsettings() {
  _impl_._oneof_case_[0] = kNewIspSettings;
}
inline void CamCtlRequest::clear_newispsettings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (cmdBody_case() == kNewIspSettings) {
    if (GetArena() == nullptr) {
      delete _impl_.cmdBody_.newispsettings_;
    }
    clear_has_cmdBody();
  }
}
inline ::ISPSettings* CamCtlRequest::release_newispsettings() {
  // @@protoc_insertion_point(field_release:CamCtlRequest.newIspSettings)
  if (cmdBody_case() == kNewIspSettings) {
    clear_has_cmdBody();
    auto* temp = _impl_.cmdBody_.newispsettings_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmdBody_.newispsettings_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ISPSettings& CamCtlRequest::_internal_newispsettings() const {
  return cmdBody_case() == kNewIspSettings ? *_impl_.cmdBody_.newispsettings_ : reinterpret_cast<::ISPSettings&>(::_ISPSettings_default_instance_);
}
inline const ::ISPSettings& CamCtlRequest::newispsettings() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CamCtlRequest.newIspSettings)
  return _internal_newispsettings();
}
inline ::ISPSettings* CamCtlRequest::unsafe_arena_release_newispsettings() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CamCtlRequest.newIspSettings)
  if (cmdBody_case() == kNewIspSettings) {
    clear_has_cmdBody();
    auto* temp = _impl_.cmdBody_.newispsettings_;
    _impl_.cmdBody_.newispsettings_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CamCtlRequest::unsafe_arena_set_allocated_newispsettings(::ISPSettings* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmdBody();
  if (value) {
    set_has_newispsettings();
    _impl_.cmdBody_.newispsettings_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CamCtlRequest.newIspSettings)
}
inline ::ISPSettings* CamCtlRequest::_internal_mutable_newispsettings() {
  if (cmdBody_case() != kNewIspSettings) {
    clear_cmdBody();
    set_has_newispsettings();
    _impl_.cmdBody_.newispsettings_ =
        ::google::protobuf::Message::DefaultConstruct<::ISPSettings>(GetArena());
  }
  return _impl_.cmdBody_.newispsettings_;
}
inline ::ISPSettings* CamCtlRequest::mutable_newispsettings() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ISPSettings* _msg = _internal_mutable_newispsettings();
  // @@protoc_insertion_point(field_mutable:CamCtlRequest.newIspSettings)
  return _msg;
}

// bool enableIRLight = 8;
inline bool CamCtlRequest::has_enableirlight() const {
  return cmdBody_case() == kEnableIRLight;
}
inline void CamCtlRequest::set_has_enableirlight() {
  _impl_._oneof_case_[0] = kEnableIRLight;
}
inline void CamCtlRequest::clear_enableirlight() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (cmdBody_case() == kEnableIRLight) {
    _impl_.cmdBody_.enableirlight_ = false;
    clear_has_cmdBody();
  }
}
inline bool CamCtlRequest::enableirlight() const {
  // @@protoc_insertion_point(field_get:CamCtlRequest.enableIRLight)
  return _internal_enableirlight();
}
inline void CamCtlRequest::set_enableirlight(bool value) {
  if (cmdBody_case() != kEnableIRLight) {
    clear_cmdBody();
    set_has_enableirlight();
  }
  _impl_.cmdBody_.enableirlight_ = value;
  // @@protoc_insertion_point(field_set:CamCtlRequest.enableIRLight)
}
inline bool CamCtlRequest::_internal_enableirlight() const {
  if (cmdBody_case() == kEnableIRLight) {
    return _impl_.cmdBody_.enableirlight_;
  }
  return false;
}

// bool fetchUserList = 9;
inline bool CamCtlRequest::has_fetchuserlist() const {
  return cmdBody_case() == kFetchUserList;
}
inline void CamCtlRequest::set_has_fetchuserlist() {
  _impl_._oneof_case_[0] = kFetchUserList;
}
inline void CamCtlRequest::clear_fetchuserlist() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (cmdBody_case() == kFetchUserList) {
    _impl_.cmdBody_.fetchuserlist_ = false;
    clear_has_cmdBody();
  }
}
inline bool CamCtlRequest::fetchuserlist() const {
  // @@protoc_insertion_point(field_get:CamCtlRequest.fetchUserList)
  return _internal_fetchuserlist();
}
inline void CamCtlRequest::set_fetchuserlist(bool value) {
  if (cmdBody_case() != kFetchUserList) {
    clear_cmdBody();
    set_has_fetchuserlist();
  }
  _impl_.cmdBody_.fetchuserlist_ = value;
  // @@protoc_insertion_point(field_set:CamCtlRequest.fetchUserList)
}
inline bool CamCtlRequest::_internal_fetchuserlist() const {
  if (cmdBody_case() == kFetchUserList) {
    return _impl_.cmdBody_.fetchuserlist_;
  }
  return false;
}

// .NewUserData userModRequest = 10;
inline bool CamCtlRequest::has_usermodrequest() const {
  return cmdBody_case() == kUserModRequest;
}
inline bool CamCtlRequest::_internal_has_usermodrequest() const {
  return cmdBody_case() == kUserModRequest;
}
inline void CamCtlRequest::set_has_usermodrequest() {
  _impl_._oneof_case_[0] = kUserModRequest;
}
inline void CamCtlRequest::clear_usermodrequest() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (cmdBody_case() == kUserModRequest) {
    if (GetArena() == nullptr) {
      delete _impl_.cmdBody_.usermodrequest_;
    }
    clear_has_cmdBody();
  }
}
inline ::NewUserData* CamCtlRequest::release_usermodrequest() {
  // @@protoc_insertion_point(field_release:CamCtlRequest.userModRequest)
  if (cmdBody_case() == kUserModRequest) {
    clear_has_cmdBody();
    auto* temp = _impl_.cmdBody_.usermodrequest_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmdBody_.usermodrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::NewUserData& CamCtlRequest::_internal_usermodrequest() const {
  return cmdBody_case() == kUserModRequest ? *_impl_.cmdBody_.usermodrequest_ : reinterpret_cast<::NewUserData&>(::_NewUserData_default_instance_);
}
inline const ::NewUserData& CamCtlRequest::usermodrequest() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CamCtlRequest.userModRequest)
  return _internal_usermodrequest();
}
inline ::NewUserData* CamCtlRequest::unsafe_arena_release_usermodrequest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CamCtlRequest.userModRequest)
  if (cmdBody_case() == kUserModRequest) {
    clear_has_cmdBody();
    auto* temp = _impl_.cmdBody_.usermodrequest_;
    _impl_.cmdBody_.usermodrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CamCtlRequest::unsafe_arena_set_allocated_usermodrequest(::NewUserData* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmdBody();
  if (value) {
    set_has_usermodrequest();
    _impl_.cmdBody_.usermodrequest_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CamCtlRequest.userModRequest)
}
inline ::NewUserData* CamCtlRequest::_internal_mutable_usermodrequest() {
  if (cmdBody_case() != kUserModRequest) {
    clear_cmdBody();
    set_has_usermodrequest();
    _impl_.cmdBody_.usermodrequest_ =
        ::google::protobuf::Message::DefaultConstruct<::NewUserData>(GetArena());
  }
  return _impl_.cmdBody_.usermodrequest_;
}
inline ::NewUserData* CamCtlRequest::mutable_usermodrequest() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::NewUserData* _msg = _internal_mutable_usermodrequest();
  // @@protoc_insertion_point(field_mutable:CamCtlRequest.userModRequest)
  return _msg;
}

// bool msParamsGetReq = 11;
inline bool CamCtlRequest::has_msparamsgetreq() const {
  return cmdBody_case() == kMsParamsGetReq;
}
inline void CamCtlRequest::set_has_msparamsgetreq() {
  _impl_._oneof_case_[0] = kMsParamsGetReq;
}
inline void CamCtlRequest::clear_msparamsgetreq() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (cmdBody_case() == kMsParamsGetReq) {
    _impl_.cmdBody_.msparamsgetreq_ = false;
    clear_has_cmdBody();
  }
}
inline bool CamCtlRequest::msparamsgetreq() const {
  // @@protoc_insertion_point(field_get:CamCtlRequest.msParamsGetReq)
  return _internal_msparamsgetreq();
}
inline void CamCtlRequest::set_msparamsgetreq(bool value) {
  if (cmdBody_case() != kMsParamsGetReq) {
    clear_cmdBody();
    set_has_msparamsgetreq();
  }
  _impl_.cmdBody_.msparamsgetreq_ = value;
  // @@protoc_insertion_point(field_set:CamCtlRequest.msParamsGetReq)
}
inline bool CamCtlRequest::_internal_msparamsgetreq() const {
  if (cmdBody_case() == kMsParamsGetReq) {
    return _impl_.cmdBody_.msparamsgetreq_;
  }
  return false;
}

// .ModeSwitchParams newMsParams = 12;
inline bool CamCtlRequest::has_newmsparams() const {
  return cmdBody_case() == kNewMsParams;
}
inline bool CamCtlRequest::_internal_has_newmsparams() const {
  return cmdBody_case() == kNewMsParams;
}
inline void CamCtlRequest::set_has_newmsparams() {
  _impl_._oneof_case_[0] = kNewMsParams;
}
inline void CamCtlRequest::clear_newmsparams() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (cmdBody_case() == kNewMsParams) {
    if (GetArena() == nullptr) {
      delete _impl_.cmdBody_.newmsparams_;
    }
    clear_has_cmdBody();
  }
}
inline ::ModeSwitchParams* CamCtlRequest::release_newmsparams() {
  // @@protoc_insertion_point(field_release:CamCtlRequest.newMsParams)
  if (cmdBody_case() == kNewMsParams) {
    clear_has_cmdBody();
    auto* temp = _impl_.cmdBody_.newmsparams_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmdBody_.newmsparams_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ModeSwitchParams& CamCtlRequest::_internal_newmsparams() const {
  return cmdBody_case() == kNewMsParams ? *_impl_.cmdBody_.newmsparams_ : reinterpret_cast<::ModeSwitchParams&>(::_ModeSwitchParams_default_instance_);
}
inline const ::ModeSwitchParams& CamCtlRequest::newmsparams() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CamCtlRequest.newMsParams)
  return _internal_newmsparams();
}
inline ::ModeSwitchParams* CamCtlRequest::unsafe_arena_release_newmsparams() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CamCtlRequest.newMsParams)
  if (cmdBody_case() == kNewMsParams) {
    clear_has_cmdBody();
    auto* temp = _impl_.cmdBody_.newmsparams_;
    _impl_.cmdBody_.newmsparams_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CamCtlRequest::unsafe_arena_set_allocated_newmsparams(::ModeSwitchParams* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmdBody();
  if (value) {
    set_has_newmsparams();
    _impl_.cmdBody_.newmsparams_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CamCtlRequest.newMsParams)
}
inline ::ModeSwitchParams* CamCtlRequest::_internal_mutable_newmsparams() {
  if (cmdBody_case() != kNewMsParams) {
    clear_cmdBody();
    set_has_newmsparams();
    _impl_.cmdBody_.newmsparams_ =
        ::google::protobuf::Message::DefaultConstruct<::ModeSwitchParams>(GetArena());
  }
  return _impl_.cmdBody_.newmsparams_;
}
inline ::ModeSwitchParams* CamCtlRequest::mutable_newmsparams() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ModeSwitchParams* _msg = _internal_mutable_newmsparams();
  // @@protoc_insertion_point(field_mutable:CamCtlRequest.newMsParams)
  return _msg;
}

inline bool CamCtlRequest::has_cmdBody() const {
  return cmdBody_case() != CMDBODY_NOT_SET;
}
inline void CamCtlRequest::clear_has_cmdBody() {
  _impl_._oneof_case_[0] = CMDBODY_NOT_SET;
}
inline CamCtlRequest::CmdBodyCase CamCtlRequest::cmdBody_case() const {
  return CamCtlRequest::CmdBodyCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// CamCtlResponse

// .CamCtlResponse.ResponseType responseType = 1;
inline void CamCtlResponse::clear_responsetype() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.responsetype_ = 0;
}
inline ::CamCtlResponse_ResponseType CamCtlResponse::responsetype() const {
  // @@protoc_insertion_point(field_get:CamCtlResponse.responseType)
  return _internal_responsetype();
}
inline void CamCtlResponse::set_responsetype(::CamCtlResponse_ResponseType value) {
  _internal_set_responsetype(value);
  // @@protoc_insertion_point(field_set:CamCtlResponse.responseType)
}
inline ::CamCtlResponse_ResponseType CamCtlResponse::_internal_responsetype() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::CamCtlResponse_ResponseType>(_impl_.responsetype_);
}
inline void CamCtlResponse::_internal_set_responsetype(::CamCtlResponse_ResponseType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.responsetype_ = value;
}

// optional string errorReason = 2;
inline bool CamCtlResponse::has_errorreason() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CamCtlResponse::clear_errorreason() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.errorreason_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CamCtlResponse::errorreason() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CamCtlResponse.errorReason)
  return _internal_errorreason();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CamCtlResponse::set_errorreason(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.errorreason_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:CamCtlResponse.errorReason)
}
inline std::string* CamCtlResponse::mutable_errorreason() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_errorreason();
  // @@protoc_insertion_point(field_mutable:CamCtlResponse.errorReason)
  return _s;
}
inline const std::string& CamCtlResponse::_internal_errorreason() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.errorreason_.Get();
}
inline void CamCtlResponse::_internal_set_errorreason(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.errorreason_.Set(value, GetArena());
}
inline std::string* CamCtlResponse::_internal_mutable_errorreason() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.errorreason_.Mutable( GetArena());
}
inline std::string* CamCtlResponse::release_errorreason() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CamCtlResponse.errorReason)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.errorreason_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.errorreason_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void CamCtlResponse::set_allocated_errorreason(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.errorreason_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.errorreason_.IsDefault()) {
          _impl_.errorreason_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CamCtlResponse.errorReason)
}

// optional bool pingResponse = 3;
inline bool CamCtlResponse::has_pingresponse() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void CamCtlResponse::clear_pingresponse() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pingresponse_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool CamCtlResponse::pingresponse() const {
  // @@protoc_insertion_point(field_get:CamCtlResponse.pingResponse)
  return _internal_pingresponse();
}
inline void CamCtlResponse::set_pingresponse(bool value) {
  _internal_set_pingresponse(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:CamCtlResponse.pingResponse)
}
inline bool CamCtlResponse::_internal_pingresponse() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pingresponse_;
}
inline void CamCtlResponse::_internal_set_pingresponse(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pingresponse_ = value;
}

// optional .NvtCodecVencSettings currentSettings = 4;
inline bool CamCtlResponse::has_currentsettings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.currentsettings_ != nullptr);
  return value;
}
inline void CamCtlResponse::clear_currentsettings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.currentsettings_ != nullptr) _impl_.currentsettings_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::NvtCodecVencSettings& CamCtlResponse::_internal_currentsettings() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::NvtCodecVencSettings* p = _impl_.currentsettings_;
  return p != nullptr ? *p : reinterpret_cast<const ::NvtCodecVencSettings&>(::_NvtCodecVencSettings_default_instance_);
}
inline const ::NvtCodecVencSettings& CamCtlResponse::currentsettings() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CamCtlResponse.currentSettings)
  return _internal_currentsettings();
}
inline void CamCtlResponse::unsafe_arena_set_allocated_currentsettings(::NvtCodecVencSettings* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.currentsettings_);
  }
  _impl_.currentsettings_ = reinterpret_cast<::NvtCodecVencSettings*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CamCtlResponse.currentSettings)
}
inline ::NvtCodecVencSettings* CamCtlResponse::release_currentsettings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::NvtCodecVencSettings* released = _impl_.currentsettings_;
  _impl_.currentsettings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::NvtCodecVencSettings* CamCtlResponse::unsafe_arena_release_currentsettings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CamCtlResponse.currentSettings)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::NvtCodecVencSettings* temp = _impl_.currentsettings_;
  _impl_.currentsettings_ = nullptr;
  return temp;
}
inline ::NvtCodecVencSettings* CamCtlResponse::_internal_mutable_currentsettings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.currentsettings_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::NvtCodecVencSettings>(GetArena());
    _impl_.currentsettings_ = reinterpret_cast<::NvtCodecVencSettings*>(p);
  }
  return _impl_.currentsettings_;
}
inline ::NvtCodecVencSettings* CamCtlResponse::mutable_currentsettings() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::NvtCodecVencSettings* _msg = _internal_mutable_currentsettings();
  // @@protoc_insertion_point(field_mutable:CamCtlResponse.currentSettings)
  return _msg;
}
inline void CamCtlResponse::set_allocated_currentsettings(::NvtCodecVencSettings* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.currentsettings_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.currentsettings_ = reinterpret_cast<::NvtCodecVencSettings*>(value);
  // @@protoc_insertion_point(field_set_allocated:CamCtlResponse.currentSettings)
}

// optional .ISPSettings currentISPSettings = 5;
inline bool CamCtlResponse::has_currentispsettings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.currentispsettings_ != nullptr);
  return value;
}
inline void CamCtlResponse::clear_currentispsettings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.currentispsettings_ != nullptr) _impl_.currentispsettings_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::ISPSettings& CamCtlResponse::_internal_currentispsettings() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::ISPSettings* p = _impl_.currentispsettings_;
  return p != nullptr ? *p : reinterpret_cast<const ::ISPSettings&>(::_ISPSettings_default_instance_);
}
inline const ::ISPSettings& CamCtlResponse::currentispsettings() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CamCtlResponse.currentISPSettings)
  return _internal_currentispsettings();
}
inline void CamCtlResponse::unsafe_arena_set_allocated_currentispsettings(::ISPSettings* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.currentispsettings_);
  }
  _impl_.currentispsettings_ = reinterpret_cast<::ISPSettings*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CamCtlResponse.currentISPSettings)
}
inline ::ISPSettings* CamCtlResponse::release_currentispsettings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::ISPSettings* released = _impl_.currentispsettings_;
  _impl_.currentispsettings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::ISPSettings* CamCtlResponse::unsafe_arena_release_currentispsettings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CamCtlResponse.currentISPSettings)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::ISPSettings* temp = _impl_.currentispsettings_;
  _impl_.currentispsettings_ = nullptr;
  return temp;
}
inline ::ISPSettings* CamCtlResponse::_internal_mutable_currentispsettings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.currentispsettings_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::ISPSettings>(GetArena());
    _impl_.currentispsettings_ = reinterpret_cast<::ISPSettings*>(p);
  }
  return _impl_.currentispsettings_;
}
inline ::ISPSettings* CamCtlResponse::mutable_currentispsettings() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::ISPSettings* _msg = _internal_mutable_currentispsettings();
  // @@protoc_insertion_point(field_mutable:CamCtlResponse.currentISPSettings)
  return _msg;
}
inline void CamCtlResponse::set_allocated_currentispsettings(::ISPSettings* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.currentispsettings_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.currentispsettings_ = reinterpret_cast<::ISPSettings*>(value);
  // @@protoc_insertion_point(field_set_allocated:CamCtlResponse.currentISPSettings)
}

// optional .UserList userList = 6;
inline bool CamCtlResponse::has_userlist() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.userlist_ != nullptr);
  return value;
}
inline void CamCtlResponse::clear_userlist() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.userlist_ != nullptr) _impl_.userlist_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::UserList& CamCtlResponse::_internal_userlist() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::UserList* p = _impl_.userlist_;
  return p != nullptr ? *p : reinterpret_cast<const ::UserList&>(::_UserList_default_instance_);
}
inline const ::UserList& CamCtlResponse::userlist() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CamCtlResponse.userList)
  return _internal_userlist();
}
inline void CamCtlResponse::unsafe_arena_set_allocated_userlist(::UserList* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.userlist_);
  }
  _impl_.userlist_ = reinterpret_cast<::UserList*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CamCtlResponse.userList)
}
inline ::UserList* CamCtlResponse::release_userlist() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::UserList* released = _impl_.userlist_;
  _impl_.userlist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::UserList* CamCtlResponse::unsafe_arena_release_userlist() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CamCtlResponse.userList)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::UserList* temp = _impl_.userlist_;
  _impl_.userlist_ = nullptr;
  return temp;
}
inline ::UserList* CamCtlResponse::_internal_mutable_userlist() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.userlist_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::UserList>(GetArena());
    _impl_.userlist_ = reinterpret_cast<::UserList*>(p);
  }
  return _impl_.userlist_;
}
inline ::UserList* CamCtlResponse::mutable_userlist() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::UserList* _msg = _internal_mutable_userlist();
  // @@protoc_insertion_point(field_mutable:CamCtlResponse.userList)
  return _msg;
}
inline void CamCtlResponse::set_allocated_userlist(::UserList* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.userlist_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.userlist_ = reinterpret_cast<::UserList*>(value);
  // @@protoc_insertion_point(field_set_allocated:CamCtlResponse.userList)
}

// optional .ModeSwitchParams currentMsParams = 7;
inline bool CamCtlResponse::has_currentmsparams() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.currentmsparams_ != nullptr);
  return value;
}
inline void CamCtlResponse::clear_currentmsparams() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.currentmsparams_ != nullptr) _impl_.currentmsparams_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::ModeSwitchParams& CamCtlResponse::_internal_currentmsparams() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::ModeSwitchParams* p = _impl_.currentmsparams_;
  return p != nullptr ? *p : reinterpret_cast<const ::ModeSwitchParams&>(::_ModeSwitchParams_default_instance_);
}
inline const ::ModeSwitchParams& CamCtlResponse::currentmsparams() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CamCtlResponse.currentMsParams)
  return _internal_currentmsparams();
}
inline void CamCtlResponse::unsafe_arena_set_allocated_currentmsparams(::ModeSwitchParams* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.currentmsparams_);
  }
  _impl_.currentmsparams_ = reinterpret_cast<::ModeSwitchParams*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CamCtlResponse.currentMsParams)
}
inline ::ModeSwitchParams* CamCtlResponse::release_currentmsparams() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::ModeSwitchParams* released = _impl_.currentmsparams_;
  _impl_.currentmsparams_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::ModeSwitchParams* CamCtlResponse::unsafe_arena_release_currentmsparams() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CamCtlResponse.currentMsParams)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::ModeSwitchParams* temp = _impl_.currentmsparams_;
  _impl_.currentmsparams_ = nullptr;
  return temp;
}
inline ::ModeSwitchParams* CamCtlResponse::_internal_mutable_currentmsparams() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.currentmsparams_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::ModeSwitchParams>(GetArena());
    _impl_.currentmsparams_ = reinterpret_cast<::ModeSwitchParams*>(p);
  }
  return _impl_.currentmsparams_;
}
inline ::ModeSwitchParams* CamCtlResponse::mutable_currentmsparams() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::ModeSwitchParams* _msg = _internal_mutable_currentmsparams();
  // @@protoc_insertion_point(field_mutable:CamCtlResponse.currentMsParams)
  return _msg;
}
inline void CamCtlResponse::set_allocated_currentmsparams(::ModeSwitchParams* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.currentmsparams_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.currentmsparams_ = reinterpret_cast<::ModeSwitchParams*>(value);
  // @@protoc_insertion_point(field_set_allocated:CamCtlResponse.currentMsParams)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::NvtCodecVencSettings_InputSource> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::NvtCodecVencSettings_InputSource>() {
  return ::NvtCodecVencSettings_InputSource_descriptor();
}
template <>
struct is_proto_enum<::NvtCodecVencSettings_Format> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::NvtCodecVencSettings_Format>() {
  return ::NvtCodecVencSettings_Format_descriptor();
}
template <>
struct is_proto_enum<::NvtCodecVencSettings_Profile> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::NvtCodecVencSettings_Profile>() {
  return ::NvtCodecVencSettings_Profile_descriptor();
}
template <>
struct is_proto_enum<::NvtCodecVencSettings_VencSVCT> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::NvtCodecVencSettings_VencSVCT>() {
  return ::NvtCodecVencSettings_VencSVCT_descriptor();
}
template <>
struct is_proto_enum<::NvtCodecVencSettings_VencRotation> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::NvtCodecVencSettings_VencRotation>() {
  return ::NvtCodecVencSettings_VencRotation_descriptor();
}
template <>
struct is_proto_enum<::ISPSettings_ISPPreset> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ISPSettings_ISPPreset>() {
  return ::ISPSettings_ISPPreset_descriptor();
}
template <>
struct is_proto_enum<::ModeSwitchParams_MSMode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ModeSwitchParams_MSMode>() {
  return ::ModeSwitchParams_MSMode_descriptor();
}
template <>
struct is_proto_enum<::CamCtlRequest_RequestType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::CamCtlRequest_RequestType>() {
  return ::CamCtlRequest_RequestType_descriptor();
}
template <>
struct is_proto_enum<::CamCtlResponse_ResponseType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::CamCtlResponse_ResponseType>() {
  return ::CamCtlResponse_ResponseType_descriptor();
}
template <>
struct is_proto_enum<::VencType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::VencType>() {
  return ::VencType_descriptor();
}
template <>
struct is_proto_enum<::StepMotorType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::StepMotorType>() {
  return ::StepMotorType_descriptor();
}
template <>
struct is_proto_enum<::StepMotorDirection> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::StepMotorDirection>() {
  return ::StepMotorDirection_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cameractl_2eproto_2epb_2eh
